{"version":3,"file":"cameraKitLensSource.js","sourceRoot":"","sources":["../../src/lens/cameraKitLensSource.ts"],"names":[],"mappings":"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","sourcesContent":["import { Writer } from \"protobufjs\";\nimport { Lens } from \"../generated-proto/pb_schema/camera_kit/v3/lens\";\nimport { LensesClient, lensesClientFactory } from \"../clients/lensesClient\";\nimport { ConcatInjectable } from \"../dependency-injection/Injectable\";\nimport { LensSource, lensSourcesFactory } from \"./LensSource\";\n\n/**\n * This LensSource loads lenses from the CameraKit backend service. It is meant to be used as the last LensSource in the\n * LensSource[] array used by LensRepository to load lenses.\n *\n * We ensure this is the case by providing cameraKitLensSourceFactory *after* the DI container has been modified by the\n * application during bootstrap -- this way we're guaranteed to place this LensSource after all other LensSources.\n *\n * @internal\n */\nexport const cameraKitLensSourceFactory = ConcatInjectable(\n    lensSourcesFactory.token,\n    [lensesClientFactory.token],\n    (lensesClient: LensesClient): LensSource => ({\n        // This LensSource will claim ownership of all lens groups -- it should be used as the last element in a\n        // list of LensSources, as a catch-all to load any lens groups not claimed by other LensSources.\n        isGroupOwner(): boolean {\n            return true;\n        },\n\n        async loadLens(lensId: string, groupId: string): Promise<ArrayBuffer> {\n            const result = await lensesClient.getGroupLens({ lensId, groupId });\n            if (!result.ok) {\n                const error = result.unwrapErr();\n                throw new Error(\n                    `Cannot load lens lens ${lensId} from group ${groupId}. An error occured in the ` +\n                        `gRPC client:\\n\\t[${error.status}] ${error.statusMessage}`\n                );\n            }\n            const response = result.unwrap();\n            if (!response.message?.lens) {\n                throw new Error(\n                    `Cannot load lens ${lensId} from group ${groupId}. The response did not contain ` +\n                        `a lens.\\n\\t${JSON.stringify(result)} for requestId ${response.headers.get(\"x-request-id\")}`\n                );\n            }\n            return Lens.encode(response.message.lens, Writer.create().uint32(10).fork()).ldelim().finish();\n        },\n\n        async loadLensGroup(groupId: string): Promise<ArrayBuffer> {\n            const result = await lensesClient.getGroup({ id: groupId });\n            if (!result.ok) {\n                const error = result.unwrapErr();\n                throw new Error(\n                    `Cannot load lens group ${groupId}. An error occured in the gRPC client:\\n` +\n                        `\\t[${error.status}] ${error.statusMessage}`\n                );\n            }\n            const response = result.unwrap();\n            if (!response.message?.lenses) {\n                throw new Error(\n                    `Cannot load lens group ${groupId}. The response contained no lenses ` +\n                        `\\n\\t${JSON.stringify(response)} for requestId ${response.headers.get(\"x-request-id\")}`\n                );\n            }\n            const writer = Writer.create();\n            response.message.lenses.forEach((lens) => Lens.encode(lens, writer.uint32(10).fork()).ldelim());\n            return writer.finish();\n        },\n    })\n);\n"]}