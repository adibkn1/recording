import { __awaiter } from "tslib";
import { Injectable } from "../dependency-injection/Injectable";
import { Envelope } from "../generated-proto/pb_schema/camera_kit/v3/export";
/**
 * By default, no custom {@link LensSources} are provided to CameraKit. But to enable certain advanced use-cases,
 * applications may provide their own LensSources.
 *
 * Perhaps the most convenient way to do this is with {@link ConcatInjectable}, as shown here:
 *
 * @example
 * ```ts
 * import { bootstrapCameraKit, lensSourcesFactory, LensSource } from '@snap/camera-kit'
 *
 * const cameraKit = bootstrapCameraKit(config, (container) => {
 *   return container.provides(ConcatInjectable(
 *     lensSourcesFactory.token,
 *     (): LensSource => { return ... }
 *   ))
 * })
 * ```
 */
export const lensSourcesFactory = Injectable("lensSources", () => []);
/**
 * Given a list of LensSources (like the one provided by CameraKit's DI container under the `'lensSources'` token), and
 * a groupId/lensId, return a list of lenses loaded by the first LensSource claiming ownership of the given groupId.
 *
 * @internal
 */
export function loadLensesFromSources(sources, groupId, lensId) {
    return __awaiter(this, void 0, void 0, function* () {
        const source = sources.find((source) => source.isGroupOwner(groupId));
        if (!source) {
            throw new Error(`Cannot load lens ${lensId ? `${lensId} from ` : ""}group ${groupId}. No LensSource claimed ownership of` +
                `that lens group.`);
        }
        const envelope = lensId === undefined ? yield source.loadLensGroup(groupId) : yield source.loadLens(lensId, groupId);
        return envelope instanceof ArrayBuffer || ArrayBuffer.isView(envelope)
            ? Envelope.decode(envelope instanceof Uint8Array ? envelope : new Uint8Array(envelope)).lenses
            : [];
    });
}
//# sourceMappingURL=LensSource.js.map