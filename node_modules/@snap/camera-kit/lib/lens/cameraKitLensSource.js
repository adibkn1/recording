import { __awaiter } from "tslib";
import { Writer } from "protobufjs";
import { Lens } from "../generated-proto/pb_schema/camera_kit/v3/lens";
import { lensesClientFactory } from "../clients/lensesClient";
import { ConcatInjectable } from "../dependency-injection/Injectable";
import { lensSourcesFactory } from "./LensSource";
/**
 * This LensSource loads lenses from the CameraKit backend service. It is meant to be used as the last LensSource in the
 * LensSource[] array used by LensRepository to load lenses.
 *
 * We ensure this is the case by providing cameraKitLensSourceFactory *after* the DI container has been modified by the
 * application during bootstrap -- this way we're guaranteed to place this LensSource after all other LensSources.
 *
 * @internal
 */
export const cameraKitLensSourceFactory = ConcatInjectable(lensSourcesFactory.token, [lensesClientFactory.token], (lensesClient) => ({
    // This LensSource will claim ownership of all lens groups -- it should be used as the last element in a
    // list of LensSources, as a catch-all to load any lens groups not claimed by other LensSources.
    isGroupOwner() {
        return true;
    },
    loadLens(lensId, groupId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield lensesClient.getGroupLens({ lensId, groupId });
            if (!result.ok) {
                const error = result.unwrapErr();
                throw new Error(`Cannot load lens lens ${lensId} from group ${groupId}. An error occured in the ` +
                    `gRPC client:\n\t[${error.status}] ${error.statusMessage}`);
            }
            const response = result.unwrap();
            if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lens)) {
                throw new Error(`Cannot load lens ${lensId} from group ${groupId}. The response did not contain ` +
                    `a lens.\n\t${JSON.stringify(result)} for requestId ${response.headers.get("x-request-id")}`);
            }
            return Lens.encode(response.message.lens, Writer.create().uint32(10).fork()).ldelim().finish();
        });
    },
    loadLensGroup(groupId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield lensesClient.getGroup({ id: groupId });
            if (!result.ok) {
                const error = result.unwrapErr();
                throw new Error(`Cannot load lens group ${groupId}. An error occured in the gRPC client:\n` +
                    `\t[${error.status}] ${error.statusMessage}`);
            }
            const response = result.unwrap();
            if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lenses)) {
                throw new Error(`Cannot load lens group ${groupId}. The response contained no lenses ` +
                    `\n\t${JSON.stringify(response)} for requestId ${response.headers.get("x-request-id")}`);
            }
            const writer = Writer.create();
            response.message.lenses.forEach((lens) => Lens.encode(lens, writer.uint32(10).fork()).ldelim());
            return writer.finish();
        });
    },
}));
//# sourceMappingURL=cameraKitLensSource.js.map