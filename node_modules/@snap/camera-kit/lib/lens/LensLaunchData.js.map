{"version":3,"file":"LensLaunchData.js","sourceRoot":"","sources":["../../src/lens/LensLaunchData.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,gDAAgD,CAAC;AAC5E,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAIpE,MAAM,aAAa,GAAG,CAAC,KAAc,EAAmB,EAAE;IACtD,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAC7E,CAAC,CAAC;AACF,MAAM,kBAAkB,GAAG,CAAC,KAAc,EAAW,EAAE;IACnD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;QAAE,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACrF,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,CAAC;AACnD,CAAC,CAAC;AAmCF;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,UAA0B,EAAE,eAA4B,EAAc,EAAE;IACzG,wEAAwE;IACxE,mEAAmE;IACnE,6CAA6C;IAC7C,OAAO,UAAU,CAAC,MAAM,CACpB,UAAU,CAAC,WAAW,iCACf,UAAU,KACb,YAAY,EAAE,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,sBAAsB,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,EACnG,eAAe,EAAE,EAAE,KAAK,EAAE,IAAI,UAAU,CAAC,eAAe,CAAC,EAAE,IAC7D,CACL;SACI,MAAM,EAAE;SACR,KAAK,EAAE,CAAC;AACjB,CAAC,CAAC;AAEF,SAAS,sBAAsB,CAAC,YAA+B;IAC3D,MAAM,QAAQ,GAAG,CAAC,OAAe,EAAE,EAAE,CAAC,IAAI,KAAK,CAAC,uCAAuC,OAAO,EAAE,CAAC,CAAC;IAElG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,YAAY,YAAY,IAAI,EAAE;QACzD,MAAM,QAAQ,CAAC,gCAAgC,OAAO,YAAY,WAAW,CAAC,CAAC;KAClF;IAED,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QACrD,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EAAE;YAC5B,MAAM,QAAQ,CACV,2EAA2E,GAAG,MAAM;gBAChF,KAAK,OAAO,KAAK,yBAAyB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CACxE,CAAC;SACL;KACJ;IAED,OAAO,EAAE,IAAI,EAAE,IAAI,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC;AAC5E,CAAC","sourcesContent":["import { LaunchData } from \"../generated-proto/pb_schema/lenses/launchdata\";\nimport { isNumber, isRecord, isString } from \"../common/typeguards\";\nimport { LaunchParams } from \"../generated-proto/pb_schema/lenses/launch_params\";\nimport { UserData_Zodiac } from \"../generated-proto/pb_schema/lenses/user_data\";\n\nconst isValidNumber = (value: unknown): value is number => {\n    return isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);\n};\nconst isValidLaunchParam = (value: unknown): boolean => {\n    if (Array.isArray(value)) return value.every(isString) || value.every(isValidNumber);\n    return isString(value) || isValidNumber(value);\n};\n\ntype LensLaunchParams = Record<string, string | number | string[] | number[]>;\n\n/**\n * Some Lenses may accept (or require) certain data provided to them when the Lens is applied.\n *\n * This data may include things like user info (to render the user's name, for example, or perform some task based on\n * their birth date), or arbitrary `launchParams` defined by the Lens.\n *\n * @category Lenses\n */\nexport interface LensLaunchData {\n    userId?: string;\n    userData?: {\n        userId: string;\n        username: string;\n        birthdate: string;\n        displayName: string;\n        countrycode: string;\n        score: number;\n        bitmojiInfo?: {\n            avatarId: string;\n            selfieId: string;\n        };\n        friendInfo?: {\n            friendshipStart?: Date;\n            lastInteraction?: Date;\n            streak: number;\n        };\n        zodiac: UserData_Zodiac;\n    };\n    launchParams?: LensLaunchParams;\n}\n\n/**\n * @internal\n */\nexport const encodeLensLaunchData = (launchData: LensLaunchData, persistentStore: ArrayBuffer): Uint8Array => {\n    // finish() protobufjs method returns UInt8Array with shared ArrayBuffer\n    // to avoid of detached buffer error when passing data to Lens Core\n    // data should be copied using slice() method\n    return LaunchData.encode(\n        LaunchData.fromPartial({\n            ...launchData,\n            launchParams: launchData.launchParams ? encodeLensLaunchParams(launchData.launchParams) : undefined,\n            persistentStore: { store: new Uint8Array(persistentStore) },\n        })\n    )\n        .finish()\n        .slice();\n};\n\nfunction encodeLensLaunchParams(launchParams?: LensLaunchParams): LaunchParams {\n    const newError = (message: string) => new Error(`Failed to encode lens launchParams. ${message}`);\n\n    if (!isRecord(launchParams) || launchParams instanceof Date) {\n        throw newError(`Expected a plain object, got ${typeof launchParams} instead.`);\n    }\n\n    for (const [key, value] of Object.entries(launchParams)) {\n        if (!isValidLaunchParam(value)) {\n            throw newError(\n                `Values must be strings, numbers, or arrays of strings or numbers. Field ${key} is ` +\n                    `a ${typeof value} instead, with value: ${JSON.stringify(value)}`\n            );\n        }\n    }\n\n    return { data: new TextEncoder().encode(JSON.stringify(launchParams)) };\n}\n"]}