/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 2553:
/***/ (function(module) {

!function(e,t){if(true)module.exports=t();else { var n, r; }}(this,(function(){return e={418:function(e,t){!function(e,t){for(var r in t)e[r]=t[r]}(t,function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.i=function(e){return e},r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(3),o=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={splitValues:!1});var r,o=this;this.headersMap={},e&&("undefined"!=typeof Headers&&e instanceof Headers?n.getHeaderKeys(e).forEach((function(r){n.getHeaderValues(e,r).forEach((function(e){t.splitValues?o.append(r,n.splitHeaderValue(e)):o.append(r,e)}))})):"object"==typeof(r=e)&&"object"==typeof r.headersMap&&"function"==typeof r.forEach?e.forEach((function(e,t){o.append(e,t)})):"undefined"!=typeof Map&&e instanceof Map?e.forEach((function(e,t){o.append(t,e)})):"string"==typeof e?this.appendFromString(e):"object"==typeof e&&Object.getOwnPropertyNames(e).forEach((function(t){var r=e[t];Array.isArray(r)?r.forEach((function(e){o.append(t,e)})):o.append(t,r)})))}return e.prototype.appendFromString=function(e){for(var t=e.split("\r\n"),r=0;r<t.length;r++){var n=t[r],o=n.indexOf(":");if(o>0){var s=n.substring(0,o).trim(),i=n.substring(o+1).trim();this.append(s,i)}}},e.prototype.delete=function(e,t){var r=n.normalizeName(e);if(void 0===t)delete this.headersMap[r];else{var o=this.headersMap[r];if(o){var s=o.indexOf(t);s>=0&&o.splice(s,1),0===o.length&&delete this.headersMap[r]}}},e.prototype.append=function(e,t){var r=this,o=n.normalizeName(e);Array.isArray(this.headersMap[o])||(this.headersMap[o]=[]),Array.isArray(t)?t.forEach((function(e){r.headersMap[o].push(n.normalizeValue(e))})):this.headersMap[o].push(n.normalizeValue(t))},e.prototype.set=function(e,t){var r=n.normalizeName(e);if(Array.isArray(t)){var o=[];t.forEach((function(e){o.push(n.normalizeValue(e))})),this.headersMap[r]=o}else this.headersMap[r]=[n.normalizeValue(t)]},e.prototype.has=function(e,t){var r=this.headersMap[n.normalizeName(e)];if(!Array.isArray(r))return!1;if(void 0!==t){var o=n.normalizeValue(t);return r.indexOf(o)>=0}return!0},e.prototype.get=function(e){var t=this.headersMap[n.normalizeName(e)];return void 0!==t?t.concat():[]},e.prototype.forEach=function(e){var t=this;Object.getOwnPropertyNames(this.headersMap).forEach((function(r){e(r,t.headersMap[r])}),this)},e.prototype.toHeaders=function(){if("undefined"!=typeof Headers){var e=new Headers;return this.forEach((function(t,r){r.forEach((function(r){e.append(t,r)}))})),e}throw new Error("Headers class is not defined")},e}();t.BrowserHeaders=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(0);t.BrowserHeaders=n.BrowserHeaders},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.iterateHeaders=function(e,t){for(var r=e[Symbol.iterator](),n=r.next();!n.done;)t(n.value[0]),n=r.next()},t.iterateHeadersKeys=function(e,t){for(var r=e.keys(),n=r.next();!n.done;)t(n.value),n=r.next()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(2);t.normalizeName=function(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()},t.normalizeValue=function(e){return"string"!=typeof e&&(e=String(e)),e},t.getHeaderValues=function(e,t){var r=e;if(r instanceof Headers&&r.getAll)return r.getAll(t);var n=r.get(t);return n&&"string"==typeof n?[n]:n},t.getHeaderKeys=function(e){var t=e,r={},o=[];return t.keys?n.iterateHeadersKeys(t,(function(e){r[e]||(r[e]=!0,o.push(e))})):t.forEach?t.forEach((function(e,t){r[t]||(r[t]=!0,o.push(t))})):n.iterateHeaders(t,(function(e){var t=e[0];r[t]||(r[t]=!0,o.push(t))})),o},t.splitHeaderValue=function(e){var t=[];return e.split(", ").forEach((function(e){e.split(",").forEach((function(e){t.push(e)}))})),t}}]))},617:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ChunkParser=t.ChunkType=t.encodeASCII=t.decodeASCII=void 0;var n,o=r(65);function s(e){return 9===(t=e)||10===t||13===t||e>=32&&e<=126;var t}function i(e){for(var t=0;t!==e.length;++t)if(!s(e[t]))throw new Error("Metadata is not valid (printable) ASCII");return String.fromCharCode.apply(String,Array.prototype.slice.call(e))}function a(e){return 128==(128&e.getUint8(0))}function u(e){return e.getUint32(1,!1)}function d(e,t,r){return e.byteLength-t>=r}function c(e,t,r){if(e.slice)return e.slice(t,r);var n=e.length;void 0!==r&&(n=r);for(var o=new Uint8Array(n-t),s=0,i=t;i<n;i++)o[s++]=e[i];return o}t.decodeASCII=i,t.encodeASCII=function(e){for(var t=new Uint8Array(e.length),r=0;r!==e.length;++r){var n=e.charCodeAt(r);if(!s(n))throw new Error("Metadata contains invalid ASCII");t[r]=n}return t},function(e){e[e.MESSAGE=1]="MESSAGE",e[e.TRAILERS=2]="TRAILERS"}(n=t.ChunkType||(t.ChunkType={}));var p=function(){function e(){this.buffer=null,this.position=0}return e.prototype.parse=function(e,t){if(0===e.length&&t)return[];var r,s=[];if(null==this.buffer)this.buffer=e,this.position=0;else if(this.position===this.buffer.byteLength)this.buffer=e,this.position=0;else{var p=this.buffer.byteLength-this.position,h=new Uint8Array(p+e.byteLength),f=c(this.buffer,this.position);h.set(f,0);var l=new Uint8Array(e);h.set(l,p),this.buffer=h,this.position=0}for(;;){if(!d(this.buffer,this.position,5))return s;var g=c(this.buffer,this.position,this.position+5),b=new DataView(g.buffer,g.byteOffset,g.byteLength),y=u(b);if(!d(this.buffer,this.position,5+y))return s;var v=c(this.buffer,this.position+5,this.position+5+y);if(this.position+=5+y,a(b))return s.push({chunkType:n.TRAILERS,trailers:(r=v,new o.Metadata(i(r)))}),s;s.push({chunkType:n.MESSAGE,data:v})}},e}();t.ChunkParser=p},8:function(e,t){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.httpStatusToCode=t.Code=void 0,function(e){e[e.OK=0]="OK",e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"}(r=t.Code||(t.Code={})),t.httpStatusToCode=function(e){switch(e){case 0:return r.Internal;case 200:return r.OK;case 400:return r.InvalidArgument;case 401:return r.Unauthenticated;case 403:return r.PermissionDenied;case 404:return r.NotFound;case 409:return r.Aborted;case 412:return r.FailedPrecondition;case 429:return r.ResourceExhausted;case 499:return r.Canceled;case 500:return r.Unknown;case 501:return r.Unimplemented;case 503:return r.Unavailable;case 504:return r.DeadlineExceeded;default:return r.Unknown}}},934:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.client=void 0;var n=r(65),o=r(617),s=r(8),i=r(346),a=r(57),u=r(882);t.client=function(e,t){return new d(e,t)};var d=function(){function e(e,t){this.started=!1,this.sentFirstMessage=!1,this.completed=!1,this.closed=!1,this.finishedSending=!1,this.onHeadersCallbacks=[],this.onMessageCallbacks=[],this.onEndCallbacks=[],this.parser=new o.ChunkParser,this.methodDefinition=e,this.props=t,this.createTransport()}return e.prototype.createTransport=function(){var e=this.props.host+"/"+this.methodDefinition.service.serviceName+"/"+this.methodDefinition.methodName,t={methodDefinition:this.methodDefinition,debug:this.props.debug||!1,url:e,onHeaders:this.onTransportHeaders.bind(this),onChunk:this.onTransportChunk.bind(this),onEnd:this.onTransportEnd.bind(this)};this.props.transport?this.transport=this.props.transport(t):this.transport=a.makeDefaultTransport(t)},e.prototype.onTransportHeaders=function(e,t){if(this.props.debug&&i.debug("onHeaders",e,t),this.closed)this.props.debug&&i.debug("grpc.onHeaders received after request was closed - ignoring");else if(0===t);else{this.responseHeaders=e,this.props.debug&&i.debug("onHeaders.responseHeaders",JSON.stringify(this.responseHeaders,null,2));var r=c(e);this.props.debug&&i.debug("onHeaders.gRPCStatus",r);var n=r&&r>=0?r:s.httpStatusToCode(t);this.props.debug&&i.debug("onHeaders.code",n);var o=e.get("grpc-message")||[];if(this.props.debug&&i.debug("onHeaders.gRPCMessage",o),this.rawOnHeaders(e),n!==s.Code.OK){var a=this.decodeGRPCStatus(o[0]);this.rawOnError(n,a,e)}}},e.prototype.onTransportChunk=function(e){var t=this;if(this.closed)this.props.debug&&i.debug("grpc.onChunk received after request was closed - ignoring");else{var r=[];try{r=this.parser.parse(e)}catch(e){return this.props.debug&&i.debug("onChunk.parsing error",e,e.message),void this.rawOnError(s.Code.Internal,"parsing error: "+e.message)}r.forEach((function(e){if(e.chunkType===o.ChunkType.MESSAGE){var r=t.methodDefinition.responseType.deserializeBinary(e.data);t.rawOnMessage(r)}else e.chunkType===o.ChunkType.TRAILERS&&(t.responseHeaders?(t.responseTrailers=new n.Metadata(e.trailers),t.props.debug&&i.debug("onChunk.trailers",t.responseTrailers)):(t.responseHeaders=new n.Metadata(e.trailers),t.rawOnHeaders(t.responseHeaders)))}))}},e.prototype.onTransportEnd=function(){if(this.props.debug&&i.debug("grpc.onEnd"),this.closed)this.props.debug&&i.debug("grpc.onEnd received after request was closed - ignoring");else if(void 0!==this.responseTrailers){var e=c(this.responseTrailers);if(null!==e){var t=this.responseTrailers.get("grpc-message"),r=this.decodeGRPCStatus(t[0]);this.rawOnEnd(e,r,this.responseTrailers)}else this.rawOnError(s.Code.Internal,"Response closed without grpc-status (Trailers provided)")}else{if(void 0===this.responseHeaders)return void this.rawOnError(s.Code.Unknown,"Response closed without headers");var n=c(this.responseHeaders),o=this.responseHeaders.get("grpc-message");if(this.props.debug&&i.debug("grpc.headers only response ",n,o),null===n)return void this.rawOnEnd(s.Code.Unknown,"Response closed without grpc-status (Headers only)",this.responseHeaders);var a=this.decodeGRPCStatus(o[0]);this.rawOnEnd(n,a,this.responseHeaders)}},e.prototype.decodeGRPCStatus=function(e){if(!e)return"";try{return decodeURIComponent(e)}catch(t){return e}},e.prototype.rawOnEnd=function(e,t,r){var n=this;this.props.debug&&i.debug("rawOnEnd",e,t,r),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(o){if(!n.closed)try{o(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnHeaders=function(e){this.props.debug&&i.debug("rawOnHeaders",e),this.completed||this.onHeadersCallbacks.forEach((function(t){try{t(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.rawOnError=function(e,t,r){var o=this;void 0===r&&(r=new n.Metadata),this.props.debug&&i.debug("rawOnError",e,t),this.completed||(this.completed=!0,this.onEndCallbacks.forEach((function(n){if(!o.closed)try{n(e,t,r)}catch(e){setTimeout((function(){throw e}),0)}})))},e.prototype.rawOnMessage=function(e){var t=this;this.props.debug&&i.debug("rawOnMessage",e.toObject()),this.completed||this.closed||this.onMessageCallbacks.forEach((function(r){if(!t.closed)try{r(e)}catch(e){setTimeout((function(){throw e}),0)}}))},e.prototype.onHeaders=function(e){this.onHeadersCallbacks.push(e)},e.prototype.onMessage=function(e){this.onMessageCallbacks.push(e)},e.prototype.onEnd=function(e){this.onEndCallbacks.push(e)},e.prototype.start=function(e){if(this.started)throw new Error("Client already started - cannot .start()");this.started=!0;var t=new n.Metadata(e||{});t.set("content-type","application/grpc-web+proto"),t.set("x-grpc-web","1"),this.transport.start(t)},e.prototype.send=function(e){if(!this.started)throw new Error("Client not started - .start() must be called before .send()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .send()");if(!this.methodDefinition.requestStream&&this.sentFirstMessage)throw new Error("Message already sent for non-client-streaming method - cannot .send()");this.sentFirstMessage=!0;var t=u.frameRequest(e);this.transport.sendMessage(t)},e.prototype.finishSend=function(){if(!this.started)throw new Error("Client not started - .finishSend() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .send()");if(this.finishedSending)throw new Error("Client already finished sending - cannot .finishSend()");this.finishedSending=!0,this.transport.finishSend()},e.prototype.close=function(){if(!this.started)throw new Error("Client not started - .start() must be called before .close()");if(this.closed)throw new Error("Client already closed - cannot .close()");this.closed=!0,this.props.debug&&i.debug("request.abort aborting request"),this.transport.cancel()},e}();function c(e){var t=e.get("grpc-status")||[];if(t.length>0)try{var r=t[0];return parseInt(r,10)}catch(e){return null}return null}},346:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.debug=void 0,t.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];console.debug?console.debug.apply(null,e):console.log.apply(null,e)}},607:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.grpc=void 0;var n,o=r(418),s=r(57),i=r(229),a=r(540),u=r(210),d=r(859),c=r(8),p=r(938),h=r(35),f=r(934);(n=t.grpc||(t.grpc={})).setDefaultTransport=s.setDefaultTransportFactory,n.CrossBrowserHttpTransport=d.CrossBrowserHttpTransport,n.FetchReadableStreamTransport=i.FetchReadableStreamTransport,n.XhrTransport=u.XhrTransport,n.WebsocketTransport=a.WebsocketTransport,n.Code=c.Code,n.Metadata=o.BrowserHeaders,n.client=function(e,t){return f.client(e,t)},n.invoke=p.invoke,n.unary=h.unary},938:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.invoke=void 0;var n=r(934);t.invoke=function(e,t){if(e.requestStream)throw new Error(".invoke cannot be used with client-streaming methods. Use .client instead.");var r=n.client(e,{host:t.host,transport:t.transport,debug:t.debug});return t.onHeaders&&r.onHeaders(t.onHeaders),t.onMessage&&r.onMessage(t.onMessage),t.onEnd&&r.onEnd(t.onEnd),r.start(t.metadata),r.send(t.request),r.finishSend(),{close:function(){r.close()}}}},65:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Metadata=void 0;var n=r(418);Object.defineProperty(t,"Metadata",{enumerable:!0,get:function(){return n.BrowserHeaders}})},57:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeDefaultTransport=t.setDefaultTransportFactory=void 0;var n=r(859),o=function(e){return n.CrossBrowserHttpTransport({withCredentials:!1})(e)};t.setDefaultTransportFactory=function(e){o=e},t.makeDefaultTransport=function(e){return o(e)}},229:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return(n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.detectFetchSupport=t.FetchReadableStreamTransport=void 0;var o=r(65),s=r(346);t.FetchReadableStreamTransport=function(e){return function(t){return function(e,t){return e.debug&&s.debug("fetchRequest",e),new i(e,t)}(t,e)}};var i=function(){function e(e,t){this.cancelled=!1,this.controller=self.AbortController&&new AbortController,this.options=e,this.init=t}return e.prototype.pump=function(e,t){var r=this;if(this.reader=e,this.cancelled)return this.options.debug&&s.debug("Fetch.pump.cancel at first pump"),void this.reader.cancel().catch((function(e){r.options.debug&&s.debug("Fetch.pump.reader.cancel exception",e)}));this.reader.read().then((function(e){if(e.done)return r.options.onEnd(),t;r.options.onChunk(e.value),r.pump(r.reader,t)})).catch((function(e){r.cancelled?r.options.debug&&s.debug("Fetch.catch - request cancelled"):(r.cancelled=!0,r.options.debug&&s.debug("Fetch.catch",e.message),r.options.onEnd(e))}))},e.prototype.send=function(e){var t=this;fetch(this.options.url,n(n({},this.init),{headers:this.metadata.toHeaders(),method:"POST",body:e,signal:this.controller&&this.controller.signal})).then((function(e){if(t.options.debug&&s.debug("Fetch.response",e),t.options.onHeaders(new o.Metadata(e.headers),e.status),!e.body)return e;t.pump(e.body.getReader(),e)})).catch((function(e){t.cancelled?t.options.debug&&s.debug("Fetch.catch - request cancelled"):(t.cancelled=!0,t.options.debug&&s.debug("Fetch.catch",e.message),t.options.onEnd(e))}))},e.prototype.sendMessage=function(e){this.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){this.metadata=e},e.prototype.cancel=function(){var e=this;this.cancelled?this.options.debug&&s.debug("Fetch.cancel already cancelled"):(this.cancelled=!0,this.controller?(this.options.debug&&s.debug("Fetch.cancel.controller.abort"),this.controller.abort()):this.options.debug&&s.debug("Fetch.cancel.missing abort controller"),this.reader?(this.options.debug&&s.debug("Fetch.cancel.reader.cancel"),this.reader.cancel().catch((function(t){e.options.debug&&s.debug("Fetch.cancel.reader.cancel exception",t)}))):this.options.debug&&s.debug("Fetch.cancel before reader"))},e}();t.detectFetchSupport=function(){return"undefined"!=typeof Response&&Response.prototype.hasOwnProperty("body")&&"function"==typeof Headers}},859:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CrossBrowserHttpTransport=void 0;var n=r(229),o=r(210);t.CrossBrowserHttpTransport=function(e){if(n.detectFetchSupport()){var t={credentials:e.withCredentials?"include":"same-origin"};return n.FetchReadableStreamTransport(t)}return o.XhrTransport({withCredentials:e.withCredentials})}},210:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)});Object.defineProperty(t,"__esModule",{value:!0}),t.stringToArrayBuffer=t.MozChunkedArrayBufferXHR=t.XHR=t.XhrTransport=void 0;var s=r(65),i=r(346),a=r(849);t.XhrTransport=function(e){return function(t){if(a.detectMozXHRSupport())return new d(t,e);if(a.detectXHROverrideMimeTypeSupport())return new u(t,e);throw new Error("This environment's XHR implementation cannot support binary transfer.")}};var u=function(){function e(e,t){this.options=e,this.init=t}return e.prototype.onProgressEvent=function(){this.options.debug&&i.debug("XHR.onProgressEvent.length: ",this.xhr.response.length);var e=this.xhr.response.substr(this.index);this.index=this.xhr.response.length;var t=p(e);this.options.onChunk(t)},e.prototype.onLoadEvent=function(){this.options.debug&&i.debug("XHR.onLoadEvent"),this.options.onEnd()},e.prototype.onStateChange=function(){this.options.debug&&i.debug("XHR.onStateChange",this.xhr.readyState),this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED&&this.options.onHeaders(new s.Metadata(this.xhr.getAllResponseHeaders()),this.xhr.status)},e.prototype.sendMessage=function(e){this.xhr.send(e)},e.prototype.finishSend=function(){},e.prototype.start=function(e){var t=this;this.metadata=e;var r=new XMLHttpRequest;this.xhr=r,r.open("POST",this.options.url),this.configureXhr(),this.metadata.forEach((function(e,t){r.setRequestHeader(e,t.join(", "))})),r.withCredentials=Boolean(this.init.withCredentials),r.addEventListener("readystatechange",this.onStateChange.bind(this)),r.addEventListener("progress",this.onProgressEvent.bind(this)),r.addEventListener("loadend",this.onLoadEvent.bind(this)),r.addEventListener("error",(function(e){t.options.debug&&i.debug("XHR.error",e),t.options.onEnd(e.error)}))},e.prototype.configureXhr=function(){this.xhr.responseType="text",this.xhr.overrideMimeType("text/plain; charset=x-user-defined")},e.prototype.cancel=function(){this.options.debug&&i.debug("XHR.abort"),this.xhr.abort()},e}();t.XHR=u;var d=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.configureXhr=function(){this.options.debug&&i.debug("MozXHR.configureXhr: setting responseType to 'moz-chunked-arraybuffer'"),this.xhr.responseType="moz-chunked-arraybuffer"},t.prototype.onProgressEvent=function(){var e=this.xhr.response;this.options.debug&&i.debug("MozXHR.onProgressEvent: ",new Uint8Array(e)),this.options.onChunk(new Uint8Array(e))},t}(u);function c(e,t){var r=e.charCodeAt(t);if(r>=55296&&r<=56319){var n=e.charCodeAt(t+1);n>=56320&&n<=57343&&(r=65536+(r-55296<<10)+(n-56320))}return r}function p(e){for(var t=new Uint8Array(e.length),r=0,n=0;n<e.length;n++){var o=String.prototype.codePointAt?e.codePointAt(n):c(e,n);t[r++]=255&o}return t}t.MozChunkedArrayBufferXHR=d,t.stringToArrayBuffer=p},849:function(e,t){"use strict";var r;function n(){if(void 0!==r)return r;if(XMLHttpRequest){r=new XMLHttpRequest;try{r.open("GET","https://localhost")}catch(e){}}return r}function o(e){var t=n();if(!t)return!1;try{return t.responseType=e,t.responseType===e}catch(e){}return!1}Object.defineProperty(t,"__esModule",{value:!0}),t.detectXHROverrideMimeTypeSupport=t.detectMozXHRSupport=t.xhrSupportsResponseType=void 0,t.xhrSupportsResponseType=o,t.detectMozXHRSupport=function(){return"undefined"!=typeof XMLHttpRequest&&o("moz-chunked-arraybuffer")},t.detectXHROverrideMimeTypeSupport=function(){return"undefined"!=typeof XMLHttpRequest&&XMLHttpRequest.prototype.hasOwnProperty("overrideMimeType")}},540:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebsocketTransport=void 0;var n,o=r(346),s=r(617);!function(e){e[e.FINISH_SEND=1]="FINISH_SEND"}(n||(n={}));var i=new Uint8Array([1]);t.WebsocketTransport=function(){return function(e){return function(e){e.debug&&o.debug("websocketRequest",e);var t,r=function(e){if("https://"===e.substr(0,8))return"wss://"+e.substr(8);if("http://"===e.substr(0,7))return"ws://"+e.substr(7);throw new Error("Websocket transport constructed with non-https:// or http:// host.")}(e.url),a=[];function u(e){if(e===n.FINISH_SEND)t.send(i);else{var r=e,o=new Int8Array(r.byteLength+1);o.set(new Uint8Array([0])),o.set(r,1),t.send(o)}}return{sendMessage:function(e){t&&t.readyState!==t.CONNECTING?u(e):a.push(e)},finishSend:function(){t&&t.readyState!==t.CONNECTING?u(n.FINISH_SEND):a.push(n.FINISH_SEND)},start:function(n){(t=new WebSocket(r,["grpc-websockets"])).binaryType="arraybuffer",t.onopen=function(){var r;e.debug&&o.debug("websocketRequest.onopen"),t.send((r="",n.forEach((function(e,t){r+=e+": "+t.join(", ")+"\r\n"})),s.encodeASCII(r))),a.forEach((function(e){u(e)}))},t.onclose=function(t){e.debug&&o.debug("websocketRequest.onclose",t),e.onEnd()},t.onerror=function(t){e.debug&&o.debug("websocketRequest.onerror",t)},t.onmessage=function(t){e.onChunk(new Uint8Array(t.data))}},cancel:function(){e.debug&&o.debug("websocket.abort"),t.close()}}}(e)}}},35:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.unary=void 0;var n=r(65),o=r(934);t.unary=function(e,t){if(e.responseStream)throw new Error(".unary cannot be used with server-streaming methods. Use .invoke or .client instead.");if(e.requestStream)throw new Error(".unary cannot be used with client-streaming methods. Use .client instead.");var r=null,s=null,i=o.client(e,{host:t.host,transport:t.transport,debug:t.debug});return i.onHeaders((function(e){r=e})),i.onMessage((function(e){s=e})),i.onEnd((function(e,o,i){t.onEnd({status:e,statusMessage:o,headers:r||new n.Metadata,message:s,trailers:i})})),i.start(t.metadata),i.send(t.request),i.finishSend(),{close:function(){i.close()}}}},882:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.frameRequest=void 0,t.frameRequest=function(e){var t=e.serializeBinary(),r=new ArrayBuffer(t.byteLength+5);return new DataView(r,1,4).setUint32(0,t.length,!1),new Uint8Array(r,5).set(t),new Uint8Array(r)}}},t={},function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(607);var e,t}));

/***/ }),

/***/ 8045:
/***/ ((module) => {

"use strict";

module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}


/***/ }),

/***/ 8839:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};


/***/ }),

/***/ 8561:
/***/ ((module) => {

"use strict";

module.exports = codegen;

/**
 * Begins generating a function.
 * @memberof util
 * @param {string[]} functionParams Function parameter names
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 */
function codegen(functionParams, functionName) {

    /* istanbul ignore if */
    if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = undefined;
    }

    var body = [];

    /**
     * Appends code to the function's body or finishes generation.
     * @typedef Codegen
     * @type {function}
     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
     * @param {...*} [formatParams] Format parameters
     * @returns {Codegen|Function} Itself or the generated function if finished
     * @throws {Error} If format parameter counts do not match
     */

    function Codegen(formatStringOrScope) {
        // note that explicit array handling below makes this ~50% faster

        // finish the function
        if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose)
                console.log("codegen: " + source); // eslint-disable-line no-console
            source = "return " + source;
            if (formatStringOrScope) {
                var scopeKeys   = Object.keys(formatStringOrScope),
                    scopeParams = new Array(scopeKeys.length + 1),
                    scopeValues = new Array(scopeKeys.length),
                    scopeOffset = 0;
                while (scopeOffset < scopeKeys.length) {
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                }
                scopeParams[scopeOffset] = source;
                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }
            return Function(source)(); // eslint-disable-line no-new-func
        }

        // otherwise append to body
        var formatParams = new Array(arguments.length - 1),
            formatOffset = 0;
        while (formatOffset < formatParams.length)
            formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];
            switch ($1) {
                case "d": case "f": return String(Number(value));
                case "i": return String(Math.floor(value));
                case "j": return JSON.stringify(value);
                case "s": return String(value);
            }
            return "%";
        });
        if (formatOffset !== formatParams.length)
            throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
    }

    function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
    }

    Codegen.toString = toString;
    return Codegen;
}

/**
 * Begins generating a function.
 * @memberof util
 * @function codegen
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 * @variation 2
 */

/**
 * When set to `true`, codegen will log generated code to console. Useful for debugging.
 * @name util.codegen.verbose
 * @type {boolean}
 */
codegen.verbose = false;


/***/ }),

/***/ 4358:
/***/ ((module) => {

"use strict";

module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};


/***/ }),

/***/ 5212:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = fetch;

var asPromise = __webpack_require__(8045),
    inquire   = __webpack_require__(4153);

var fs = inquire("fs");

/**
 * Node-style callback as used by {@link util.fetch}.
 * @typedef FetchCallback
 * @type {function}
 * @param {?Error} error Error, if any, otherwise `null`
 * @param {string} [contents] File contents, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Options as used by {@link util.fetch}.
 * @typedef FetchOptions
 * @type {Object}
 * @property {boolean} [binary=false] Whether expecting a binary response
 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
 */

/**
 * Fetches the contents of a file.
 * @memberof util
 * @param {string} filename File path or url
 * @param {FetchOptions} options Fetch options
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
function fetch(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (!options)
        options = {};

    if (!callback)
        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
    if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
            return err && typeof XMLHttpRequest !== "undefined"
                ? fetch.xhr(filename, options, callback)
                : err
                ? callback(err)
                : callback(null, options.binary ? contents : contents.toString("utf8"));
        });

    // use the XHR version otherwise.
    return fetch.xhr(filename, options, callback);
}

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchOptions} [options] Fetch options
 * @returns {Promise<string|Uint8Array>} Promise
 * @variation 3
 */

/**/
fetch.xhr = function fetch_xhr(filename, options, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

        if (xhr.readyState !== 4)
            return undefined;

        // local cors security errors return status 0 / empty string, too. afaik this cannot be
        // reliably distinguished from an actually empty file for security reasons. feel free
        // to send a pull request if you are aware of a solution.
        if (xhr.status !== 0 && xhr.status !== 200)
            return callback(Error("status " + xhr.status));

        // if binary data is expected, make sure that some sort of array is returned, even if
        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
        if (options.binary) {
            var buffer = xhr.response;
            if (!buffer) {
                buffer = [];
                for (var i = 0; i < xhr.responseText.length; ++i)
                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
            }
            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
    };

    if (options.binary) {
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
        if ("overrideMimeType" in xhr)
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
    }

    xhr.open("GET", filename);
    xhr.send();
};


/***/ }),

/***/ 9410:
/***/ ((module) => {

"use strict";


module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}


/***/ }),

/***/ 4153:
/***/ ((module) => {

"use strict";

module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}


/***/ }),

/***/ 9207:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */
var path = exports;

var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
    return /^(?:\/|\w+:)/.test(path);
};

var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/")
               .replace(/\/{2,}/g, "/");
    var parts    = path.split("/"),
        absolute = isAbsolute(path),
        prefix   = "";
    if (absolute)
        prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length;) {
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
                parts.splice(--i, 2);
            else if (absolute)
                parts.splice(i, 1);
            else
                ++i;
        } else if (parts[i] === ".")
            parts.splice(i, 1);
        else
            ++i;
    }
    return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized)
        includePath = normalize(includePath);
    if (isAbsolute(includePath))
        return includePath;
    if (!alreadyNormalized)
        originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};


/***/ }),

/***/ 9390:
/***/ ((module) => {

"use strict";

module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}


/***/ }),

/***/ 1447:
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};


/***/ }),

/***/ 7018:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else { var i, a; }
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_536__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_536__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_536__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_536__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__nested_webpack_require_536__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_536__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_536__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_536__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_536__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_536__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_536__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_536__(__nested_webpack_require_536__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __nested_webpack_require_2975__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = __nested_webpack_require_2975__(3);
function isBrowserHeaders(arg) {
    return typeof arg === "object" && typeof arg.headersMap === "object" && typeof arg.forEach === "function";
}
var BrowserHeaders = (function () {
    function BrowserHeaders(init, options) {
        if (init === void 0) { init = {}; }
        if (options === void 0) { options = { splitValues: false }; }
        var _this = this;
        this.headersMap = {};
        if (init) {
            if (typeof Headers !== "undefined" && init instanceof Headers) {
                var keys = util_1.getHeaderKeys(init);
                keys.forEach(function (key) {
                    var values = util_1.getHeaderValues(init, key);
                    values.forEach(function (value) {
                        if (options.splitValues) {
                            _this.append(key, util_1.splitHeaderValue(value));
                        }
                        else {
                            _this.append(key, value);
                        }
                    });
                });
            }
            else if (isBrowserHeaders(init)) {
                init.forEach(function (key, values) {
                    _this.append(key, values);
                });
            }
            else if (typeof Map !== "undefined" && init instanceof Map) {
                var asMap = init;
                asMap.forEach(function (value, key) {
                    _this.append(key, value);
                });
            }
            else if (typeof init === "string") {
                this.appendFromString(init);
            }
            else if (typeof init === "object") {
                Object.getOwnPropertyNames(init).forEach(function (key) {
                    var asObject = init;
                    var values = asObject[key];
                    if (Array.isArray(values)) {
                        values.forEach(function (value) {
                            _this.append(key, value);
                        });
                    }
                    else {
                        _this.append(key, values);
                    }
                });
            }
        }
    }
    BrowserHeaders.prototype.appendFromString = function (str) {
        var pairs = str.split("\r\n");
        for (var i = 0; i < pairs.length; i++) {
            var p = pairs[i];
            var index = p.indexOf(":");
            if (index > 0) {
                var key = p.substring(0, index).trim();
                var value = p.substring(index + 1).trim();
                this.append(key, value);
            }
        }
    };
    BrowserHeaders.prototype.delete = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (value === undefined) {
            delete this.headersMap[normalizedKey];
        }
        else {
            var existing = this.headersMap[normalizedKey];
            if (existing) {
                var index = existing.indexOf(value);
                if (index >= 0) {
                    existing.splice(index, 1);
                }
                if (existing.length === 0) {
                    delete this.headersMap[normalizedKey];
                }
            }
        }
    };
    BrowserHeaders.prototype.append = function (key, value) {
        var _this = this;
        var normalizedKey = util_1.normalizeName(key);
        if (!Array.isArray(this.headersMap[normalizedKey])) {
            this.headersMap[normalizedKey] = [];
        }
        if (Array.isArray(value)) {
            value.forEach(function (arrayValue) {
                _this.headersMap[normalizedKey].push(util_1.normalizeValue(arrayValue));
            });
        }
        else {
            this.headersMap[normalizedKey].push(util_1.normalizeValue(value));
        }
    };
    BrowserHeaders.prototype.set = function (key, value) {
        var normalizedKey = util_1.normalizeName(key);
        if (Array.isArray(value)) {
            var normalized_1 = [];
            value.forEach(function (arrayValue) {
                normalized_1.push(util_1.normalizeValue(arrayValue));
            });
            this.headersMap[normalizedKey] = normalized_1;
        }
        else {
            this.headersMap[normalizedKey] = [util_1.normalizeValue(value)];
        }
    };
    BrowserHeaders.prototype.has = function (key, value) {
        var keyArray = this.headersMap[util_1.normalizeName(key)];
        var keyExists = Array.isArray(keyArray);
        if (!keyExists) {
            return false;
        }
        if (value !== undefined) {
            var normalizedValue = util_1.normalizeValue(value);
            return keyArray.indexOf(normalizedValue) >= 0;
        }
        else {
            return true;
        }
    };
    BrowserHeaders.prototype.get = function (key) {
        var values = this.headersMap[util_1.normalizeName(key)];
        if (values !== undefined) {
            return values.concat();
        }
        return [];
    };
    BrowserHeaders.prototype.forEach = function (callback) {
        var _this = this;
        Object.getOwnPropertyNames(this.headersMap)
            .forEach(function (key) {
            callback(key, _this.headersMap[key]);
        }, this);
    };
    BrowserHeaders.prototype.toHeaders = function () {
        if (typeof Headers !== "undefined") {
            var headers_1 = new Headers();
            this.forEach(function (key, values) {
                values.forEach(function (value) {
                    headers_1.append(key, value);
                });
            });
            return headers_1;
        }
        else {
            throw new Error("Headers class is not defined");
        }
    };
    return BrowserHeaders;
}());
exports.BrowserHeaders = BrowserHeaders;


/***/ }),
/* 1 */
/***/ (function(module, exports, __nested_webpack_require_8924__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var BrowserHeaders_1 = __nested_webpack_require_8924__(0);
exports.BrowserHeaders = BrowserHeaders_1.BrowserHeaders;


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function iterateHeaders(headers, callback) {
    var iterator = headers[Symbol.iterator]();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value[0]);
        entry = iterator.next();
    }
}
exports.iterateHeaders = iterateHeaders;
function iterateHeadersKeys(headers, callback) {
    var iterator = headers.keys();
    var entry = iterator.next();
    while (!entry.done) {
        callback(entry.value);
        entry = iterator.next();
    }
}
exports.iterateHeadersKeys = iterateHeadersKeys;


/***/ }),
/* 3 */
/***/ (function(module, exports, __nested_webpack_require_9870__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var iterateHeaders_1 = __nested_webpack_require_9870__(2);
function normalizeName(name) {
    if (typeof name !== "string") {
        name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
        throw new TypeError("Invalid character in header field name");
    }
    return name.toLowerCase();
}
exports.normalizeName = normalizeName;
function normalizeValue(value) {
    if (typeof value !== "string") {
        value = String(value);
    }
    return value;
}
exports.normalizeValue = normalizeValue;
function getHeaderValues(headersAsNative, key) {
    var headers = toWindowHeaders(headersAsNative);
    if (headers instanceof Headers && headers.getAll) {
        return headers.getAll(key);
    }
    var getValue = headers.get(key);
    if (getValue && typeof getValue === "string") {
        return [getValue];
    }
    return getValue;
}
exports.getHeaderValues = getHeaderValues;
function toWindowHeaders(headersAsNative) {
    return headersAsNative;
}
function getHeaderKeys(headersAsNative) {
    var headers = toWindowHeaders(headersAsNative);
    var asMap = {};
    var keys = [];
    if (headers.keys) {
        iterateHeaders_1.iterateHeadersKeys(headers, function (key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else if (headers.forEach) {
        headers.forEach(function (_, key) {
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    else {
        iterateHeaders_1.iterateHeaders(headers, function (entry) {
            var key = entry[0];
            if (!asMap[key]) {
                asMap[key] = true;
                keys.push(key);
            }
        });
    }
    return keys;
}
exports.getHeaderKeys = getHeaderKeys;
function splitHeaderValue(str) {
    var values = [];
    var commaSpaceValues = str.split(", ");
    commaSpaceValues.forEach(function (commaSpaceValue) {
        commaSpaceValue.split(",").forEach(function (commaValue) {
            values.push(commaValue);
        });
    });
    return values;
}
exports.splitHeaderValue = splitHeaderValue;


/***/ })
/******/ ]);
});

/***/ }),

/***/ 8570:
/***/ ((module) => {

module.exports = Long;

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = null;

try {
  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11
  ])), {}).exports;
} catch (e) {
  // no wasm support :(
}

/**
 * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
 *  See the from* functions below for more convenient ways of constructing Longs.
 * @exports Long
 * @class A Long class for representing a 64 bit two's-complement integer value.
 * @param {number} low The low (signed) 32 bits of the long
 * @param {number} high The high (signed) 32 bits of the long
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @constructor
 */
function Long(low, high, unsigned) {

    /**
     * The low 32 bits as a signed value.
     * @type {number}
     */
    this.low = low | 0;

    /**
     * The high 32 bits as a signed value.
     * @type {number}
     */
    this.high = high | 0;

    /**
     * Whether unsigned or not.
     * @type {boolean}
     */
    this.unsigned = !!unsigned;
}

// The internal representation of a long is the two given signed, 32-bit values.
// We use 32-bit pieces because these are the size of integers on which
// Javascript performs bit-operations.  For operations like addition and
// multiplication, we split each number into 16 bit pieces, which can easily be
// multiplied within Javascript's floating-point representation without overflow
// or change in sign.
//
// In the algorithms below, we frequently reduce the negative case to the
// positive case by negating the input(s) and then post-processing the result.
// Note that we must ALWAYS check specially whether those values are MIN_VALUE
// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
// a positive number, it overflows back into a negative).  Not handling this
// case would often result in infinite recursion.
//
// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
// methods on which they depend.

/**
 * An indicator used to reliably determine if an object is a Long or not.
 * @type {boolean}
 * @const
 * @private
 */
Long.prototype.__isLong__;

Object.defineProperty(Long.prototype, "__isLong__", { value: true });

/**
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 * @inner
 */
function isLong(obj) {
    return (obj && obj["__isLong__"]) === true;
}

/**
 * Tests if the specified object is a Long.
 * @function
 * @param {*} obj Object
 * @returns {boolean}
 */
Long.isLong = isLong;

/**
 * A cache of the Long representations of small integer values.
 * @type {!Object}
 * @inner
 */
var INT_CACHE = {};

/**
 * A cache of the Long representations of small unsigned integer values.
 * @type {!Object}
 * @inner
 */
var UINT_CACHE = {};

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromInt(value, unsigned) {
    var obj, cachedObj, cache;
    if (unsigned) {
        value >>>= 0;
        if (cache = (0 <= value && value < 256)) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
        if (cache)
            UINT_CACHE[value] = obj;
        return obj;
    } else {
        value |= 0;
        if (cache = (-128 <= value && value < 128)) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
                return cachedObj;
        }
        obj = fromBits(value, value < 0 ? -1 : 0, false);
        if (cache)
            INT_CACHE[value] = obj;
        return obj;
    }
}

/**
 * Returns a Long representing the given 32 bit integer value.
 * @function
 * @param {number} value The 32 bit integer in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromInt = fromInt;

/**
 * @param {number} value
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromNumber(value, unsigned) {
    if (isNaN(value))
        return unsigned ? UZERO : ZERO;
    if (unsigned) {
        if (value < 0)
            return UZERO;
        if (value >= TWO_PWR_64_DBL)
            return MAX_UNSIGNED_VALUE;
    } else {
        if (value <= -TWO_PWR_63_DBL)
            return MIN_VALUE;
        if (value + 1 >= TWO_PWR_63_DBL)
            return MAX_VALUE;
    }
    if (value < 0)
        return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
}

/**
 * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
 * @function
 * @param {number} value The number in question
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromNumber = fromNumber;

/**
 * @param {number} lowBits
 * @param {number} highBits
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
}

/**
 * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
 *  assumed to use 32 bits.
 * @function
 * @param {number} lowBits The low 32 bits
 * @param {number} highBits The high 32 bits
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long} The corresponding Long value
 */
Long.fromBits = fromBits;

/**
 * @function
 * @param {number} base
 * @param {number} exponent
 * @returns {number}
 * @inner
 */
var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)

/**
 * @param {string} str
 * @param {(boolean|number)=} unsigned
 * @param {number=} radix
 * @returns {!Long}
 * @inner
 */
function fromString(str, unsigned, radix) {
    if (str.length === 0)
        throw Error('empty string');
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
        return ZERO;
    if (typeof unsigned === 'number') {
        // For goog.math.long compatibility
        radix = unsigned,
        unsigned = false;
    } else {
        unsigned = !! unsigned;
    }
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');

    var p;
    if ((p = str.indexOf('-')) > 0)
        throw Error('interior hyphen');
    else if (p === 0) {
        return fromString(str.substring(1), unsigned, radix).neg();
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 8));

    var result = ZERO;
    for (var i = 0; i < str.length; i += 8) {
        var size = Math.min(8, str.length - i),
            value = parseInt(str.substring(i, i + size), radix);
        if (size < 8) {
            var power = fromNumber(pow_dbl(radix, size));
            result = result.mul(power).add(fromNumber(value));
        } else {
            result = result.mul(radixToPower);
            result = result.add(fromNumber(value));
        }
    }
    result.unsigned = unsigned;
    return result;
}

/**
 * Returns a Long representation of the given string, written using the specified radix.
 * @function
 * @param {string} str The textual representation of the Long
 * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
 * @param {number=} radix The radix in which the text is written (2-36), defaults to 10
 * @returns {!Long} The corresponding Long value
 */
Long.fromString = fromString;

/**
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val
 * @param {boolean=} unsigned
 * @returns {!Long}
 * @inner
 */
function fromValue(val, unsigned) {
    if (typeof val === 'number')
        return fromNumber(val, unsigned);
    if (typeof val === 'string')
        return fromString(val, unsigned);
    // Throws for non-objects, converts non-instanceof Long:
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
}

/**
 * Converts the specified value to a Long using the appropriate from* function for its type.
 * @function
 * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {!Long}
 */
Long.fromValue = fromValue;

// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
// no runtime penalty for these.

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_16_DBL = 1 << 16;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_24_DBL = 1 << 24;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;

/**
 * @type {number}
 * @const
 * @inner
 */
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;

/**
 * @type {!Long}
 * @const
 * @inner
 */
var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);

/**
 * @type {!Long}
 * @inner
 */
var ZERO = fromInt(0);

/**
 * Signed zero.
 * @type {!Long}
 */
Long.ZERO = ZERO;

/**
 * @type {!Long}
 * @inner
 */
var UZERO = fromInt(0, true);

/**
 * Unsigned zero.
 * @type {!Long}
 */
Long.UZERO = UZERO;

/**
 * @type {!Long}
 * @inner
 */
var ONE = fromInt(1);

/**
 * Signed one.
 * @type {!Long}
 */
Long.ONE = ONE;

/**
 * @type {!Long}
 * @inner
 */
var UONE = fromInt(1, true);

/**
 * Unsigned one.
 * @type {!Long}
 */
Long.UONE = UONE;

/**
 * @type {!Long}
 * @inner
 */
var NEG_ONE = fromInt(-1);

/**
 * Signed negative one.
 * @type {!Long}
 */
Long.NEG_ONE = NEG_ONE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);

/**
 * Maximum signed value.
 * @type {!Long}
 */
Long.MAX_VALUE = MAX_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);

/**
 * Maximum unsigned value.
 * @type {!Long}
 */
Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;

/**
 * @type {!Long}
 * @inner
 */
var MIN_VALUE = fromBits(0, 0x80000000|0, false);

/**
 * Minimum signed value.
 * @type {!Long}
 */
Long.MIN_VALUE = MIN_VALUE;

/**
 * @alias Long.prototype
 * @inner
 */
var LongPrototype = Long.prototype;

/**
 * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
 * @returns {number}
 */
LongPrototype.toInt = function toInt() {
    return this.unsigned ? this.low >>> 0 : this.low;
};

/**
 * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
 * @returns {number}
 */
LongPrototype.toNumber = function toNumber() {
    if (this.unsigned)
        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
};

/**
 * Converts the Long to a string written in the specified radix.
 * @param {number=} radix Radix (2-36), defaults to 10
 * @returns {string}
 * @override
 * @throws {RangeError} If `radix` is out of range
 */
LongPrototype.toString = function toString(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix)
        throw RangeError('radix');
    if (this.isZero())
        return '0';
    if (this.isNegative()) { // Unsigned Longs are never negative
        if (this.eq(MIN_VALUE)) {
            // We need to change the Long value before it can be negated, so we remove
            // the bottom-most digit in this base and then recurse to do the rest.
            var radixLong = fromNumber(radix),
                div = this.div(radixLong),
                rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
        } else
            return '-' + this.neg().toString(radix);
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
    while (true) {
        var remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
        rem = remDiv;
        if (rem.isZero())
            return digits + result;
        else {
            while (digits.length < 6)
                digits = '0' + digits;
            result = '' + digits + result;
        }
    }
};

/**
 * Gets the high 32 bits as a signed integer.
 * @returns {number} Signed high bits
 */
LongPrototype.getHighBits = function getHighBits() {
    return this.high;
};

/**
 * Gets the high 32 bits as an unsigned integer.
 * @returns {number} Unsigned high bits
 */
LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
    return this.high >>> 0;
};

/**
 * Gets the low 32 bits as a signed integer.
 * @returns {number} Signed low bits
 */
LongPrototype.getLowBits = function getLowBits() {
    return this.low;
};

/**
 * Gets the low 32 bits as an unsigned integer.
 * @returns {number} Unsigned low bits
 */
LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
    return this.low >>> 0;
};

/**
 * Gets the number of bits needed to represent the absolute value of this Long.
 * @returns {number}
 */
LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
    if (this.isNegative()) // Unsigned Longs are never negative
        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
    for (var bit = 31; bit > 0; bit--)
        if ((val & (1 << bit)) != 0)
            break;
    return this.high != 0 ? bit + 33 : bit + 1;
};

/**
 * Tests if this Long's value equals zero.
 * @returns {boolean}
 */
LongPrototype.isZero = function isZero() {
    return this.high === 0 && this.low === 0;
};

/**
 * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.
 * @returns {boolean}
 */
LongPrototype.eqz = LongPrototype.isZero;

/**
 * Tests if this Long's value is negative.
 * @returns {boolean}
 */
LongPrototype.isNegative = function isNegative() {
    return !this.unsigned && this.high < 0;
};

/**
 * Tests if this Long's value is positive.
 * @returns {boolean}
 */
LongPrototype.isPositive = function isPositive() {
    return this.unsigned || this.high >= 0;
};

/**
 * Tests if this Long's value is odd.
 * @returns {boolean}
 */
LongPrototype.isOdd = function isOdd() {
    return (this.low & 1) === 1;
};

/**
 * Tests if this Long's value is even.
 * @returns {boolean}
 */
LongPrototype.isEven = function isEven() {
    return (this.low & 1) === 0;
};

/**
 * Tests if this Long's value equals the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.equals = function equals(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)
        return false;
    return this.high === other.high && this.low === other.low;
};

/**
 * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.eq = LongPrototype.equals;

/**
 * Tests if this Long's value differs from the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.notEquals = function notEquals(other) {
    return !this.eq(/* validates */ other);
};

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.neq = LongPrototype.notEquals;

/**
 * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ne = LongPrototype.notEquals;

/**
 * Tests if this Long's value is less than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThan = function lessThan(other) {
    return this.comp(/* validates */ other) < 0;
};

/**
 * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lt = LongPrototype.lessThan;

/**
 * Tests if this Long's value is less than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
    return this.comp(/* validates */ other) <= 0;
};

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.lte = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.le = LongPrototype.lessThanOrEqual;

/**
 * Tests if this Long's value is greater than the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThan = function greaterThan(other) {
    return this.comp(/* validates */ other) > 0;
};

/**
 * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gt = LongPrototype.greaterThan;

/**
 * Tests if this Long's value is greater than or equal the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
    return this.comp(/* validates */ other) >= 0;
};

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.gte = LongPrototype.greaterThanOrEqual;

/**
 * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {boolean}
 */
LongPrototype.ge = LongPrototype.greaterThanOrEqual;

/**
 * Compares this Long's value with the specified's.
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.compare = function compare(other) {
    if (!isLong(other))
        other = fromValue(other);
    if (this.eq(other))
        return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg)
        return -1;
    if (!thisNeg && otherNeg)
        return 1;
    // At this point the sign bits are the same
    if (!this.unsigned)
        return this.sub(other).isNegative() ? -1 : 1;
    // Both are positive if at least one is unsigned
    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;
};

/**
 * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.
 * @function
 * @param {!Long|number|string} other Other value
 * @returns {number} 0 if they are the same, 1 if the this is greater and -1
 *  if the given one is greater
 */
LongPrototype.comp = LongPrototype.compare;

/**
 * Negates this Long's value.
 * @returns {!Long} Negated Long
 */
LongPrototype.negate = function negate() {
    if (!this.unsigned && this.eq(MIN_VALUE))
        return MIN_VALUE;
    return this.not().add(ONE);
};

/**
 * Negates this Long's value. This is an alias of {@link Long#negate}.
 * @function
 * @returns {!Long} Negated Long
 */
LongPrototype.neg = LongPrototype.negate;

/**
 * Returns the sum of this and the specified Long.
 * @param {!Long|number|string} addend Addend
 * @returns {!Long} Sum
 */
LongPrototype.add = function add(addend) {
    if (!isLong(addend))
        addend = fromValue(addend);

    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the difference of this and the specified Long.
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.subtract = function subtract(subtrahend) {
    if (!isLong(subtrahend))
        subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
};

/**
 * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.
 * @function
 * @param {!Long|number|string} subtrahend Subtrahend
 * @returns {!Long} Difference
 */
LongPrototype.sub = LongPrototype.subtract;

/**
 * Returns the product of this and the specified Long.
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.multiply = function multiply(multiplier) {
    if (this.isZero())
        return ZERO;
    if (!isLong(multiplier))
        multiplier = fromValue(multiplier);

    // use wasm support if present
    if (wasm) {
        var low = wasm.mul(this.low,
                           this.high,
                           multiplier.low,
                           multiplier.high);
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (multiplier.isZero())
        return ZERO;
    if (this.eq(MIN_VALUE))
        return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE))
        return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
        if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
        else
            return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative())
        return this.mul(multiplier.neg()).neg();

    // If both longs are small, use float multiplication
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;

    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
};

/**
 * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.
 * @function
 * @param {!Long|number|string} multiplier Multiplier
 * @returns {!Long} Product
 */
LongPrototype.mul = LongPrototype.multiply;

/**
 * Returns this Long divided by the specified. The result is signed if this Long is signed or
 *  unsigned if this Long is unsigned.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.divide = function divide(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);
    if (divisor.isZero())
        throw Error('division by zero');

    // use wasm support if present
    if (wasm) {
        // guard against signed division overflow: the largest
        // negative number / -1 would be 1 larger than the largest
        // positive number, due to two's complement.
        if (!this.unsigned &&
            this.high === -0x80000000 &&
            divisor.low === -1 && divisor.high === -1) {
            // be consistent with non-wasm code path
            return this;
        }
        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    if (this.isZero())
        return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
    if (!this.unsigned) {
        // This section is only relevant for signed longs and is derived from the
        // closure library as a whole.
        if (this.eq(MIN_VALUE)) {
            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
            else if (divisor.eq(MIN_VALUE))
                return ONE;
            else {
                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                    return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                    rem = this.sub(divisor.mul(approx));
                    res = approx.add(rem.div(divisor));
                    return res;
                }
            }
        } else if (divisor.eq(MIN_VALUE))
            return this.unsigned ? UZERO : ZERO;
        if (this.isNegative()) {
            if (divisor.isNegative())
                return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
        } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
        res = ZERO;
    } else {
        // The algorithm below has not been made for unsigned longs. It's therefore
        // required to take special care of the MSB prior to running it.
        if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
        if (divisor.gt(this))
            return UZERO;
        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
            return UONE;
        res = UZERO;
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    rem = this;
    while (rem.gte(divisor)) {
        // Approximate the result of division. This may be a little greater or
        // smaller than the actual value.
        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));

        // We will tweak the approximate result by changing it in the 48-th digit or
        // the smallest non-fractional digit, whichever is larger.
        var log2 = Math.ceil(Math.log(approx) / Math.LN2),
            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),

        // Decrease the approximation until it is smaller than the remainder.  Note
        // that if it is too large, the product overflows and is negative.
            approxRes = fromNumber(approx),
            approxRem = approxRes.mul(divisor);
        while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
        }

        // We know the answer can't be zero... and actually, zero would cause
        // infinite recursion since we would make no progress.
        if (approxRes.isZero())
            approxRes = ONE;

        res = res.add(approxRes);
        rem = rem.sub(approxRem);
    }
    return res;
};

/**
 * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Quotient
 */
LongPrototype.div = LongPrototype.divide;

/**
 * Returns this Long modulo the specified.
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.modulo = function modulo(divisor) {
    if (!isLong(divisor))
        divisor = fromValue(divisor);

    // use wasm support if present
    if (wasm) {
        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(
            this.low,
            this.high,
            divisor.low,
            divisor.high
        );
        return fromBits(low, wasm.get_high(), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
};

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.mod = LongPrototype.modulo;

/**
 * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.
 * @function
 * @param {!Long|number|string} divisor Divisor
 * @returns {!Long} Remainder
 */
LongPrototype.rem = LongPrototype.modulo;

/**
 * Returns the bitwise NOT of this Long.
 * @returns {!Long}
 */
LongPrototype.not = function not() {
    return fromBits(~this.low, ~this.high, this.unsigned);
};

/**
 * Returns the bitwise AND of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.and = function and(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
};

/**
 * Returns the bitwise OR of this Long and the specified.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.or = function or(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
};

/**
 * Returns the bitwise XOR of this Long and the given one.
 * @param {!Long|number|string} other Other Long
 * @returns {!Long}
 */
LongPrototype.xor = function xor(other) {
    if (!isLong(other))
        other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftLeft = function shiftLeft(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
    else
        return fromBits(0, this.low << (numBits - 32), this.unsigned);
};

/**
 * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shl = LongPrototype.shiftLeft;

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRight = function shiftRight(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    if ((numBits &= 63) === 0)
        return this;
    else if (numBits < 32)
        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
    else
        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
};

/**
 * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr = LongPrototype.shiftRight;

/**
 * Returns this Long with bits logically shifted to the right by the given amount.
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
    if (isLong(numBits))
        numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0)
        return this;
    else {
        var high = this.high;
        if (numBits < 32) {
            var low = this.low;
            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
        } else if (numBits === 32)
            return fromBits(high, 0, this.unsigned);
        else
            return fromBits(high >>> (numBits - 32), 0, this.unsigned);
    }
};

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shru = LongPrototype.shiftRightUnsigned;

/**
 * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.
 * @function
 * @param {number|!Long} numBits Number of bits
 * @returns {!Long} Shifted Long
 */
LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

/**
 * Converts this Long to signed.
 * @returns {!Long} Signed long
 */
LongPrototype.toSigned = function toSigned() {
    if (!this.unsigned)
        return this;
    return fromBits(this.low, this.high, false);
};

/**
 * Converts this Long to unsigned.
 * @returns {!Long} Unsigned long
 */
LongPrototype.toUnsigned = function toUnsigned() {
    if (this.unsigned)
        return this;
    return fromBits(this.low, this.high, true);
};

/**
 * Converts this Long to its byte representation.
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {!Array.<number>} Byte representation
 */
LongPrototype.toBytes = function toBytes(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
};

/**
 * Converts this Long to its little endian byte representation.
 * @returns {!Array.<number>} Little endian byte representation
 */
LongPrototype.toBytesLE = function toBytesLE() {
    var hi = this.high,
        lo = this.low;
    return [
        lo        & 0xff,
        lo >>>  8 & 0xff,
        lo >>> 16 & 0xff,
        lo >>> 24       ,
        hi        & 0xff,
        hi >>>  8 & 0xff,
        hi >>> 16 & 0xff,
        hi >>> 24
    ];
};

/**
 * Converts this Long to its big endian byte representation.
 * @returns {!Array.<number>} Big endian byte representation
 */
LongPrototype.toBytesBE = function toBytesBE() {
    var hi = this.high,
        lo = this.low;
    return [
        hi >>> 24       ,
        hi >>> 16 & 0xff,
        hi >>>  8 & 0xff,
        hi        & 0xff,
        lo >>> 24       ,
        lo >>> 16 & 0xff,
        lo >>>  8 & 0xff,
        lo        & 0xff
    ];
};

/**
 * Creates a Long from its byte representation.
 * @param {!Array.<number>} bytes Byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @param {boolean=} le Whether little or big endian, defaults to big endian
 * @returns {Long} The corresponding Long value
 */
Long.fromBytes = function fromBytes(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
};

/**
 * Creates a Long from its little endian byte representation.
 * @param {!Array.<number>} bytes Little endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {
    return new Long(
        bytes[0]       |
        bytes[1] <<  8 |
        bytes[2] << 16 |
        bytes[3] << 24,
        bytes[4]       |
        bytes[5] <<  8 |
        bytes[6] << 16 |
        bytes[7] << 24,
        unsigned
    );
};

/**
 * Creates a Long from its big endian byte representation.
 * @param {!Array.<number>} bytes Big endian byte representation
 * @param {boolean=} unsigned Whether unsigned or not, defaults to signed
 * @returns {Long} The corresponding Long value
 */
Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {
    return new Long(
        bytes[4] << 24 |
        bytes[5] << 16 |
        bytes[6] <<  8 |
        bytes[7],
        bytes[0] << 24 |
        bytes[1] << 16 |
        bytes[2] <<  8 |
        bytes[3],
        unsigned
    );
};


/***/ }),

/***/ 2549:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// full library entry point.


module.exports = __webpack_require__(9100);


/***/ }),

/***/ 6946:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// minimal library entry point.


module.exports = __webpack_require__(4394);


/***/ }),

/***/ 5095:
/***/ ((module) => {

"use strict";

module.exports = common;

var commonRe = /\/|\./;

/**
 * Provides common type definitions.
 * Can also be used to provide additional google types or your own custom types.
 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
 * @returns {undefined}
 * @property {INamespace} google/protobuf/any.proto Any
 * @property {INamespace} google/protobuf/duration.proto Duration
 * @property {INamespace} google/protobuf/empty.proto Empty
 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
 * @example
 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
 * protobuf.common("descriptor", descriptorJson);
 *
 * // manually provides a custom definition (uses my.foo namespace)
 * protobuf.common("my/foo/bar.proto", myFooBarJson);
 */
function common(name, json) {
    if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
    }
    common[name] = json;
}

// Not provided because of limited use (feel free to discuss or to provide yourself):
//
// google/protobuf/descriptor.proto
// google/protobuf/source_context.proto
// google/protobuf/type.proto
//
// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
// the repository or package within the google/protobuf directory.

common("any", {

    /**
     * Properties of a google.protobuf.Any message.
     * @interface IAny
     * @type {Object}
     * @property {string} [typeUrl]
     * @property {Uint8Array} [bytes]
     * @memberof common
     */
    Any: {
        fields: {
            type_url: {
                type: "string",
                id: 1
            },
            value: {
                type: "bytes",
                id: 2
            }
        }
    }
});

var timeType;

common("duration", {

    /**
     * Properties of a google.protobuf.Duration message.
     * @interface IDuration
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Duration: timeType = {
        fields: {
            seconds: {
                type: "int64",
                id: 1
            },
            nanos: {
                type: "int32",
                id: 2
            }
        }
    }
});

common("timestamp", {

    /**
     * Properties of a google.protobuf.Timestamp message.
     * @interface ITimestamp
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Timestamp: timeType
});

common("empty", {

    /**
     * Properties of a google.protobuf.Empty message.
     * @interface IEmpty
     * @memberof common
     */
    Empty: {
        fields: {}
    }
});

common("struct", {

    /**
     * Properties of a google.protobuf.Struct message.
     * @interface IStruct
     * @type {Object}
     * @property {Object.<string,IValue>} [fields]
     * @memberof common
     */
    Struct: {
        fields: {
            fields: {
                keyType: "string",
                type: "Value",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Value message.
     * @interface IValue
     * @type {Object}
     * @property {string} [kind]
     * @property {0} [nullValue]
     * @property {number} [numberValue]
     * @property {string} [stringValue]
     * @property {boolean} [boolValue]
     * @property {IStruct} [structValue]
     * @property {IListValue} [listValue]
     * @memberof common
     */
    Value: {
        oneofs: {
            kind: {
                oneof: [
                    "nullValue",
                    "numberValue",
                    "stringValue",
                    "boolValue",
                    "structValue",
                    "listValue"
                ]
            }
        },
        fields: {
            nullValue: {
                type: "NullValue",
                id: 1
            },
            numberValue: {
                type: "double",
                id: 2
            },
            stringValue: {
                type: "string",
                id: 3
            },
            boolValue: {
                type: "bool",
                id: 4
            },
            structValue: {
                type: "Struct",
                id: 5
            },
            listValue: {
                type: "ListValue",
                id: 6
            }
        }
    },

    NullValue: {
        values: {
            NULL_VALUE: 0
        }
    },

    /**
     * Properties of a google.protobuf.ListValue message.
     * @interface IListValue
     * @type {Object}
     * @property {Array.<IValue>} [values]
     * @memberof common
     */
    ListValue: {
        fields: {
            values: {
                rule: "repeated",
                type: "Value",
                id: 1
            }
        }
    }
});

common("wrappers", {

    /**
     * Properties of a google.protobuf.DoubleValue message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    DoubleValue: {
        fields: {
            value: {
                type: "double",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.FloatValue message.
     * @interface IFloatValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FloatValue: {
        fields: {
            value: {
                type: "float",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int64Value message.
     * @interface IInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    Int64Value: {
        fields: {
            value: {
                type: "int64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt64Value message.
     * @interface IUInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    UInt64Value: {
        fields: {
            value: {
                type: "uint64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int32Value message.
     * @interface IInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    Int32Value: {
        fields: {
            value: {
                type: "int32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt32Value message.
     * @interface IUInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    UInt32Value: {
        fields: {
            value: {
                type: "uint32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BoolValue message.
     * @interface IBoolValue
     * @type {Object}
     * @property {boolean} [value]
     * @memberof common
     */
    BoolValue: {
        fields: {
            value: {
                type: "bool",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.StringValue message.
     * @interface IStringValue
     * @type {Object}
     * @property {string} [value]
     * @memberof common
     */
    StringValue: {
        fields: {
            value: {
                type: "string",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BytesValue message.
     * @interface IBytesValue
     * @type {Object}
     * @property {Uint8Array} [value]
     * @memberof common
     */
    BytesValue: {
        fields: {
            value: {
                type: "bytes",
                id: 1
            }
        }
    }
});

common("field_mask", {

    /**
     * Properties of a google.protobuf.FieldMask message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FieldMask: {
        fields: {
            paths: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    }
});

/**
 * Gets the root definition of the specified common proto file.
 *
 * Bundled definitions are:
 * - google/protobuf/any.proto
 * - google/protobuf/duration.proto
 * - google/protobuf/empty.proto
 * - google/protobuf/field_mask.proto
 * - google/protobuf/struct.proto
 * - google/protobuf/timestamp.proto
 * - google/protobuf/wrappers.proto
 *
 * @param {string} file Proto file name
 * @returns {INamespace|null} Root definition or `null` if not defined
 */
common.get = function get(file) {
    return common[file] || null;
};


/***/ }),

/***/ 744:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/**
 * Runtime message from/to plain object converters.
 * @namespace
 */
var converter = exports;

var Enum = __webpack_require__(5643),
    util = __webpack_require__(3262);

/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(d%s){", prop);
            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                if (field.repeated && values[keys[i]] === field.typeDefault) gen
                ("default:");
                gen
                ("case%j:", keys[i])
                ("case %i:", values[keys[i]])
                    ("m%s=%j", prop, values[keys[i]])
                    ("break");
            } gen
            ("}");
        } else gen
            ("if(typeof d%s!==\"object\")", prop)
                ("throw TypeError(%j)", field.fullName + ": object expected")
            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32": gen
                ("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32": gen
                ("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(util.Long)")
                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
                ("else if(typeof d%s===\"string\")", prop)
                    ("m%s=parseInt(d%s,10)", prop, prop)
                ("else if(typeof d%s===\"number\")", prop)
                    ("m%s=d%s", prop, prop)
                ("else if(typeof d%s===\"object\")", prop)
                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes": gen
                ("if(typeof d%s===\"string\")", prop)
                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
                ("else if(d%s.length)", prop)
                    ("m%s=d%s", prop, prop);
                break;
            case "string": gen
                ("m%s=String(d%s)", prop, prop);
                break;
            case "bool": gen
                ("m%s=Boolean(d%s)", prop, prop);
                break;
            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray;
    var gen = util.codegen(["d"], mtype.name + "$fromObject")
    ("if(d instanceof this.ctor)")
        ("return d");
    if (!fields.length) return gen
    ("return new this.ctor");
    gen
    ("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
        var field  = fields[i].resolve(),
            prop   = util.safeProp(field.name);

        // Map fields
        if (field.map) { gen
    ("if(d%s){", prop)
        ("if(typeof d%s!==\"object\")", prop)
            ("throw TypeError(%j)", field.fullName + ": object expected")
        ("m%s={}", prop)
        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
        ("}")
    ("}");

        // Repeated fields
        } else if (field.repeated) { gen
    ("if(d%s){", prop)
        ("if(!Array.isArray(d%s))", prop)
            ("throw TypeError(%j)", field.fullName + ": array expected")
        ("m%s=[]", prop)
        ("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
        ("}")
    ("}");

        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
    ("if(d%s!=null){", prop); // !== undefined && !== null
        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen
    ("}");
        }
    } return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen
            ("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else gen
            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
            ("if(typeof m%s===\"number\")", prop)
                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
            ("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
                break;
            case "bytes": gen
            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default: gen
            ("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length)
        return util.codegen()("return {}");
    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
    ("if(!o)")
        ("o={}")
    ("var d={}");

    var repeatedFields = [],
        mapFields = [],
        normalFields = [],
        i = 0;
    for (; i < fields.length; ++i)
        if (!fields[i].partOf)
            ( fields[i].resolve().repeated ? repeatedFields
            : fields[i].map ? mapFields
            : normalFields).push(fields[i]);

    if (repeatedFields.length) { gen
    ("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i) gen
        ("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen
    ("}");
    }

    if (mapFields.length) { gen
    ("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i) gen
        ("d%s={}", util.safeProp(mapFields[i].name));
        gen
    ("}");
    }

    if (normalFields.length) { gen
    ("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop  = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen
        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen
        ("if(util.Long){")
            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
        ("}else")
            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) {
                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
                gen
        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
        ("else{")
            ("d%s=%s", prop, arrayDefault)
            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
        ("}");
            } else gen
        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
        } gen
    ("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
        var field = fields[i],
            index = mtype._fieldsArray.indexOf(field),
            prop  = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) { hasKs2 = true; gen
    ("var ks2");
            } gen
    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
        ("d%s={}", prop)
        ("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
        ("}");
        } else if (field.repeated) { gen
    ("if(m%s&&m%s.length){", prop, prop)
        ("d%s=[]", prop)
        ("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
        ("}");
        } else { gen
    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
        if (field.partOf) gen
        ("if(o.oneofs)")
            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen
    ("}");
    }
    return gen
    ("return d");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};


/***/ }),

/***/ 7728:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = decoder;

var Enum    = __webpack_require__(5643),
    types   = __webpack_require__(361),
    util    = __webpack_require__(3262);

function missing(field) {
    return "missing required '" + field.name + "'";
}

/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
    ("if(!(r instanceof Reader))")
        ("r=Reader.create(r)")
    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k,value" : ""))
    ("while(r.pos<c){")
        ("var t=r.uint32()");
    if (mtype.group) gen
        ("if((t&7)===4)")
            ("break");
    gen
        ("switch(t>>>3){");

    var i = 0;
    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
            ref   = "m" + util.safeProp(field.name); gen
            ("case %i:", field.id);

        // Map fields
        if (field.map) { gen
                ("if(%s===util.emptyObject)", ref)
                    ("%s={}", ref)
                ("var c2 = r.uint32()+r.pos");

            if (types.defaults[field.keyType] !== undefined) gen
                ("k=%j", types.defaults[field.keyType]);
            else gen
                ("k=null");

            if (types.defaults[type] !== undefined) gen
                ("value=%j", types.defaults[type]);
            else gen
                ("value=null");

            gen
                ("while(r.pos<c2){")
                    ("var tag2=r.uint32()")
                    ("switch(tag2>>>3){")
                        ("case 1: k=r.%s(); break", field.keyType)
                        ("case 2:");

            if (types.basic[type] === undefined) gen
                            ("value=types[%i].decode(r,r.uint32())", i); // can't be groups
            else gen
                            ("value=r.%s()", type);

            gen
                            ("break")
                        ("default:")
                            ("r.skipType(tag2&7)")
                            ("break")
                    ("}")
                ("}");

            if (types.long[field.keyType] !== undefined) gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=value", ref);
            else gen
                ("%s[k]=value", ref);

        // Repeated fields
        } else if (field.repeated) { gen

                ("if(!(%s&&%s.length))", ref, ref)
                    ("%s=[]", ref);

            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined) gen
                ("if((t&7)===2){")
                    ("var c2=r.uint32()+r.pos")
                    ("while(r.pos<c2)")
                        ("%s.push(r.%s())", ref, type)
                ("}else");

            // Non-packed
            if (types.basic[type] === undefined) gen(field.resolvedType.group
                    ? "%s.push(types[%i].decode(r))"
                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen
                    ("%s.push(r.%s())", ref, type);

        // Non-repeated
        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
                ? "%s=types[%i].decode(r)"
                : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen
                ("%s=r.%s()", ref, type);
        gen
                ("break");
    // Unknown fields
    } gen
            ("default:")
                ("r.skipType(t&7)")
                ("break")

        ("}")
    ("}");

    // Field presence
    for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen
    ("if(!m.hasOwnProperty(%j))", rfield.name)
        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }

    return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline */
}


/***/ }),

/***/ 1080:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = encoder;

var Enum     = __webpack_require__(5643),
    types    = __webpack_require__(361),
    util     = __webpack_require__(3262);

/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group
        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}

/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
    ("if(!w)")
        ("w=Writer.create()");

    var i, ref;

    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

    for (var i = 0; i < fields.length; ++i) {
        var field    = fields[i].resolve(),
            index    = mtype._fieldsArray.indexOf(field),
            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
            wireType = types.basic[type];
            ref      = "m" + util.safeProp(field.name);

        // Map fields
        if (field.map) {
            gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field.name) // !== undefined && !== null
        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen
            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen
            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen
        ("}")
    ("}");

            // Repeated fields
        } else if (field.repeated) { gen
    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

            // Packed repeated
            if (field.packed && types.packed[type] !== undefined) { gen

        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
        ("for(var i=0;i<%s.length;++i)", ref)
            ("w.%s(%s[i])", type, ref)
        ("w.ldelim()");

            // Non-packed
            } else { gen

        ("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined)
            genTypePartial(gen, field, index, ref + "[i]");
                else gen
            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

            } gen
    ("}");

        // Non-repeated
        } else {
            if (field.optional) gen
    ("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined)
        genTypePartial(gen, field, index, ref);
            else gen
        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

        }
    }

    return gen
    ("return w");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}


/***/ }),

/***/ 5643:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Enum;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(7209);
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

var Namespace = __webpack_require__(8923),
    util = __webpack_require__(3262);

/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this enum
 * @param {Object.<string,string>} [comments] The value comments for this enum
 */
function Enum(name, values, options, comment, comments) {
    ReflectionObject.call(this, name, options);

    if (values && typeof values !== "object")
        throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = Object.create(this.valuesById); // toJSON, marker

    /**
     * Enum comment text.
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = comments || {};

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values)
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
            if (typeof values[keys[i]] === "number") // use forward entries only
                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"  , this.options,
        "values"   , this.values,
        "reserved" , this.reserved && this.reserved.length ? this.reserved : undefined,
        "comment"  , keepComments ? this.comment : undefined,
        "comments" , keepComments ? this.comments : undefined
    ]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (!util.isInteger(id))
        throw TypeError("id must be an integer");

    if (this.values[name] !== undefined)
        throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias))
            throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else
        this.valuesById[this.values[name] = id] = name;

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};


/***/ }),

/***/ 1344:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Field;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(7209);
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum  = __webpack_require__(5643),
    types = __webpack_require__(361),
    util  = __webpack_require__(3262);

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function Field(name, id, type, rule, extend, options, comment) {

    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");

    if (!util.isString(type))
        throw TypeError("type must be a string");

    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");

    if (extend !== undefined && !util.isString(extend))
        throw TypeError("extend must be a string");

    if (rule === "proto3_optional") {
        rule = "optional";
    }
    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null)
            this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "rule"    , this.rule !== "optional" && this.rule || undefined,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved)
        return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
            this.typeDefault = null;
        else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
            this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
            delete this.options.packed;
        if (!Object.keys(this.options).length)
            this.options = undefined;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (Object.freeze)
            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map)
        this.defaultValue = util.emptyObject;
    else if (this.repeated)
        this.defaultValue = util.emptyArray;
    else
        this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;

    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

// Sets up cyclic dependencies (called in index-light)
Field._configure = function configure(Type_) {
    Type = Type_;
};


/***/ }),

/***/ 5325:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var protobuf = module.exports = __webpack_require__(4394);

protobuf.build = "light";

/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */
function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root)
        root = new protobuf.Root();
    return root.load(filename, callback);
}

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */
// function load(filename:string, [root:Root]):Promise<Root>

protobuf.load = load;

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */
function loadSync(filename, root) {
    if (!root)
        root = new protobuf.Root();
    return root.loadSync(filename);
}

protobuf.loadSync = loadSync;

// Serialization
protobuf.encoder          = __webpack_require__(1080);
protobuf.decoder          = __webpack_require__(7728);
protobuf.verifier         = __webpack_require__(420);
protobuf.converter        = __webpack_require__(744);

// Reflection
protobuf.ReflectionObject = __webpack_require__(7209);
protobuf.Namespace        = __webpack_require__(8923);
protobuf.Root             = __webpack_require__(5330);
protobuf.Enum             = __webpack_require__(5643);
protobuf.Type             = __webpack_require__(7882);
protobuf.Field            = __webpack_require__(1344);
protobuf.OneOf            = __webpack_require__(1457);
protobuf.MapField         = __webpack_require__(8252);
protobuf.Service          = __webpack_require__(9687);
protobuf.Method           = __webpack_require__(8811);

// Runtime
protobuf.Message          = __webpack_require__(2551);
protobuf.wrappers         = __webpack_require__(6434);

// Utility
protobuf.types            = __webpack_require__(361);
protobuf.util             = __webpack_require__(3262);

// Set up possibly cyclic reflection dependencies
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);


/***/ }),

/***/ 4394:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = __webpack_require__(3449);
protobuf.BufferWriter = __webpack_require__(818);
protobuf.Reader       = __webpack_require__(6237);
protobuf.BufferReader = __webpack_require__(3158);

// Utility
protobuf.util         = __webpack_require__(3610);
protobuf.rpc          = __webpack_require__(5047);
protobuf.roots        = __webpack_require__(4529);
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.util._configure();
    protobuf.Writer._configure(protobuf.BufferWriter);
    protobuf.Reader._configure(protobuf.BufferReader);
}

// Set up buffer utility according to the environment
configure();


/***/ }),

/***/ 9100:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var protobuf = module.exports = __webpack_require__(5325);

protobuf.build = "full";

// Parser
protobuf.tokenize         = __webpack_require__(527);
protobuf.parse            = __webpack_require__(4863);
protobuf.common           = __webpack_require__(5095);

// Configure parser
protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);


/***/ }),

/***/ 8252:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = MapField;

// extends Field
var Field = __webpack_require__(1344);
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

var types   = __webpack_require__(361),
    util    = __webpack_require__(3262);

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);

    /* istanbul ignore if */
    if (!util.isString(keyType))
        throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};

/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "keyType" , this.keyType,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined)
        throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};


/***/ }),

/***/ 2551:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Message;

var util = __webpack_require__(3610);

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object = object
 */
function Message(properties) {
    // not used internally
    if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            this[keys[i]] = properties[keys[i]];
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

/*eslint-enable valid-jsdoc*/

/***/ }),

/***/ 8811:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Method;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(7209);
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util = __webpack_require__(3262);

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {

    /* istanbul ignore next */
    if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined;
    }

    /* istanbul ignore if */
    if (!(type === undefined || util.isString(type)))
        throw TypeError("type must be a string");

    /* istanbul ignore if */
    if (!util.isString(requestType))
        throw TypeError("requestType must be a string");

    /* istanbul ignore if */
    if (!util.isString(responseType))
        throw TypeError("responseType must be a string");

    ReflectionObject.call(this, name, options);

    /**
     * Method type.
     * @type {string}
     */
    this.type = type || "rpc"; // toJSON

    /**
     * Request type.
     * @type {string}
     */
    this.requestType = requestType; // toJSON, marker

    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */
    this.requestStream = requestStream ? true : undefined; // toJSON

    /**
     * Response type.
     * @type {string}
     */
    this.responseType = responseType; // toJSON

    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */
    this.responseStream = responseStream ? true : undefined; // toJSON

    /**
     * Resolved request type.
     * @type {Type|null}
     */
    this.resolvedRequestType = null;

    /**
     * Resolved response type.
     * @type {Type|null}
     */
    this.resolvedResponseType = null;

    /**
     * Comment for this method
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Options properly parsed into an object
     */
    this.parsedOptions = parsedOptions;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 * @property {string} comment Method comments
 * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
};

/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
        "requestType"    , this.requestType,
        "requestStream"  , this.requestStream,
        "responseType"   , this.responseType,
        "responseStream" , this.responseStream,
        "options"        , this.options,
        "comment"        , keepComments ? this.comment : undefined,
        "parsedOptions"  , this.parsedOptions,
    ]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

    /* istanbul ignore if */
    if (this.resolved)
        return this;

    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);

    return ReflectionObject.prototype.resolve.call(this);
};


/***/ }),

/***/ 8923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(7209);
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Field    = __webpack_require__(1344),
    OneOf    = __webpack_require__(1457),
    util     = __webpack_require__(3262);

var Type,    // cyclic
    Service,
    Enum;

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length))
        return undefined;
    var obj = {};
    for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
    return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] > id)
                return true;
    return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (reserved[i] === name)
                return true;
    return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */
// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject([
        "options" , this.options,
        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
    ]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
                ( nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : nested.id !== undefined
                ? Field.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name]
        || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
    throw Error("no such enum: " + name);
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace || object instanceof OneOf))
        throw TypeError("object must be a valid nested object");

    if (!this.nested)
        this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i)
                    object.add(nested[i]);
                this.remove(prev);
                if (!this.nested)
                    this.nested = {};
                object.setOptions(prev.options, true);

            } else
                throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this)
        throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!Object.keys(this.nested).length)
        this.nested = undefined;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path))
        path = path.split(".");
    else if (!Array.isArray(path))
        throw TypeError("illegal path");
    if (path && path.length && path[0] === "")
        throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace))
                throw Error("path conflicts with non-namespace objects");
        } else
            ptr.add(ptr = new Namespace(part));
    }
    if (json)
        ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while (i < nested.length)
        if (nested[i] instanceof Namespace)
            nested[i++].resolveAll();
        else
            nested[i++].resolve();
    return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [ filterTypes ];

    if (util.isString(path) && path.length) {
        if (path === ".")
            return this.root;
        path = path.split(".");
    } else if (!path.length)
        return this;

    // Start at root if path is absolute
    if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
                return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
            return found;

    // Otherwise try each nested namespace
    } else
        for (var i = 0; i < this.nestedArray.length; ++i)
            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
                return found;

    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked)
        return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [ Type ]);
    if (!found)
        throw Error("no such type: " + path);
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [ Enum ]);
    if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [ Type, Enum ]);
    if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [ Service ]);
    if (!found)
        throw Error("no such Service '" + path + "' in " + this);
    return found;
};

// Sets up cyclic dependencies (called in index-light)
Namespace._configure = function(Type_, Service_, Enum_) {
    Type    = Type_;
    Service = Service_;
    Enum    = Enum_;
};


/***/ }),

/***/ 7209:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";

var util = __webpack_require__(3262);

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (options && !util.isObject(options))
        throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Parsed Options.
     * @type {Array.<Object.<string,*>>|undefined}
     */
    this.parsedOptions = null;

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

Object.defineProperties(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function() {
            var ptr = this;
            while (ptr.parent !== null)
                ptr = ptr.parent;
            return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function() {
            var path = [ this.name ],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent)
        this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root)
        root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root)
        root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;
    if (this.root instanceof Root)
        this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options)
        return this.options[name];
    return undefined;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined)
        (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets a parsed option.
 * @param {string} name parsed Option name
 * @param {*} value Option value
 * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\empty, will add a new option with that value
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {
    if (!this.parsedOptions) {
        this.parsedOptions = [];
    }
    var parsedOptions = this.parsedOptions;
    if (propName) {
        // If setting a sub property of an option then try to merge it
        // with an existing option
        var opt = parsedOptions.find(function (opt) {
            return Object.prototype.hasOwnProperty.call(opt, name);
        });
        if (opt) {
            // If we found an existing option - just merge the property value
            var newValue = opt[name];
            util.setProperty(newValue, propName, value);
        } else {
            // otherwise, create a new option, set it's property and add it to the list
            opt = {};
            opt[name] = util.setProperty({}, propName, value);
            parsedOptions.push(opt);
        }
    } else {
        // Always create a new option when setting the value of the option itself
        var newOpt = {};
        newOpt[name] = value;
        parsedOptions.push(newOpt);
    }
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
            this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName  = this.fullName;
    if (fullName.length)
        return className + " " + fullName;
    return className;
};

// Sets up cyclic dependencies (called in index-light)
ReflectionObject._configure = function(Root_) {
    Root = Root_;
};


/***/ }),

/***/ 1457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = __webpack_require__(7209);
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = __webpack_require__(1344),
    util  = __webpack_require__(3262);

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};


/***/ }),

/***/ 4863:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = parse;

parse.filename = null;
parse.defaults = { keepCase: false };

var tokenize  = __webpack_require__(527),
    Root      = __webpack_require__(5330),
    Type      = __webpack_require__(7882),
    Field     = __webpack_require__(1344),
    MapField  = __webpack_require__(8252),
    OneOf     = __webpack_require__(1457),
    Enum      = __webpack_require__(5643),
    Service   = __webpack_require__(9687),
    Method    = __webpack_require__(8811),
    types     = __webpack_require__(361),
    util      = __webpack_require__(3262);

var base10Re    = /^[1-9][0-9]*$/,
    base10NegRe = /^-?[1-9][0-9]*$/,
    base16Re    = /^0[x][0-9a-fA-F]+$/,
    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
    base8Re     = /^0[0-7]+$/,
    base8NegRe  = /^-?0[0-7]+$/,
    numberRe    = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
    typeRefRe   = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
    fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;

/**
 * Result object returned from {@link parse}.
 * @interface IParserResult
 * @property {string|undefined} package Package name, if declared
 * @property {string[]|undefined} imports Imports, if any
 * @property {string[]|undefined} weakImports Weak imports, if any
 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
 * @property {Root} root Populated root instance
 */

/**
 * Options modifying the behavior of {@link parse}.
 * @interface IParseOptions
 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
 * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.
 */

/**
 * Options modifying the behavior of JSON serialization.
 * @interface IToJSONOptions
 * @property {boolean} [keepComments=false] Serializes comments.
 */

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @param {string} source Source contents
 * @param {Root} root Root to populate
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 */
function parse(source, root, options) {
    /* eslint-disable callback-return */
    if (!(root instanceof Root)) {
        options = root;
        root = new Root();
    }
    if (!options)
        options = parse.defaults;

    var preferTrailingComment = options.preferTrailingComment || false;
    var tn = tokenize(source, options.alternateCommentMode || false),
        next = tn.next,
        push = tn.push,
        peek = tn.peek,
        skip = tn.skip,
        cmnt = tn.cmnt;

    var head = true,
        pkg,
        imports,
        weakImports,
        syntax,
        isProto3 = false;

    var ptr = root;

    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;

    /* istanbul ignore next */
    function illegal(token, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
            parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
    }

    function readString() {
        var values = [],
            token;
        do {
            /* istanbul ignore if */
            if ((token = next()) !== "\"" && token !== "'")
                throw illegal(token);

            values.push(next());
            skip(token);
            token = peek();
        } while (token === "\"" || token === "'");
        return values.join("");
    }

    function readValue(acceptTypeRef) {
        var token = next();
        switch (token) {
            case "'":
            case "\"":
                push(token);
                return readString();
            case "true": case "TRUE":
                return true;
            case "false": case "FALSE":
                return false;
        }
        try {
            return parseNumber(token, /* insideTryCatch */ true);
        } catch (e) {

            /* istanbul ignore else */
            if (acceptTypeRef && typeRefRe.test(token))
                return token;

            /* istanbul ignore next */
            throw illegal(token, "value");
        }
    }

    function readRanges(target, acceptStrings) {
        var token, start;
        do {
            if (acceptStrings && ((token = peek()) === "\"" || token === "'"))
                target.push(readString());
            else
                target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]);
        } while (skip(",", true));
        skip(";");
    }

    function parseNumber(token, insideTryCatch) {
        var sign = 1;
        if (token.charAt(0) === "-") {
            sign = -1;
            token = token.substring(1);
        }
        switch (token) {
            case "inf": case "INF": case "Inf":
                return sign * Infinity;
            case "nan": case "NAN": case "Nan": case "NaN":
                return NaN;
            case "0":
                return 0;
        }
        if (base10Re.test(token))
            return sign * parseInt(token, 10);
        if (base16Re.test(token))
            return sign * parseInt(token, 16);
        if (base8Re.test(token))
            return sign * parseInt(token, 8);

        /* istanbul ignore else */
        if (numberRe.test(token))
            return sign * parseFloat(token);

        /* istanbul ignore next */
        throw illegal(token, "number", insideTryCatch);
    }

    function parseId(token, acceptNegative) {
        switch (token) {
            case "max": case "MAX": case "Max":
                return 536870911;
            case "0":
                return 0;
        }

        /* istanbul ignore if */
        if (!acceptNegative && token.charAt(0) === "-")
            throw illegal(token, "id");

        if (base10NegRe.test(token))
            return parseInt(token, 10);
        if (base16NegRe.test(token))
            return parseInt(token, 16);

        /* istanbul ignore else */
        if (base8NegRe.test(token))
            return parseInt(token, 8);

        /* istanbul ignore next */
        throw illegal(token, "id");
    }

    function parsePackage() {

        /* istanbul ignore if */
        if (pkg !== undefined)
            throw illegal("package");

        pkg = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(pkg))
            throw illegal(pkg, "name");

        ptr = ptr.define(pkg);
        skip(";");
    }

    function parseImport() {
        var token = peek();
        var whichImports;
        switch (token) {
            case "weak":
                whichImports = weakImports || (weakImports = []);
                next();
                break;
            case "public":
                next();
                // eslint-disable-line no-fallthrough
            default:
                whichImports = imports || (imports = []);
                break;
        }
        token = readString();
        skip(";");
        whichImports.push(token);
    }

    function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";

        /* istanbul ignore if */
        if (!isProto3 && syntax !== "proto2")
            throw illegal(syntax, "syntax");

        skip(";");
    }

    function parseCommon(parent, token) {
        switch (token) {

            case "option":
                parseOption(parent, token);
                skip(";");
                return true;

            case "message":
                parseType(parent, token);
                return true;

            case "enum":
                parseEnum(parent, token);
                return true;

            case "service":
                parseService(parent, token);
                return true;

            case "extend":
                parseExtension(parent, token);
                return true;
        }
        return false;
    }

    function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
            if(typeof obj.comment !== "string") {
              obj.comment = cmnt(); // try block-type comment
            }
            obj.filename = parse.filename;
        }
        if (skip("{", true)) {
            var token;
            while ((token = next()) !== "}")
                fnIf(token);
            skip(";", true);
        } else {
            if (fnElse)
                fnElse();
            skip(";");
            if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
                obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment
        }
    }

    function parseType(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "type name");

        var type = new Type(token);
        ifBlock(type, function parseType_block(token) {
            if (parseCommon(type, token))
                return;

            switch (token) {

                case "map":
                    parseMapField(type, token);
                    break;

                case "required":
                case "repeated":
                    parseField(type, token);
                    break;

                case "optional":
                    /* istanbul ignore if */
                    if (isProto3) {
                        parseField(type, "proto3_optional");
                    } else {
                        parseField(type, "optional");
                    }
                    break;

                case "oneof":
                    parseOneOf(type, token);
                    break;

                case "extensions":
                    readRanges(type.extensions || (type.extensions = []));
                    break;

                case "reserved":
                    readRanges(type.reserved || (type.reserved = []), true);
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token))
                        throw illegal(token);

                    push(token);
                    parseField(type, "optional");
                    break;
            }
        });
        parent.add(type);
    }

    function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
            parseGroup(parent, rule);
            return;
        }

        /* istanbul ignore if */
        if (!typeRefRe.test(type))
            throw illegal(type, "type");

        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        name = applyCase(name);
        skip("=");

        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else
                throw illegal(token);

        }, function parseField_line() {
            parseInlineOptions(field);
        });

        if (rule === "proto3_optional") {
            // for proto3 optional fields, we create a single-member Oneof to mimic "optional" behavior
            var oneof = new OneOf("_" + name);
            field.setOption("proto3_optional", true);
            oneof.add(field);
            parent.add(oneof);
        } else {
            parent.add(field);
        }

        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
        // parsing proto2 descriptors without the option, where applicable. This must be done for
        // all known packable types and anything that could be an enum (= is not a basic type).
        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))
            field.setOption("packed", false, /* ifNotSet */ true);
    }

    function parseGroup(parent, rule) {
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        var fieldName = util.lcFirst(name);
        if (name === fieldName)
            name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token) {
            switch (token) {

                case "option":
                    parseOption(type, token);
                    skip(";");
                    break;

                case "required":
                case "repeated":
                    parseField(type, token);
                    break;

                case "optional":
                    /* istanbul ignore if */
                    if (isProto3) {
                        parseField(type, "proto3_optional");
                    } else {
                        parseField(type, "optional");
                    }
                    break;

                /* istanbul ignore next */
                default:
                    throw illegal(token); // there are no groups with proto3 semantics
            }
        });
        parent.add(type)
              .add(field);
    }

    function parseMapField(parent) {
        skip("<");
        var keyType = next();

        /* istanbul ignore if */
        if (types.mapKey[keyType] === undefined)
            throw illegal(keyType, "type");

        skip(",");
        var valueType = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(valueType))
            throw illegal(valueType, "type");

        skip(">");
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else
                throw illegal(token);

        }, function parseMapField_line() {
            parseInlineOptions(field);
        });
        parent.add(field);
    }

    function parseOneOf(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var oneof = new OneOf(applyCase(token));
        ifBlock(oneof, function parseOneOf_block(token) {
            if (token === "option") {
                parseOption(oneof, token);
                skip(";");
            } else {
                push(token);
                parseField(oneof, "optional");
            }
        });
        parent.add(oneof);
    }

    function parseEnum(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var enm = new Enum(token);
        ifBlock(enm, function parseEnum_block(token) {
          switch(token) {
            case "option":
              parseOption(enm, token);
              skip(";");
              break;

            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;

            default:
              parseEnumValue(enm, token);
          }
        });
        parent.add(enm);
    }

    function parseEnumValue(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token))
            throw illegal(token, "name");

        skip("=");
        var value = parseId(next(), true),
            dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(dummy, token); // skip
                skip(";");
            } else
                throw illegal(token);

        }, function parseEnumValue_line() {
            parseInlineOptions(dummy); // skip
        });
        parent.add(token, value, dummy.comment);
    }

    function parseOption(parent, token) {
        var isCustom = skip("(", true);

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token, "name");

        var name = token;
        var option = name;
        var propName;

        if (isCustom) {
            skip(")");
            name = "(" + name + ")";
            option = name;
            token = peek();
            if (fqTypeRefRe.test(token)) {
                propName = token.substr(1); //remove '.' before property name
                name += token;
                next();
            }
        }
        skip("=");
        var optionValue = parseOptionValue(parent, name);
        setParsedOption(parent, option, optionValue, propName);
    }

    function parseOptionValue(parent, name) {
        if (skip("{", true)) { // { a: "foo" b { c: "bar" } }
            var result = {};
            while (!skip("}", true)) {
                /* istanbul ignore if */
                if (!nameRe.test(token = next()))
                    throw illegal(token, "name");

                var value;
                var propName = token;
                if (peek() === "{")
                    value = parseOptionValue(parent, name + "." + token);
                else {
                    skip(":");
                    if (peek() === "{")
                        value = parseOptionValue(parent, name + "." + token);
                    else {
                        value = readValue(true);
                        setOption(parent, name + "." + token, value);
                    }
                }
                var prevValue = result[propName];
                if (prevValue)
                    value = [].concat(prevValue).concat(value);
                result[propName] = value;
                skip(",", true);
            }
            return result;
        }

        var simpleValue = readValue(true);
        setOption(parent, name, simpleValue);
        return simpleValue;
        // Does not enforce a delimiter to be universal
    }

    function setOption(parent, name, value) {
        if (parent.setOption)
            parent.setOption(name, value);
    }

    function setParsedOption(parent, name, value, propName) {
        if (parent.setParsedOption)
            parent.setParsedOption(name, value, propName);
    }

    function parseInlineOptions(parent) {
        if (skip("[", true)) {
            do {
                parseOption(parent, "option");
            } while (skip(",", true));
            skip("]");
        }
        return parent;
    }

    function parseService(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "service name");

        var service = new Service(token);
        ifBlock(service, function parseService_block(token) {
            if (parseCommon(service, token))
                return;

            /* istanbul ignore else */
            if (token === "rpc")
                parseMethod(service, token);
            else
                throw illegal(token);
        });
        parent.add(service);
    }

    function parseMethod(parent, token) {
        // Get the comment of the preceding line now (if one exists) in case the
        // method is defined across multiple lines.
        var commentText = cmnt();

        var type = token;

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var name = token,
            requestType, requestStream,
            responseType, responseStream;

        skip("(");
        if (skip("stream", true))
            requestStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token);

        requestType = token;
        skip(")"); skip("returns"); skip("(");
        if (skip("stream", true))
            responseStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token);

        responseType = token;
        skip(")");

        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        method.comment = commentText;
        ifBlock(method, function parseMethod_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(method, token);
                skip(";");
            } else
                throw illegal(token);

        });
        parent.add(method);
    }

    function parseExtension(parent, token) {

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token, "reference");

        var reference = token;
        ifBlock(null, function parseExtension_block(token) {
            switch (token) {

                case "required":
                case "repeated":
                    parseField(parent, token, reference);
                    break;

                case "optional":
                    /* istanbul ignore if */
                    if (isProto3) {
                        parseField(parent, "proto3_optional", reference);
                    } else {
                        parseField(parent, "optional", reference);
                    }
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token))
                        throw illegal(token);
                    push(token);
                    parseField(parent, "optional", reference);
                    break;
            }
        });
    }

    var token;
    while ((token = next()) !== null) {
        switch (token) {

            case "package":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parsePackage();
                break;

            case "import":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parseImport();
                break;

            case "syntax":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parseSyntax();
                break;

            case "option":

                parseOption(ptr, token);
                skip(";");
                break;

            default:

                /* istanbul ignore else */
                if (parseCommon(ptr, token)) {
                    head = false;
                    continue;
                }

                /* istanbul ignore next */
                throw illegal(token);
        }
    }

    parse.filename = null;
    return {
        "package"     : pkg,
        "imports"     : imports,
         weakImports  : weakImports,
         syntax       : syntax,
         root         : root
    };
}

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @name parse
 * @function
 * @param {string} source Source contents
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 * @variation 2
 */


/***/ }),

/***/ 6237:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Reader;

var util      = __webpack_require__(3610);

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup(buffer) {
            return (Reader.create = function create_buffer(buffer) {
                return util.Buffer.isBuffer(buffer)
                    ? new BufferReader(buffer)
                    /* istanbul ignore next */
                    : create_array(buffer);
            })(buffer);
        }
        /* istanbul ignore next */
        : create_array;
};

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = create();

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;
    Reader.create = create();
    BufferReader._configure();

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};


/***/ }),

/***/ 3158:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferReader;

// extends Reader
var Reader = __webpack_require__(6237);
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = __webpack_require__(3610);

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

BufferReader._configure = function () {
    /* istanbul ignore else */
    if (util.Buffer)
        BufferReader.prototype._slice = util.Buffer.prototype.slice;
};


/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice
        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))
        : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

BufferReader._configure();


/***/ }),

/***/ 5330:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Root;

// extends Namespace
var Namespace = __webpack_require__(8923);
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

var Field   = __webpack_require__(1344),
    Enum    = __webpack_require__(5643),
    OneOf   = __webpack_require__(1457),
    util    = __webpack_require__(3262);

var Type,   // cyclic
    parse,  // might be excluded
    common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    if (!root)
        root = new Root();
    if (json.options)
        root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

/**
 * Fetch content from file path or url
 * This method exists so you can override it with your own logic.
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.fetch = util.fetch;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback)
        return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback)
            return;
        var cb = callback;
        callback = null;
        if (sync)
            throw err;
        cb(err, root);
    }

    // Bundled definition existence checking
    function getBundledFileName(filename) {
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common) return altname;
        }
        return null;
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{")
                source = JSON.parse(source);
            if (!util.isString(source))
                self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports)
                    for (; i < parsed.imports.length; ++i)
                        if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i]))
                            fetch(resolved);
                if (parsed.weakImports)
                    for (i = 0; i < parsed.weakImports.length; ++i)
                        if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i]))
                            fetch(resolved, true);
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued)
            finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1)
            return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync)
                process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak)
                    finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            self.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback)
                    return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak)
                        finish(err);
                    else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename))
        filename = [ filename ];
    for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self.resolvePath("", filename[i]))
            fetch(resolved);

    if (sync)
        return self;
    if (!queued)
        finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode)
        throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
            return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
            if (!tryHandleExtension(this, object))
                this.deferred.push(object);

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            object.parent[object.name] = object.values; // expose enum values as property of its parent

    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

        if (object instanceof Type) // Try to handle any deferred extensions
            for (var i = 0; i < this.deferred.length;)
                if (tryHandleExtension(this, this.deferred[i]))
                    this.deferred.splice(i, 1);
                else
                    ++i;
        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
            this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
            object.parent[object.name] = object; // expose namespace as property of its parent
    }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if (/* an extension field */ object.extend !== undefined) {
            if (/* already handled */ object.extensionField) { // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else { // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1)
                    this.deferred.splice(index, 1);
            }
        }

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose enum values

    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose namespaces

    }
};

// Sets up cyclic dependencies (called in index-light)
Root._configure = function(Type_, parse_, common_) {
    Type   = Type_;
    parse  = parse_;
    common = common_;
};


/***/ }),

/***/ 4529:
/***/ ((module) => {

"use strict";

module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */


/***/ }),

/***/ 5047:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = __webpack_require__(7595);


/***/ }),

/***/ 7595:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Service;

var util = __webpack_require__(3610);

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};


/***/ }),

/***/ 9687:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Service;

// extends Namespace
var Namespace = __webpack_require__(8923);
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

var Method = __webpack_require__(8811),
    util   = __webpack_require__(3262),
    rpc    = __webpack_require__(5047);

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested)
        service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , inherited && inherited.options || undefined,
        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
        "nested"  , inherited && inherited.nested || undefined,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name]
        || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};


/***/ }),

/***/ 527:
/***/ ((module) => {

"use strict";

module.exports = tokenize;

var delimRe        = /[\s{}=;:[\],'"()<>]/g,
    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

var setCommentRe = /^ *[*/]+ */,
    setCommentAltRe = /^\s*\*?\/*/,
    setCommentSplitRe = /\n/g,
    whitespaceRe = /\s/,
    unescapeRe = /\\(.?)/g;

var unescapeMap = {
    "0": "\0",
    "r": "\r",
    "n": "\n",
    "t": "\t"
};

/**
 * Unescapes a string.
 * @param {string} str String to unescape
 * @returns {string} Unescaped string
 * @property {Object.<string,string>} map Special characters map
 * @memberof tokenize
 */
function unescape(str) {
    return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
            case "\\":
            case "":
                return $1;
            default:
                return unescapeMap[$1] || "";
        }
    });
}

tokenize.unescape = unescape;

/**
 * Gets the next token and advances.
 * @typedef TokenizerHandleNext
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Peeks for the next token.
 * @typedef TokenizerHandlePeek
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Pushes a token back to the stack.
 * @typedef TokenizerHandlePush
 * @type {function}
 * @param {string} token Token
 * @returns {undefined}
 */

/**
 * Skips the next token.
 * @typedef TokenizerHandleSkip
 * @type {function}
 * @param {string} expected Expected token
 * @param {boolean} [optional=false] If optional
 * @returns {boolean} Whether the token matched
 * @throws {Error} If the token didn't match and is not optional
 */

/**
 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
 * @typedef TokenizerHandleCmnt
 * @type {function}
 * @param {number} [line] Line number
 * @returns {string|null} Comment text or `null` if none
 */

/**
 * Handle object returned from {@link tokenize}.
 * @interface ITokenizerHandle
 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
 * @property {TokenizerHandlePush} push Pushes a token back to the stack
 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
 * @property {number} line Current line number
 */

/**
 * Tokenizes the given .proto source and returns an object with useful utility functions.
 * @param {string} source Source contents
 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
 * @returns {ITokenizerHandle} Tokenizer handle
 */
function tokenize(source, alternateCommentMode) {
    /* eslint-disable callback-return */
    source = source.toString();

    var offset = 0,
        length = source.length,
        line = 1,
        commentType = null,
        commentText = null,
        commentLine = 0,
        commentLineEmpty = false,
        commentIsLeading = false;

    var stack = [];

    var stringDelim = null;

    /* istanbul ignore next */
    /**
     * Creates an error for illegal syntax.
     * @param {string} subject Subject
     * @returns {Error} Error created
     * @inner
     */
    function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
    }

    /**
     * Reads a string till its end.
     * @returns {string} String read
     * @inner
     */
    function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
            throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
    }

    /**
     * Gets the character at `pos` within the source.
     * @param {number} pos Position
     * @returns {string} Character
     * @inner
     */
    function charAt(pos) {
        return source.charAt(pos);
    }

    /**
     * Sets the current comment text.
     * @param {number} start Start offset
     * @param {number} end End offset
     * @param {boolean} isLeading set if a leading comment
     * @returns {undefined}
     * @inner
     */
    function setComment(start, end, isLeading) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        commentIsLeading = isLeading;
        var lookback;
        if (alternateCommentMode) {
            lookback = 2;  // alternate comment parsing: "//" or "/*"
        } else {
            lookback = 3;  // "///" or "/**"
        }
        var commentOffset = start - lookback,
            c;
        do {
            if (--commentOffset < 0 ||
                    (c = source.charAt(commentOffset)) === "\n") {
                commentLineEmpty = true;
                break;
            }
        } while (c === " " || c === "\t");
        var lines = source
            .substring(start, end)
            .split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
            lines[i] = lines[i]
                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "")
                .trim();
        commentText = lines
            .join("\n")
            .trim();
    }

    function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);

        // see if remaining line matches comment pattern
        var lineText = source.substring(startOffset, endOffset);
        // look for 1 or 2 slashes since startOffset would already point past
        // the first slash that started the comment.
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
    }

    function findEndOfLine(cursor) {
        // find end of cursor's line
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
            endOffset++;
        }
        return endOffset;
    }

    /**
     * Obtains the next token.
     * @returns {string|null} Next token or `null` on eof
     * @inner
     */
    function next() {
        if (stack.length > 0)
            return stack.shift();
        if (stringDelim)
            return readString();
        var repeat,
            prev,
            curr,
            start,
            isDoc,
            isLeadingComment = offset === 0;
        do {
            if (offset === length)
                return null;
            repeat = false;
            while (whitespaceRe.test(curr = charAt(offset))) {
                if (curr === "\n") {
                    isLeadingComment = true;
                    ++line;
                }
                if (++offset === length)
                    return null;
            }

            if (charAt(offset) === "/") {
                if (++offset === length) {
                    throw illegal("comment");
                }
                if (charAt(offset) === "/") { // Line
                    if (!alternateCommentMode) {
                        // check for triple-slash comment
                        isDoc = charAt(start = offset + 1) === "/";

                        while (charAt(++offset) !== "\n") {
                            if (offset === length) {
                                return null;
                            }
                        }
                        ++offset;
                        if (isDoc) {
                            setComment(start, offset - 1, isLeadingComment);
                        }
                        ++line;
                        repeat = true;
                    } else {
                        // check for double-slash comments, consolidating consecutive lines
                        start = offset;
                        isDoc = false;
                        if (isDoubleSlashCommentLine(offset)) {
                            isDoc = true;
                            do {
                                offset = findEndOfLine(offset);
                                if (offset === length) {
                                    break;
                                }
                                offset++;
                            } while (isDoubleSlashCommentLine(offset));
                        } else {
                            offset = Math.min(length, findEndOfLine(offset) + 1);
                        }
                        if (isDoc) {
                            setComment(start, offset, isLeadingComment);
                        }
                        line++;
                        repeat = true;
                    }
                } else if ((curr = charAt(offset)) === "*") { /* Block */
                    // check for /** (regular comment mode) or /* (alternate comment mode)
                    start = offset + 1;
                    isDoc = alternateCommentMode || charAt(start) === "*";
                    do {
                        if (curr === "\n") {
                            ++line;
                        }
                        if (++offset === length) {
                            throw illegal("comment");
                        }
                        prev = curr;
                        curr = charAt(offset);
                    } while (prev !== "*" || curr !== "/");
                    ++offset;
                    if (isDoc) {
                        setComment(start, offset - 2, isLeadingComment);
                    }
                    repeat = true;
                } else {
                    return "/";
                }
            }
        } while (repeat);

        // offset !== length if we got here

        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
            while (end < length && !delimRe.test(charAt(end)))
                ++end;
        var token = source.substring(offset, offset = end);
        if (token === "\"" || token === "'")
            stringDelim = token;
        return token;
    }

    /**
     * Pushes a token back to the stack.
     * @param {string} token Token
     * @returns {undefined}
     * @inner
     */
    function push(token) {
        stack.push(token);
    }

    /**
     * Peeks for the next token.
     * @returns {string|null} Token or `null` on eof
     * @inner
     */
    function peek() {
        if (!stack.length) {
            var token = next();
            if (token === null)
                return null;
            push(token);
        }
        return stack[0];
    }

    /**
     * Skips a token.
     * @param {string} expected Expected token
     * @param {boolean} [optional=false] Whether the token is optional
     * @returns {boolean} `true` when skipped, `false` if not
     * @throws {Error} When a required token is not present
     * @inner
     */
    function skip(expected, optional) {
        var actual = peek(),
            equals = actual === expected;
        if (equals) {
            next();
            return true;
        }
        if (!optional)
            throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
    }

    /**
     * Gets a comment.
     * @param {number} [trailingLine] Line number if looking for a trailing comment
     * @returns {string|null} Comment text
     * @inner
     */
    function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === undefined) {
            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
                ret = commentIsLeading ? commentText : null;
            }
        } else {
            /* istanbul ignore else */
            if (commentLine < trailingLine) {
                peek();
            }
            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
                ret = commentIsLeading ? null : commentText;
            }
        }
        return ret;
    }

    return Object.defineProperty({
        next: next,
        peek: peek,
        push: push,
        skip: skip,
        cmnt: cmnt
    }, "line", {
        get: function() { return line; }
    });
    /* eslint-enable callback-return */
}


/***/ }),

/***/ 7882:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Type;

// extends Namespace
var Namespace = __webpack_require__(8923);
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

var Enum      = __webpack_require__(5643),
    OneOf     = __webpack_require__(1457),
    Field     = __webpack_require__(1344),
    MapField  = __webpack_require__(8252),
    Service   = __webpack_require__(9687),
    Message   = __webpack_require__(2551),
    Reader    = __webpack_require__(6237),
    Writer    = __webpack_require__(3449),
    util      = __webpack_require__(3262),
    encoder   = __webpack_require__(1080),
    decoder   = __webpack_require__(7728),
    verifier  = __webpack_require__(420),
    converter = __webpack_require__(744),
    wrappers  = __webpack_require__(6434);

/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */
function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {};  // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined; // toJSON

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

Object.defineProperties(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function() {

            /* istanbul ignore if */
            if (this._fieldsById)
                return this._fieldsById;

            this._fieldsById = {};
            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id])
                    throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */ this.fieldsArray.length; ++i)
                this._fieldsArray[i].resolve(); // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
                ctorProperties[this._oneofsArray[i].resolve().name] = {
                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
            if (i)
                Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});

/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["p"], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map) gen
            ("this%s={}", util.safeProp(field.name));
        else if (field.repeated) gen
            ("this%s=[]", util.safeProp(field.name));
    return gen
    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
    /* eslint-enable no-unexpected-multiline */
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {number[][]} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */

/**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */
Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields),
        i = 0;
    for (; i < names.length; ++i)
        type.add(
            ( typeof json.fields[names[i]].keyType !== "undefined"
            ? MapField.fromJSON
            : Field.fromJSON )(names[i], json.fields[names[i]])
        );
    if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
            var nested = json.nested[names[i]];
            type.add( // most to least likely
                ( nested.id !== undefined
                ? Field.fromJSON
                : nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
    if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
    if (json.group)
        type.group = true;
    if (json.comment)
        type.comment = json.comment;
    return type;
};

/**
 * Converts this message type to a message type descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IType} Message type descriptor
 */
Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"    , inherited && inherited.options || undefined,
        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
        "group"      , this.group || undefined,
        "nested"     , inherited && inherited.nested || undefined,
        "comment"    , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while (i < fields.length)
        fields[i++].resolve();
    var oneofs = this.oneofsArray; i = 0;
    while (i < oneofs.length)
        oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};

/**
 * @override
 */
Type.prototype.get = function get(name) {
    return this.fields[name]
        || this.oneofs && this.oneofs[name]
        || this.nested && this.nested[name]
        || null;
};

/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */
Type.prototype.add = function add(object) {

    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.

        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
            throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
            throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
            throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent)
            object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs)
            this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */
Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */
Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */
Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types    = [];
    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);

    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer : Writer,
        types  : types,
        util   : util
    });
    this.decode = decoder(this)({
        Reader : Reader,
        types  : types,
        util   : util
    });
    this.verify = verifier(this)({
        types : types,
        util  : util
    });
    this.fromObject = converter.fromObject(this)({
        types : types,
        util  : util
    });
    this.toObject = converter.toObject(this)({
        types : types,
        util  : util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
            originalThis.fromObject = this.fromObject;
            this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
            originalThis.toObject = this.toObject;
            this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */
Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};

/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader))
        reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */
Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */

/**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */
Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};


/***/ }),

/***/ 361:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/**
 * Common type constants.
 * @namespace
 */
var types = exports;

var util = __webpack_require__(3262);

var s = [
    "double",   // 0
    "float",    // 1
    "int32",    // 2
    "uint32",   // 3
    "sint32",   // 4
    "fixed32",  // 5
    "sfixed32", // 6
    "int64",    // 7
    "uint64",   // 8
    "sint64",   // 9
    "fixed64",  // 10
    "sfixed64", // 11
    "bool",     // 12
    "string",   // 13
    "bytes"     // 14
];

function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length) o[s[i + offset]] = values[i++];
    return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);


/***/ }),

/***/ 3262:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/**
 * Various utility functions.
 * @namespace
 */
var util = module.exports = __webpack_require__(3610);

var roots = __webpack_require__(4529);

var Type, // cyclic
    Enum;

util.codegen = __webpack_require__(8561);
util.fetch   = __webpack_require__(5212);
util.path    = __webpack_require__(9207);

/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */
util.fs = util.inquire("fs");

/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */
util.toArray = function toArray(object) {
    if (object) {
        var keys  = Object.keys(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length)
            array[index] = object[keys[index++]];
        return array;
    }
    return [];
};

/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */
util.toObject = function toObject(array) {
    var object = {},
        index  = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined)
            object[key] = val;
    }
    return object;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe     = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};

/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */
util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
    return "." + prop;
};

/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};

var camelCaseRe = /_([a-z])/g;

/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.camelCase = function camelCase(str) {
    return str.substring(0, 1)
         + str.substring(1)
               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
};

/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */
util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */
util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type)
        Type = __webpack_require__(7882);

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

var decorateEnumIndex = 0;

/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */
util.decorateEnum = function decorateEnum(object) {

    /* istanbul ignore if */
    if (object.$type)
        return object.$type;

    /* istanbul ignore next */
    if (!Enum)
        Enum = __webpack_require__(5643);

    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
    return enm;
};


/**
 * Sets the value of a property by property path. If a value already exists, it is turned to an array
 * @param {Object.<string,*>} dst Destination object
 * @param {string} path dot '.' delimited path of the property to set
 * @param {Object} value the value to set
 * @returns {Object.<string,*>} Destination object
 */
util.setProperty = function setProperty(dst, path, value) {
    function setProp(dst, path, value) {
        var part = path.shift();
        if (part === "__proto__" || part === "prototype") {
          return dst;
        }
        if (path.length > 0) {
            dst[part] = setProp(dst[part] || {}, path, value);
        } else {
            var prevValue = dst[part];
            if (prevValue)
                value = [].concat(prevValue).concat(value);
            dst[part] = value;
        }
        return dst;
    }

    if (typeof dst !== "object")
        throw TypeError("dst must be an object");
    if (!path)
        throw TypeError("path must be specified");

    path = path.split(".");
    return setProp(dst, path, value);
};

/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */
Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (__webpack_require__(5330))());
    }
});


/***/ }),

/***/ 2239:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = LongBits;

var util = __webpack_require__(3610);

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};


/***/ }),

/***/ 3610:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = __webpack_require__(8045);

// converts to / from base64 encoded strings
util.base64 = __webpack_require__(8839);

// base class of rpc.Service
util.EventEmitter = __webpack_require__(4358);

// float handling accross browsers
util.float = __webpack_require__(9410);

// requires modules optionally and hides the call from bundlers
util.inquire = __webpack_require__(4153);

// converts to / from utf8 encoded strings
util.utf8 = __webpack_require__(1447);

// provides a node-like buffer pool in the browser
util.pool = __webpack_require__(9390);

// utility to work with the low and high bits of a 64 bit value
util.LongBits = __webpack_require__(2239);

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 */
util.isNode = Boolean(typeof __webpack_require__.g !== "undefined"
                   && __webpack_require__.g
                   && __webpack_require__.g.process
                   && __webpack_require__.g.process.versions
                   && __webpack_require__.g.process.versions.node);

/**
 * Global object reference.
 * @memberof util
 * @type {Object}
 */
util.global = util.isNode && __webpack_require__.g
           || typeof window !== "undefined" && window
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};


/***/ }),

/***/ 420:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = verifier;

var Enum      = __webpack_require__(5643),
    util      = __webpack_require__(3262);

function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
}

/**
 * Generates a partial value verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyValue(gen, field, fieldIndex, ref) {
    /* eslint-disable no-unexpected-multiline */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(%s){", ref)
                ("default:")
                    ("return%j", invalid(field, "enum value"));
            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
                ("case %i:", field.resolvedType.values[keys[j]]);
            gen
                    ("break")
            ("}");
        } else {
            gen
            ("{")
                ("var e=types[%i].verify(%s);", fieldIndex, ref)
                ("if(e)")
                    ("return%j+e", field.name + ".")
            ("}");
        }
    } else {
        switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32": gen
                ("if(!util.isInteger(%s))", ref)
                    ("return%j", invalid(field, "integer"));
                break;
            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
                    ("return%j", invalid(field, "integer|Long"));
                break;
            case "float":
            case "double": gen
                ("if(typeof %s!==\"number\")", ref)
                    ("return%j", invalid(field, "number"));
                break;
            case "bool": gen
                ("if(typeof %s!==\"boolean\")", ref)
                    ("return%j", invalid(field, "boolean"));
                break;
            case "string": gen
                ("if(!util.isString(%s))", ref)
                    ("return%j", invalid(field, "string"));
                break;
            case "bytes": gen
                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
                    ("return%j", invalid(field, "buffer"));
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a partial key verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyKey(gen, field, ref) {
    /* eslint-disable no-unexpected-multiline */
    switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32": gen
            ("if(!util.key32Re.test(%s))", ref)
                ("return%j", invalid(field, "integer key"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64": gen
            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
                ("return%j", invalid(field, "integer|Long key"));
            break;
        case "bool": gen
            ("if(!util.key2Re.test(%s))", ref)
                ("return%j", invalid(field, "boolean key"));
            break;
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a verifier specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function verifier(mtype) {
    /* eslint-disable no-unexpected-multiline */

    var gen = util.codegen(["m"], mtype.name + "$verify")
    ("if(typeof m!==\"object\"||m===null)")
        ("return%j", "object expected");
    var oneofs = mtype.oneofsArray,
        seenFirstField = {};
    if (oneofs.length) gen
    ("var p={}");

    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            ref   = "m" + util.safeProp(field.name);

        if (field.optional) gen
        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

        // map fields
        if (field.map) { gen
            ("if(!util.isObject(%s))", ref)
                ("return%j", invalid(field, "object"))
            ("var k=Object.keys(%s)", ref)
            ("for(var i=0;i<k.length;++i){");
                genVerifyKey(gen, field, "k[i]");
                genVerifyValue(gen, field, i, ref + "[k[i]]")
            ("}");

        // repeated fields
        } else if (field.repeated) { gen
            ("if(!Array.isArray(%s))", ref)
                ("return%j", invalid(field, "array"))
            ("for(var i=0;i<%s.length;++i){", ref);
                genVerifyValue(gen, field, i, ref + "[i]")
            ("}");

        // required or present fields
        } else {
            if (field.partOf) {
                var oneofProp = util.safeProp(field.partOf.name);
                if (seenFirstField[field.partOf.name] === 1) gen
            ("if(p%s===1)", oneofProp)
                ("return%j", field.partOf.name + ": multiple values");
                seenFirstField[field.partOf.name] = 1;
                gen
            ("p%s=1", oneofProp);
            }
            genVerifyValue(gen, field, i, ref);
        }
        if (field.optional) gen
        ("}");
    }
    return gen
    ("return null");
    /* eslint-enable no-unexpected-multiline */
}

/***/ }),

/***/ 6434:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


/**
 * Wrappers for common types.
 * @type {Object.<string,IWrapper>}
 * @const
 */
var wrappers = exports;

var Message = __webpack_require__(2551);

/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */

/**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */

/**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */

// Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {

    fromObject: function(object) {

        // unwrap value type if mapped
        if (object && object["@type"]) {
             // Only use fully qualified type name after the last '/'
            var name = object["@type"].substring(object["@type"].lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ?
                    object["@type"].substr(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                if (type_url.indexOf("/") === -1) {
                    type_url = "/" + type_url;
                }
                return this.create({
                    type_url: type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }

        return this.fromObject(object);
    },

    toObject: function(message, options) {

        // Default prefix
        var googleApi = "type.googleapis.com/";
        var prefix = "";
        var name = "";

        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            // Separate the prefix used
            prefix = message.type_url.substring(0, message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type)
                message = type.decode(message.value);
        }

        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            var messageName = message.$type.fullName[0] === "." ?
                message.$type.fullName.substr(1) : message.$type.fullName;
            // Default to type.googleapis.com prefix if no prefix is used
            if (prefix === "") {
                prefix = googleApi;
            }
            name = prefix + messageName;
            object["@type"] = name;
            return object;
        }

        return this.toObject(message, options);
    }
};


/***/ }),

/***/ 3449:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = Writer;

var util      = __webpack_require__(3610);

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

var create = function create() {
    return util.Buffer
        ? function create_buffer_setup() {
            return (Writer.create = function create_buffer() {
                return new BufferWriter();
            })();
        }
        /* istanbul ignore next */
        : function create_array() {
            return new Writer();
        };
};

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = create();

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
    Writer.create = create();
    BufferWriter._configure();
};


/***/ }),

/***/ 818:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

module.exports = BufferWriter;

// extends Writer
var Writer = __webpack_require__(3449);
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = __webpack_require__(3610);

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

BufferWriter._configure = function () {
    /**
     * Allocates a buffer of the specified size.
     * @function
     * @param {number} size Buffer size
     * @returns {Buffer} Buffer
     */
    BufferWriter.alloc = util._Buffer_allocUnsafe;

    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set"
        ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
          // also works for plain array values
        }
        /* istanbul ignore next */
        : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
          else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
        };
};


/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(BufferWriter.writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else if (buf.utf8Write)
        buf.utf8Write(val, pos);
    else
        buf.write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = util.Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

BufferWriter._configure();


/***/ }),

/***/ 4741:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var Reflect;
(function (Reflect) {
    // Metadata Proposal
    // https://rbuckton.github.io/reflect-metadata/
    (function (factory) {
        var root = typeof __webpack_require__.g === "object" ? __webpack_require__.g :
            typeof self === "object" ? self :
                typeof this === "object" ? this :
                    Function("return this;")();
        var exporter = makeExporter(Reflect);
        if (typeof root.Reflect === "undefined") {
            root.Reflect = Reflect;
        }
        else {
            exporter = makeExporter(root.Reflect, exporter);
        }
        factory(exporter);
        function makeExporter(target, previous) {
            return function (key, value) {
                if (typeof target[key] !== "function") {
                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });
                }
                if (previous)
                    previous(key, value);
            };
        }
    })(function (exporter) {
        var hasOwn = Object.prototype.hasOwnProperty;
        // feature test for Symbol support
        var supportsSymbol = typeof Symbol === "function";
        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
        var supportsCreate = typeof Object.create === "function"; // feature test for Object.create support
        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support
        var downLevel = !supportsCreate && !supportsProto;
        var HashMap = {
            // create an object in dictionary mode (a.k.a. "slow" mode in v8)
            create: supportsCreate
                ? function () { return MakeDictionary(Object.create(null)); }
                : supportsProto
                    ? function () { return MakeDictionary({ __proto__: null }); }
                    : function () { return MakeDictionary({}); },
            has: downLevel
                ? function (map, key) { return hasOwn.call(map, key); }
                : function (map, key) { return key in map; },
            get: downLevel
                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }
                : function (map, key) { return map[key]; },
        };
        // Load global or shim versions of Map, Set, and WeakMap
        var functionPrototype = Object.getPrototypeOf(Function);
        var usePolyfill = typeof process === "object" && process["env" + ""] && process["env" + ""]["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
        var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
        var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
        var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
        // [[Metadata]] internal slot
        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots
        var Metadata = new _WeakMap();
        /**
         * Applies a set of decorators to a property of a target object.
         * @param decorators An array of decorators.
         * @param target The target object.
         * @param propertyKey (Optional) The property key to decorate.
         * @param attributes (Optional) The property descriptor for the target key.
         * @remarks Decorators are applied in reverse order.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Example = Reflect.decorate(decoratorsArray, Example);
         *
         *     // property (on constructor)
         *     Reflect.decorate(decoratorsArray, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.decorate(decoratorsArray, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Object.defineProperty(Example, "staticMethod",
         *         Reflect.decorate(decoratorsArray, Example, "staticMethod",
         *             Object.getOwnPropertyDescriptor(Example, "staticMethod")));
         *
         *     // method (on prototype)
         *     Object.defineProperty(Example.prototype, "method",
         *         Reflect.decorate(decoratorsArray, Example.prototype, "method",
         *             Object.getOwnPropertyDescriptor(Example.prototype, "method")));
         *
         */
        function decorate(decorators, target, propertyKey, attributes) {
            if (!IsUndefined(propertyKey)) {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
                    throw new TypeError();
                if (IsNull(attributes))
                    attributes = undefined;
                propertyKey = ToPropertyKey(propertyKey);
                return DecorateProperty(decorators, target, propertyKey, attributes);
            }
            else {
                if (!IsArray(decorators))
                    throw new TypeError();
                if (!IsConstructor(target))
                    throw new TypeError();
                return DecorateConstructor(decorators, target);
            }
        }
        exporter("decorate", decorate);
        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)
        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata
        /**
         * A default metadata decorator factory that can be used on a class, class member, or parameter.
         * @param metadataKey The key for the metadata entry.
         * @param metadataValue The value for the metadata entry.
         * @returns A decorator function.
         * @remarks
         * If `metadataKey` is already defined for the target and target key, the
         * metadataValue for that key will be overwritten.
         * @example
         *
         *     // constructor
         *     @Reflect.metadata(key, value)
         *     class Example {
         *     }
         *
         *     // property (on constructor, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticProperty;
         *     }
         *
         *     // property (on prototype, TypeScript only)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         property;
         *     }
         *
         *     // method (on constructor)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         static staticMethod() { }
         *     }
         *
         *     // method (on prototype)
         *     class Example {
         *         @Reflect.metadata(key, value)
         *         method() { }
         *     }
         *
         */
        function metadata(metadataKey, metadataValue) {
            function decorator(target, propertyKey) {
                if (!IsObject(target))
                    throw new TypeError();
                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
                    throw new TypeError();
                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
            }
            return decorator;
        }
        exporter("metadata", metadata);
        /**
         * Define a unique metadata entry on the target.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param metadataValue A value that contains attached metadata.
         * @param target The target object on which to define metadata.
         * @param propertyKey (Optional) The property key for the target.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     Reflect.defineMetadata("custom:annotation", options, Example);
         *
         *     // property (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticProperty");
         *
         *     // property (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "property");
         *
         *     // method (on constructor)
         *     Reflect.defineMetadata("custom:annotation", options, Example, "staticMethod");
         *
         *     // method (on prototype)
         *     Reflect.defineMetadata("custom:annotation", options, Example.prototype, "method");
         *
         *     // decorator factory as metadata-producing annotation.
         *     function MyAnnotation(options): Decorator {
         *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
         *     }
         *
         */
        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        exporter("defineMetadata", defineMetadata);
        /**
         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasMetadata", hasMetadata);
        /**
         * Gets a value indicating whether the target object has the provided metadata key defined.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.hasOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function hasOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("hasOwnMetadata", hasOwnMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetMetadata(metadataKey, target, propertyKey);
        }
        exporter("getMetadata", getMetadata);
        /**
         * Gets the metadata value for the provided metadata key on the target object.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function getOwnMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
        }
        exporter("getOwnMetadata", getOwnMetadata);
        /**
         * Gets the metadata keys defined on the target object or its prototype chain.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getMetadataKeys(Example.prototype, "method");
         *
         */
        function getMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryMetadataKeys(target, propertyKey);
        }
        exporter("getMetadataKeys", getMetadataKeys);
        /**
         * Gets the unique metadata keys defined on the target object.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns An array of unique metadata keys.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.getOwnMetadataKeys(Example);
         *
         *     // property (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.getOwnMetadataKeys(Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.getOwnMetadataKeys(Example.prototype, "method");
         *
         */
        function getOwnMetadataKeys(target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            return OrdinaryOwnMetadataKeys(target, propertyKey);
        }
        exporter("getOwnMetadataKeys", getOwnMetadataKeys);
        /**
         * Deletes the metadata entry from the target object with the provided key.
         * @param metadataKey A key used to store and retrieve metadata.
         * @param target The target object on which the metadata is defined.
         * @param propertyKey (Optional) The property key for the target.
         * @returns `true` if the metadata entry was found and deleted; otherwise, false.
         * @example
         *
         *     class Example {
         *         // property declarations are not part of ES6, though they are valid in TypeScript:
         *         // static staticProperty;
         *         // property;
         *
         *         constructor(p) { }
         *         static staticMethod(p) { }
         *         method(p) { }
         *     }
         *
         *     // constructor
         *     result = Reflect.deleteMetadata("custom:annotation", Example);
         *
         *     // property (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticProperty");
         *
         *     // property (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "property");
         *
         *     // method (on constructor)
         *     result = Reflect.deleteMetadata("custom:annotation", Example, "staticMethod");
         *
         *     // method (on prototype)
         *     result = Reflect.deleteMetadata("custom:annotation", Example.prototype, "method");
         *
         */
        function deleteMetadata(metadataKey, target, propertyKey) {
            if (!IsObject(target))
                throw new TypeError();
            if (!IsUndefined(propertyKey))
                propertyKey = ToPropertyKey(propertyKey);
            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            if (!metadataMap.delete(metadataKey))
                return false;
            if (metadataMap.size > 0)
                return true;
            var targetMetadata = Metadata.get(target);
            targetMetadata.delete(propertyKey);
            if (targetMetadata.size > 0)
                return true;
            Metadata.delete(target);
            return true;
        }
        exporter("deleteMetadata", deleteMetadata);
        function DecorateConstructor(decorators, target) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsConstructor(decorated))
                        throw new TypeError();
                    target = decorated;
                }
            }
            return target;
        }
        function DecorateProperty(decorators, target, propertyKey, descriptor) {
            for (var i = decorators.length - 1; i >= 0; --i) {
                var decorator = decorators[i];
                var decorated = decorator(target, propertyKey, descriptor);
                if (!IsUndefined(decorated) && !IsNull(decorated)) {
                    if (!IsObject(decorated))
                        throw new TypeError();
                    descriptor = decorated;
                }
            }
            return descriptor;
        }
        function GetOrCreateMetadataMap(O, P, Create) {
            var targetMetadata = Metadata.get(O);
            if (IsUndefined(targetMetadata)) {
                if (!Create)
                    return undefined;
                targetMetadata = new _Map();
                Metadata.set(O, targetMetadata);
            }
            var metadataMap = targetMetadata.get(P);
            if (IsUndefined(metadataMap)) {
                if (!Create)
                    return undefined;
                metadataMap = new _Map();
                targetMetadata.set(P, metadataMap);
            }
            return metadataMap;
        }
        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata
        function OrdinaryHasMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return true;
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryHasMetadata(MetadataKey, parent, P);
            return false;
        }
        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata
        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return false;
            return ToBoolean(metadataMap.has(MetadataKey));
        }
        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata
        function OrdinaryGetMetadata(MetadataKey, O, P) {
            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
            if (hasOwn)
                return OrdinaryGetOwnMetadata(MetadataKey, O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (!IsNull(parent))
                return OrdinaryGetMetadata(MetadataKey, parent, P);
            return undefined;
        }
        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata
        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return undefined;
            return metadataMap.get(MetadataKey);
        }
        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata
        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);
            metadataMap.set(MetadataKey, MetadataValue);
        }
        // 3.1.6.1 OrdinaryMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys
        function OrdinaryMetadataKeys(O, P) {
            var ownKeys = OrdinaryOwnMetadataKeys(O, P);
            var parent = OrdinaryGetPrototypeOf(O);
            if (parent === null)
                return ownKeys;
            var parentKeys = OrdinaryMetadataKeys(parent, P);
            if (parentKeys.length <= 0)
                return ownKeys;
            if (ownKeys.length <= 0)
                return parentKeys;
            var set = new _Set();
            var keys = [];
            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
                var key = ownKeys_1[_i];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
                var key = parentKeys_1[_a];
                var hasKey = set.has(key);
                if (!hasKey) {
                    set.add(key);
                    keys.push(key);
                }
            }
            return keys;
        }
        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)
        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys
        function OrdinaryOwnMetadataKeys(O, P) {
            var keys = [];
            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);
            if (IsUndefined(metadataMap))
                return keys;
            var keysObj = metadataMap.keys();
            var iterator = GetIterator(keysObj);
            var k = 0;
            while (true) {
                var next = IteratorStep(iterator);
                if (!next) {
                    keys.length = k;
                    return keys;
                }
                var nextValue = IteratorValue(next);
                try {
                    keys[k] = nextValue;
                }
                catch (e) {
                    try {
                        IteratorClose(iterator);
                    }
                    finally {
                        throw e;
                    }
                }
                k++;
            }
        }
        // 6 ECMAScript Data Typ0es and Values
        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values
        function Type(x) {
            if (x === null)
                return 1 /* Null */;
            switch (typeof x) {
                case "undefined": return 0 /* Undefined */;
                case "boolean": return 2 /* Boolean */;
                case "string": return 3 /* String */;
                case "symbol": return 4 /* Symbol */;
                case "number": return 5 /* Number */;
                case "object": return x === null ? 1 /* Null */ : 6 /* Object */;
                default: return 6 /* Object */;
            }
        }
        // 6.1.1 The Undefined Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type
        function IsUndefined(x) {
            return x === undefined;
        }
        // 6.1.2 The Null Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type
        function IsNull(x) {
            return x === null;
        }
        // 6.1.5 The Symbol Type
        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type
        function IsSymbol(x) {
            return typeof x === "symbol";
        }
        // 6.1.7 The Object Type
        // https://tc39.github.io/ecma262/#sec-object-type
        function IsObject(x) {
            return typeof x === "object" ? x !== null : typeof x === "function";
        }
        // 7.1 Type Conversion
        // https://tc39.github.io/ecma262/#sec-type-conversion
        // 7.1.1 ToPrimitive(input [, PreferredType])
        // https://tc39.github.io/ecma262/#sec-toprimitive
        function ToPrimitive(input, PreferredType) {
            switch (Type(input)) {
                case 0 /* Undefined */: return input;
                case 1 /* Null */: return input;
                case 2 /* Boolean */: return input;
                case 3 /* String */: return input;
                case 4 /* Symbol */: return input;
                case 5 /* Number */: return input;
            }
            var hint = PreferredType === 3 /* String */ ? "string" : PreferredType === 5 /* Number */ ? "number" : "default";
            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
            if (exoticToPrim !== undefined) {
                var result = exoticToPrim.call(input, hint);
                if (IsObject(result))
                    throw new TypeError();
                return result;
            }
            return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
        }
        // 7.1.1.1 OrdinaryToPrimitive(O, hint)
        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive
        function OrdinaryToPrimitive(O, hint) {
            if (hint === "string") {
                var toString_1 = O.toString;
                if (IsCallable(toString_1)) {
                    var result = toString_1.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            else {
                var valueOf = O.valueOf;
                if (IsCallable(valueOf)) {
                    var result = valueOf.call(O);
                    if (!IsObject(result))
                        return result;
                }
                var toString_2 = O.toString;
                if (IsCallable(toString_2)) {
                    var result = toString_2.call(O);
                    if (!IsObject(result))
                        return result;
                }
            }
            throw new TypeError();
        }
        // 7.1.2 ToBoolean(argument)
        // https://tc39.github.io/ecma262/2016/#sec-toboolean
        function ToBoolean(argument) {
            return !!argument;
        }
        // 7.1.12 ToString(argument)
        // https://tc39.github.io/ecma262/#sec-tostring
        function ToString(argument) {
            return "" + argument;
        }
        // 7.1.14 ToPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-topropertykey
        function ToPropertyKey(argument) {
            var key = ToPrimitive(argument, 3 /* String */);
            if (IsSymbol(key))
                return key;
            return ToString(key);
        }
        // 7.2 Testing and Comparison Operations
        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations
        // 7.2.2 IsArray(argument)
        // https://tc39.github.io/ecma262/#sec-isarray
        function IsArray(argument) {
            return Array.isArray
                ? Array.isArray(argument)
                : argument instanceof Object
                    ? argument instanceof Array
                    : Object.prototype.toString.call(argument) === "[object Array]";
        }
        // 7.2.3 IsCallable(argument)
        // https://tc39.github.io/ecma262/#sec-iscallable
        function IsCallable(argument) {
            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.
            return typeof argument === "function";
        }
        // 7.2.4 IsConstructor(argument)
        // https://tc39.github.io/ecma262/#sec-isconstructor
        function IsConstructor(argument) {
            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.
            return typeof argument === "function";
        }
        // 7.2.7 IsPropertyKey(argument)
        // https://tc39.github.io/ecma262/#sec-ispropertykey
        function IsPropertyKey(argument) {
            switch (Type(argument)) {
                case 3 /* String */: return true;
                case 4 /* Symbol */: return true;
                default: return false;
            }
        }
        // 7.3 Operations on Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-objects
        // 7.3.9 GetMethod(V, P)
        // https://tc39.github.io/ecma262/#sec-getmethod
        function GetMethod(V, P) {
            var func = V[P];
            if (func === undefined || func === null)
                return undefined;
            if (!IsCallable(func))
                throw new TypeError();
            return func;
        }
        // 7.4 Operations on Iterator Objects
        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects
        function GetIterator(obj) {
            var method = GetMethod(obj, iteratorSymbol);
            if (!IsCallable(method))
                throw new TypeError(); // from Call
            var iterator = method.call(obj);
            if (!IsObject(iterator))
                throw new TypeError();
            return iterator;
        }
        // 7.4.4 IteratorValue(iterResult)
        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue
        function IteratorValue(iterResult) {
            return iterResult.value;
        }
        // 7.4.5 IteratorStep(iterator)
        // https://tc39.github.io/ecma262/#sec-iteratorstep
        function IteratorStep(iterator) {
            var result = iterator.next();
            return result.done ? false : result;
        }
        // 7.4.6 IteratorClose(iterator, completion)
        // https://tc39.github.io/ecma262/#sec-iteratorclose
        function IteratorClose(iterator) {
            var f = iterator["return"];
            if (f)
                f.call(iterator);
        }
        // 9.1 Ordinary Object Internal Methods and Internal Slots
        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots
        // 9.1.1.1 OrdinaryGetPrototypeOf(O)
        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof
        function OrdinaryGetPrototypeOf(O) {
            var proto = Object.getPrototypeOf(O);
            if (typeof O !== "function" || O === functionPrototype)
                return proto;
            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.
            // Try to determine the superclass constructor. Compatible implementations
            // must either set __proto__ on a subclass constructor to the superclass constructor,
            // or ensure each class has a valid `constructor` property on its prototype that
            // points back to the constructor.
            // If this is not the same as Function.[[Prototype]], then this is definately inherited.
            // This is the case when in ES6 or when using __proto__ in a compatible browser.
            if (proto !== functionPrototype)
                return proto;
            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
            var prototype = O.prototype;
            var prototypeProto = prototype && Object.getPrototypeOf(prototype);
            if (prototypeProto == null || prototypeProto === Object.prototype)
                return proto;
            // If the constructor was not a function, then we cannot determine the heritage.
            var constructor = prototypeProto.constructor;
            if (typeof constructor !== "function")
                return proto;
            // If we have some kind of self-reference, then we cannot determine the heritage.
            if (constructor === O)
                return proto;
            // we have a pretty good guess at the heritage.
            return constructor;
        }
        // naive Map shim
        function CreateMapPolyfill() {
            var cacheSentinel = {};
            var arraySentinel = [];
            var MapIterator = /** @class */ (function () {
                function MapIterator(keys, values, selector) {
                    this._index = 0;
                    this._keys = keys;
                    this._values = values;
                    this._selector = selector;
                }
                MapIterator.prototype["@@iterator"] = function () { return this; };
                MapIterator.prototype[iteratorSymbol] = function () { return this; };
                MapIterator.prototype.next = function () {
                    var index = this._index;
                    if (index >= 0 && index < this._keys.length) {
                        var result = this._selector(this._keys[index], this._values[index]);
                        if (index + 1 >= this._keys.length) {
                            this._index = -1;
                            this._keys = arraySentinel;
                            this._values = arraySentinel;
                        }
                        else {
                            this._index++;
                        }
                        return { value: result, done: false };
                    }
                    return { value: undefined, done: true };
                };
                MapIterator.prototype.throw = function (error) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    throw error;
                };
                MapIterator.prototype.return = function (value) {
                    if (this._index >= 0) {
                        this._index = -1;
                        this._keys = arraySentinel;
                        this._values = arraySentinel;
                    }
                    return { value: value, done: true };
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function Map() {
                    this._keys = [];
                    this._values = [];
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                }
                Object.defineProperty(Map.prototype, "size", {
                    get: function () { return this._keys.length; },
                    enumerable: true,
                    configurable: true
                });
                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };
                Map.prototype.get = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    return index >= 0 ? this._values[index] : undefined;
                };
                Map.prototype.set = function (key, value) {
                    var index = this._find(key, /*insert*/ true);
                    this._values[index] = value;
                    return this;
                };
                Map.prototype.delete = function (key) {
                    var index = this._find(key, /*insert*/ false);
                    if (index >= 0) {
                        var size = this._keys.length;
                        for (var i = index + 1; i < size; i++) {
                            this._keys[i - 1] = this._keys[i];
                            this._values[i - 1] = this._values[i];
                        }
                        this._keys.length--;
                        this._values.length--;
                        if (key === this._cacheKey) {
                            this._cacheKey = cacheSentinel;
                            this._cacheIndex = -2;
                        }
                        return true;
                    }
                    return false;
                };
                Map.prototype.clear = function () {
                    this._keys.length = 0;
                    this._values.length = 0;
                    this._cacheKey = cacheSentinel;
                    this._cacheIndex = -2;
                };
                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };
                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };
                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };
                Map.prototype["@@iterator"] = function () { return this.entries(); };
                Map.prototype[iteratorSymbol] = function () { return this.entries(); };
                Map.prototype._find = function (key, insert) {
                    if (this._cacheKey !== key) {
                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
                    }
                    if (this._cacheIndex < 0 && insert) {
                        this._cacheIndex = this._keys.length;
                        this._keys.push(key);
                        this._values.push(undefined);
                    }
                    return this._cacheIndex;
                };
                return Map;
            }());
            function getKey(key, _) {
                return key;
            }
            function getValue(_, value) {
                return value;
            }
            function getEntry(key, value) {
                return [key, value];
            }
        }
        // naive Set shim
        function CreateSetPolyfill() {
            return /** @class */ (function () {
                function Set() {
                    this._map = new _Map();
                }
                Object.defineProperty(Set.prototype, "size", {
                    get: function () { return this._map.size; },
                    enumerable: true,
                    configurable: true
                });
                Set.prototype.has = function (value) { return this._map.has(value); };
                Set.prototype.add = function (value) { return this._map.set(value, value), this; };
                Set.prototype.delete = function (value) { return this._map.delete(value); };
                Set.prototype.clear = function () { this._map.clear(); };
                Set.prototype.keys = function () { return this._map.keys(); };
                Set.prototype.values = function () { return this._map.values(); };
                Set.prototype.entries = function () { return this._map.entries(); };
                Set.prototype["@@iterator"] = function () { return this.keys(); };
                Set.prototype[iteratorSymbol] = function () { return this.keys(); };
                return Set;
            }());
        }
        // naive WeakMap shim
        function CreateWeakMapPolyfill() {
            var UUID_SIZE = 16;
            var keys = HashMap.create();
            var rootKey = CreateUniqueKey();
            return /** @class */ (function () {
                function WeakMap() {
                    this._key = CreateUniqueKey();
                }
                WeakMap.prototype.has = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.has(table, this._key) : false;
                };
                WeakMap.prototype.get = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? HashMap.get(table, this._key) : undefined;
                };
                WeakMap.prototype.set = function (target, value) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);
                    table[this._key] = value;
                    return this;
                };
                WeakMap.prototype.delete = function (target) {
                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);
                    return table !== undefined ? delete table[this._key] : false;
                };
                WeakMap.prototype.clear = function () {
                    // NOTE: not a real clear, just makes the previous data unreachable
                    this._key = CreateUniqueKey();
                };
                return WeakMap;
            }());
            function CreateUniqueKey() {
                var key;
                do
                    key = "@@WeakMap@@" + CreateUUID();
                while (HashMap.has(keys, key));
                keys[key] = true;
                return key;
            }
            function GetOrCreateWeakMapTable(target, create) {
                if (!hasOwn.call(target, rootKey)) {
                    if (!create)
                        return undefined;
                    Object.defineProperty(target, rootKey, { value: HashMap.create() });
                }
                return target[rootKey];
            }
            function FillRandomBytes(buffer, size) {
                for (var i = 0; i < size; ++i)
                    buffer[i] = Math.random() * 0xff | 0;
                return buffer;
            }
            function GenRandomBytes(size) {
                if (typeof Uint8Array === "function") {
                    if (typeof crypto !== "undefined")
                        return crypto.getRandomValues(new Uint8Array(size));
                    if (typeof msCrypto !== "undefined")
                        return msCrypto.getRandomValues(new Uint8Array(size));
                    return FillRandomBytes(new Uint8Array(size), size);
                }
                return FillRandomBytes(new Array(size), size);
            }
            function CreateUUID() {
                var data = GenRandomBytes(UUID_SIZE);
                // mark as random - RFC 4122 § 4.4
                data[6] = data[6] & 0x4f | 0x40;
                data[8] = data[8] & 0xbf | 0x80;
                var result = "";
                for (var offset = 0; offset < UUID_SIZE; ++offset) {
                    var byte = data[offset];
                    if (offset === 4 || offset === 6 || offset === 8)
                        result += "-";
                    if (byte < 16)
                        result += "0";
                    result += byte.toString(16).toLowerCase();
                }
                return result;
            }
        }
        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.
        function MakeDictionary(obj) {
            obj.__ = undefined;
            delete obj.__;
            return obj;
        }
    });
})(Reflect || (Reflect = {}));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".packed.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			792: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be in strict mode.
(() => {
"use strict";

;// ./node_modules/@snap/camera-kit/lib/common/copyDefinedProperties.js
/**
 * Copy only those properties of an object which are not undefined.
 *
 * This can be useful when using `Object.assign(foo, bar)` or `{ ...foo, ...bar }` to copy values from one object to
 * another. There's a (rather annoying) difference between a property not existing in an object and that property
 * existing but having an undefined value. When copying values using either of the methods above, it's generally
 * expected that undefined properties won't overwrite defined properties. But that's not the behavior – this helper
 * function is needed to ensure undefined properties in `bar` don't clobber corresponding properties in `foo`.
 *
 * @param obj Any object, possibly with properties whose values are undefined.
 * @returns A copy of the input object, without keys whose values were undefined.
 */
function main_copyDefinedProperties(obj) {
    return Object.fromEntries(Object.entries(obj).filter(([_, value]) => value !== undefined));
}
//# sourceMappingURL=copyDefinedProperties.js.map
;// ./node_modules/@snap/camera-kit/lib/configurationOverrides.js
/**
 * Prefix of override key on window object.
 */
const main_windowFieldPrefix = "__snap_camkit_override__";
const main_configPropertiesToOverride = [
    "wasmEndpointOverride",
    "logger",
    "logLevel",
    "userAgentFlavor",
];
main_configPropertiesToOverride.forEach((fieldToOverride) => {
    main_defineWindowField(fieldToOverride);
});
function main_defineWindowField(propertyToOverride) {
    if (typeof window === "undefined")
        return;
    Object.defineProperty(window, `${main_windowFieldPrefix}${propertyToOverride}`, {
        get() {
            var _a;
            return (_a = main_getConfigurationOverrides()) === null || _a === void 0 ? void 0 : _a[propertyToOverride];
        },
        set(value) {
            const storedOverrides = Object.assign(Object.assign({}, main_getConfigurationOverrides()), { [propertyToOverride]: value });
            if (Object.values(storedOverrides).every((value) => typeof value === "undefined")) {
                sessionStorage.removeItem(main_windowFieldPrefix);
            }
            else {
                sessionStorage.setItem(main_windowFieldPrefix, JSON.stringify(storedOverrides));
            }
        },
        enumerable: false,
        configurable: true,
    });
}
/**
 * Checks whether there are configuration overrides stored, and if yes, returns them.
 *
 * @internal
 */
function main_getConfigurationOverrides() {
    if (!sessionStorage)
        return undefined;
    const overridesString = sessionStorage.getItem(main_windowFieldPrefix);
    return overridesString && JSON.parse(overridesString);
}
//# sourceMappingURL=configurationOverrides.js.map
;// ./node_modules/@snap/camera-kit/lib/dependency-injection/Injectable.js
function main_Injectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[Injectable] Received invalid arguments. The factory function must be either the second " +
            "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (...args) => fn(...args);
    factory.token = token;
    factory.dependencies = dependencies;
    return factory;
}
function main_ConcatInjectable(token, dependenciesOrFn, maybeFn) {
    const dependencies = Array.isArray(dependenciesOrFn) ? dependenciesOrFn : [];
    const fn = typeof dependenciesOrFn === "function" ? dependenciesOrFn : maybeFn;
    if (!fn) {
        throw new TypeError("[ConcatInjectable] Received invalid arguments. The factory function must be either the second " +
            "or third argument.");
    }
    if (fn.length !== dependencies.length) {
        throw new TypeError("[Injectable] Function arity does not match the number of dependencies. Function has arity " +
            `${fn.length}, but ${dependencies.length} dependencies were specified.` +
            `\nDependencies: ${JSON.stringify(dependencies)}`);
    }
    const factory = (array, ...args) => {
        return array.concat(fn(...args));
    };
    factory.token = token;
    factory.dependencies = [token, ...dependencies];
    return factory;
}
//# sourceMappingURL=Injectable.js.map
;// ./node_modules/@snap/camera-kit/lib/configuration.js



/**
 * Defaults are provided for runtime configuration and any optional bootstrap configuration properties which require
 * defaults.
 */
const main_defaultConfiguration = {
    // If the applications doesn't provide performance data (e.g. via estimateLensPerformance), we'll use 0 to indicate
    // no performance estimation occurred. This is indicative of typical performance-targeting logic, which often
    // defaults to the lowest-tier experience in the absense of performance cluster data.
    lensPerformance: { cluster: 0, benchmarks: [], webglRendererInfo: "unknown" },
    logger: "noop",
    logLevel: "info",
    shouldUseWorker: true,
    apiHostname: "camera-kit-api.snapar.com",
    userAgentFlavor: "release",
};
/** @internal */
const main_configurationToken = "configuration";
/**
 * Returns true if given browser is iPhone, iPad or iPod.
 */
function main_isHandledAppleDevice() {
    // We use the same approach LC uses:
    // eslint-disable-next-line max-len
    // https://github.sc-corp.net/Snapchat/LensCore/blob/285ac47cad7fe5268f38d1bab82d51b7b19d6b48/Src/PlatformSpecific/WebAssembly/WebEnvironmentInfo.cpp#L81
    return (/iPad|iPhone|iPod/.test(navigator.platform) ||
        (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 2));
}
/** @internal */
const main_createCameraKitConfigurationFactory = (configuration) => {
    // always leave debug mode warning about overrides in console
    const overrides = main_getConfigurationOverrides();
    if (overrides) {
        console.warn("Configuration overrides applied", overrides);
    }
    return main_Injectable(main_configurationToken, () => {
        // We'll ensure that we handle errors on any Promises passed as config values, otherwise we either must
        // handle them separately wherever they're used, or rejections would go unhandled.
        const safeConfig = Object.assign(Object.assign({}, configuration), { lensPerformance: configuration.lensPerformance instanceof Promise
                ? // Safety: defaultConfiguration.lensPerformance is defined (it's hardcoded above).
                    configuration.lensPerformance.catch(() => main_defaultConfiguration.lensPerformance)
                : configuration.lensPerformance });
        return Object.assign(Object.assign(Object.assign(Object.assign({}, main_defaultConfiguration), { 
            // TODO: Safari 17 has an issue with offscreen canvas which results in stuttering effect on iOS.
            // Once Safari has that fixed, we should remove this check, see https://jira.sc-corp.net/browse/CAMKIT-5985
            shouldUseWorker: main_isHandledAppleDevice() ? false : main_defaultConfiguration.shouldUseWorker }), main_copyDefinedProperties(safeConfig)), main_copyDefinedProperties(overrides !== null && overrides !== void 0 ? overrides : {}));
    });
};
//# sourceMappingURL=configuration.js.map
;// ./node_modules/tslib/tslib.es6.mjs
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var main_extendStatics = function(d, b) {
  main_extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return main_extendStatics(d, b);
};

function main_extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  main_extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var main_assign = function() {
  main_assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return main_assign.apply(this, arguments);
}

function main_rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function main_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function main_param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function main_esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function main_runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function main_propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function main_setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function main_metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function main_tslib_es6_awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function main_generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var main_createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function main_exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) main_createBinding(o, m, p);
}

function main_values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function main_read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function main_spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(main_read(arguments[i]));
  return ar;
}

/** @deprecated */
function main_spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function main_spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function main_await(v) {
  return this instanceof main_await ? (this.v = v, this) : new main_await(v);
}

function main_asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof main_await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function main_asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: main_await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function main_asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof main_values === "function" ? main_values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function main_makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var main_setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var main_ownKeys = function(o) {
  main_ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return main_ownKeys(o);
};

function main_importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = main_ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") main_createBinding(result, mod, k[i]);
  main_setModuleDefault(result, mod);
  return result;
}

function main_importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function main_classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function main_classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function main_classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function main_addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var main_SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function main_disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new main_SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function main_rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* harmony default export */ const main_tslib_es6 = ({
  __extends: main_extends,
  __assign: main_assign,
  __rest: main_rest,
  __decorate: main_decorate,
  __param: main_param,
  __esDecorate: main_esDecorate,
  __runInitializers: main_runInitializers,
  __propKey: main_propKey,
  __setFunctionName: main_setFunctionName,
  __metadata: main_metadata,
  __awaiter: main_tslib_es6_awaiter,
  __generator: main_generator,
  __createBinding: main_createBinding,
  __exportStar: main_exportStar,
  __values: main_values,
  __read: main_read,
  __spread: main_spread,
  __spreadArrays: main_spreadArrays,
  __spreadArray: main_spreadArray,
  __await: main_await,
  __asyncGenerator: main_asyncGenerator,
  __asyncDelegator: main_asyncDelegator,
  __asyncValues: main_asyncValues,
  __makeTemplateObject: main_makeTemplateObject,
  __importStar: main_importStar,
  __importDefault: main_importDefault,
  __classPrivateFieldGet: main_classPrivateFieldGet,
  __classPrivateFieldSet: main_classPrivateFieldSet,
  __classPrivateFieldIn: main_classPrivateFieldIn,
  __addDisposableResource: main_addDisposableResource,
  __disposeResources: main_disposeResources,
  __rewriteRelativeImportExtension: main_rewriteRelativeImportExtension,
});

;// ./node_modules/@snap/camera-kit/lib/lensCoreWasmVersions.json
const main_lensCoreWasmVersions_namespaceObject = /*#__PURE__*/JSON.parse('{"version":"245","buildNumber":"206","baseUrl":"https://cf-st.sc-cdn.net/d/XE5OEHvRwDItKCjMqOAmW?go=IgsKCTIBBEgBUFxgAQ%3D%3D&uc=92"}');
;// ./node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function main_isFunction(value) {
    return typeof value === 'function';
}
//# sourceMappingURL=isFunction.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/lift.js

function main_hasLift(source) {
    return main_isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function main_operate(init) {
    return function (source) {
        if (main_hasLift(source)) {
            return source.lift(function (liftedSource) {
                try {
                    return init(liftedSource, this);
                }
                catch (err) {
                    this.error(err);
                }
            });
        }
        throw new TypeError('Unable to lift unknown Observable type');
    };
}
//# sourceMappingURL=lift.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function main_createErrorClass(createImpl) {
    var _super = function (instance) {
        Error.call(instance);
        instance.stack = new Error().stack;
    };
    var ctorFunc = createImpl(_super);
    ctorFunc.prototype = Object.create(Error.prototype);
    ctorFunc.prototype.constructor = ctorFunc;
    return ctorFunc;
}
//# sourceMappingURL=createErrorClass.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js

var main_UnsubscriptionError = main_createErrorClass(function (_super) {
    return function UnsubscriptionErrorImpl(errors) {
        _super(this);
        this.message = errors
            ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
            : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
    };
});
//# sourceMappingURL=UnsubscriptionError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function main_arrRemove(arr, item) {
    if (arr) {
        var index = arr.indexOf(item);
        0 <= index && arr.splice(index, 1);
    }
}
//# sourceMappingURL=arrRemove.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subscription.js




var main_Subscription = (function () {
    function Subscription(initialTeardown) {
        this.initialTeardown = initialTeardown;
        this.closed = false;
        this._parentage = null;
        this._finalizers = null;
    }
    Subscription.prototype.unsubscribe = function () {
        var e_1, _a, e_2, _b;
        var errors;
        if (!this.closed) {
            this.closed = true;
            var _parentage = this._parentage;
            if (_parentage) {
                this._parentage = null;
                if (Array.isArray(_parentage)) {
                    try {
                        for (var _parentage_1 = main_values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                            var parent_1 = _parentage_1_1.value;
                            parent_1.remove(this);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    _parentage.remove(this);
                }
            }
            var initialFinalizer = this.initialTeardown;
            if (main_isFunction(initialFinalizer)) {
                try {
                    initialFinalizer();
                }
                catch (e) {
                    errors = e instanceof main_UnsubscriptionError ? e.errors : [e];
                }
            }
            var _finalizers = this._finalizers;
            if (_finalizers) {
                this._finalizers = null;
                try {
                    for (var _finalizers_1 = main_values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
                        var finalizer = _finalizers_1_1.value;
                        try {
                            main_execFinalizer(finalizer);
                        }
                        catch (err) {
                            errors = errors !== null && errors !== void 0 ? errors : [];
                            if (err instanceof main_UnsubscriptionError) {
                                errors = main_spreadArray(main_spreadArray([], main_read(errors)), main_read(err.errors));
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return)) _b.call(_finalizers_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (errors) {
                throw new main_UnsubscriptionError(errors);
            }
        }
    };
    Subscription.prototype.add = function (teardown) {
        var _a;
        if (teardown && teardown !== this) {
            if (this.closed) {
                main_execFinalizer(teardown);
            }
            else {
                if (teardown instanceof Subscription) {
                    if (teardown.closed || teardown._hasParent(this)) {
                        return;
                    }
                    teardown._addParent(this);
                }
                (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
            }
        }
    };
    Subscription.prototype._hasParent = function (parent) {
        var _parentage = this._parentage;
        return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
    };
    Subscription.prototype._addParent = function (parent) {
        var _parentage = this._parentage;
        this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
    };
    Subscription.prototype._removeParent = function (parent) {
        var _parentage = this._parentage;
        if (_parentage === parent) {
            this._parentage = null;
        }
        else if (Array.isArray(_parentage)) {
            main_arrRemove(_parentage, parent);
        }
    };
    Subscription.prototype.remove = function (teardown) {
        var _finalizers = this._finalizers;
        _finalizers && main_arrRemove(_finalizers, teardown);
        if (teardown instanceof Subscription) {
            teardown._removeParent(this);
        }
    };
    Subscription.EMPTY = (function () {
        var empty = new Subscription();
        empty.closed = true;
        return empty;
    })();
    return Subscription;
}());

var main_EMPTY_SUBSCRIPTION = main_Subscription.EMPTY;
function main_isSubscription(value) {
    return (value instanceof main_Subscription ||
        (value && 'closed' in value && main_isFunction(value.remove) && main_isFunction(value.add) && main_isFunction(value.unsubscribe)));
}
function main_execFinalizer(finalizer) {
    if (main_isFunction(finalizer)) {
        finalizer();
    }
    else {
        finalizer.unsubscribe();
    }
}
//# sourceMappingURL=Subscription.js.map
;// ./node_modules/rxjs/dist/esm5/internal/config.js
var main_config = {
    onUnhandledError: null,
    onStoppedNotification: null,
    Promise: undefined,
    useDeprecatedSynchronousErrorHandling: false,
    useDeprecatedNextContext: false,
};
//# sourceMappingURL=config.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js

var main_timeoutProvider = {
    setTimeout: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = main_timeoutProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
            return delegate.setTimeout.apply(delegate, main_spreadArray([handler, timeout], main_read(args)));
        }
        return setTimeout.apply(void 0, main_spreadArray([handler, timeout], main_read(args)));
    },
    clearTimeout: function (handle) {
        var delegate = main_timeoutProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=timeoutProvider.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js


function main_reportUnhandledError(err) {
    main_timeoutProvider.setTimeout(function () {
        var onUnhandledError = main_config.onUnhandledError;
        if (onUnhandledError) {
            onUnhandledError(err);
        }
        else {
            throw err;
        }
    });
}
//# sourceMappingURL=reportUnhandledError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/noop.js
function main_noop() { }
//# sourceMappingURL=noop.js.map
;// ./node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var main_COMPLETE_NOTIFICATION = (function () { return main_createNotification('C', undefined, undefined); })();
function main_errorNotification(error) {
    return main_createNotification('E', undefined, error);
}
function main_nextNotification(value) {
    return main_createNotification('N', value, undefined);
}
function main_createNotification(kind, value, error) {
    return {
        kind: kind,
        value: value,
        error: error,
    };
}
//# sourceMappingURL=NotificationFactories.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/errorContext.js

var main_context = null;
function main_errorContext(cb) {
    if (main_config.useDeprecatedSynchronousErrorHandling) {
        var isRoot = !main_context;
        if (isRoot) {
            main_context = { errorThrown: false, error: null };
        }
        cb();
        if (isRoot) {
            var _a = main_context, errorThrown = _a.errorThrown, error = _a.error;
            main_context = null;
            if (errorThrown) {
                throw error;
            }
        }
    }
    else {
        cb();
    }
}
function main_captureError(err) {
    if (main_config.useDeprecatedSynchronousErrorHandling && main_context) {
        main_context.errorThrown = true;
        main_context.error = err;
    }
}
//# sourceMappingURL=errorContext.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subscriber.js









var main_Subscriber = (function (_super) {
    main_extends(Subscriber, _super);
    function Subscriber(destination) {
        var _this = _super.call(this) || this;
        _this.isStopped = false;
        if (destination) {
            _this.destination = destination;
            if (main_isSubscription(destination)) {
                destination.add(_this);
            }
        }
        else {
            _this.destination = main_EMPTY_OBSERVER;
        }
        return _this;
    }
    Subscriber.create = function (next, error, complete) {
        return new main_SafeSubscriber(next, error, complete);
    };
    Subscriber.prototype.next = function (value) {
        if (this.isStopped) {
            main_handleStoppedNotification(main_nextNotification(value), this);
        }
        else {
            this._next(value);
        }
    };
    Subscriber.prototype.error = function (err) {
        if (this.isStopped) {
            main_handleStoppedNotification(main_errorNotification(err), this);
        }
        else {
            this.isStopped = true;
            this._error(err);
        }
    };
    Subscriber.prototype.complete = function () {
        if (this.isStopped) {
            main_handleStoppedNotification(main_COMPLETE_NOTIFICATION, this);
        }
        else {
            this.isStopped = true;
            this._complete();
        }
    };
    Subscriber.prototype.unsubscribe = function () {
        if (!this.closed) {
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
            this.destination = null;
        }
    };
    Subscriber.prototype._next = function (value) {
        this.destination.next(value);
    };
    Subscriber.prototype._error = function (err) {
        try {
            this.destination.error(err);
        }
        finally {
            this.unsubscribe();
        }
    };
    Subscriber.prototype._complete = function () {
        try {
            this.destination.complete();
        }
        finally {
            this.unsubscribe();
        }
    };
    return Subscriber;
}(main_Subscription));

var main_bind = Function.prototype.bind;
function src_main_bind(fn, thisArg) {
    return main_bind.call(fn, thisArg);
}
var main_ConsumerObserver = (function () {
    function ConsumerObserver(partialObserver) {
        this.partialObserver = partialObserver;
    }
    ConsumerObserver.prototype.next = function (value) {
        var partialObserver = this.partialObserver;
        if (partialObserver.next) {
            try {
                partialObserver.next(value);
            }
            catch (error) {
                main_handleUnhandledError(error);
            }
        }
    };
    ConsumerObserver.prototype.error = function (err) {
        var partialObserver = this.partialObserver;
        if (partialObserver.error) {
            try {
                partialObserver.error(err);
            }
            catch (error) {
                main_handleUnhandledError(error);
            }
        }
        else {
            main_handleUnhandledError(err);
        }
    };
    ConsumerObserver.prototype.complete = function () {
        var partialObserver = this.partialObserver;
        if (partialObserver.complete) {
            try {
                partialObserver.complete();
            }
            catch (error) {
                main_handleUnhandledError(error);
            }
        }
    };
    return ConsumerObserver;
}());
var main_SafeSubscriber = (function (_super) {
    main_extends(SafeSubscriber, _super);
    function SafeSubscriber(observerOrNext, error, complete) {
        var _this = _super.call(this) || this;
        var partialObserver;
        if (main_isFunction(observerOrNext) || !observerOrNext) {
            partialObserver = {
                next: (observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : undefined),
                error: error !== null && error !== void 0 ? error : undefined,
                complete: complete !== null && complete !== void 0 ? complete : undefined,
            };
        }
        else {
            var context_1;
            if (_this && main_config.useDeprecatedNextContext) {
                context_1 = Object.create(observerOrNext);
                context_1.unsubscribe = function () { return _this.unsubscribe(); };
                partialObserver = {
                    next: observerOrNext.next && src_main_bind(observerOrNext.next, context_1),
                    error: observerOrNext.error && src_main_bind(observerOrNext.error, context_1),
                    complete: observerOrNext.complete && src_main_bind(observerOrNext.complete, context_1),
                };
            }
            else {
                partialObserver = observerOrNext;
            }
        }
        _this.destination = new main_ConsumerObserver(partialObserver);
        return _this;
    }
    return SafeSubscriber;
}(main_Subscriber));

function main_handleUnhandledError(error) {
    if (main_config.useDeprecatedSynchronousErrorHandling) {
        main_captureError(error);
    }
    else {
        main_reportUnhandledError(error);
    }
}
function main_defaultErrorHandler(err) {
    throw err;
}
function main_handleStoppedNotification(notification, subscriber) {
    var onStoppedNotification = main_config.onStoppedNotification;
    onStoppedNotification && main_timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
}
var main_EMPTY_OBSERVER = {
    closed: true,
    next: main_noop,
    error: main_defaultErrorHandler,
    complete: main_noop,
};
//# sourceMappingURL=Subscriber.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js


function main_createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new main_OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var main_OperatorSubscriber = (function (_super) {
    main_extends(OperatorSubscriber, _super);
    function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext
            ? function (value) {
                try {
                    onNext(value);
                }
                catch (err) {
                    destination.error(err);
                }
            }
            : _super.prototype._next;
        _this._error = onError
            ? function (err) {
                try {
                    onError(err);
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._error;
        _this._complete = onComplete
            ? function () {
                try {
                    onComplete();
                }
                catch (err) {
                    destination.error(err);
                }
                finally {
                    this.unsubscribe();
                }
            }
            : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber;
}(main_Subscriber));

//# sourceMappingURL=OperatorSubscriber.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/map.js


function main_map(project, thisArg) {
    return main_operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
            subscriber.next(project.call(thisArg, value, index++));
        }));
    });
}
//# sourceMappingURL=map.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var main_isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });
//# sourceMappingURL=isArrayLike.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isPromise.js

function main_isPromise(value) {
    return main_isFunction(value === null || value === void 0 ? void 0 : value.then);
}
//# sourceMappingURL=isPromise.js.map
;// ./node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var main_observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();
//# sourceMappingURL=observable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/identity.js
function main_identity_identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/pipe.js

function main_pipe() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return main_pipeFromArray(fns);
}
function main_pipeFromArray(fns) {
    if (fns.length === 0) {
        return main_identity_identity;
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce(function (prev, fn) { return fn(prev); }, input);
    };
}
//# sourceMappingURL=pipe.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Observable.js







var main_Observable_Observable = (function () {
    function Observable(subscribe) {
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    Observable.prototype.lift = function (operator) {
        var observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    };
    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
        var _this = this;
        var subscriber = main_isSubscriber(observerOrNext) ? observerOrNext : new main_SafeSubscriber(observerOrNext, error, complete);
        main_errorContext(function () {
            var _a = _this, operator = _a.operator, source = _a.source;
            subscriber.add(operator
                ?
                    operator.call(subscriber, source)
                : source
                    ?
                        _this._subscribe(subscriber)
                    :
                        _this._trySubscribe(subscriber));
        });
        return subscriber;
    };
    Observable.prototype._trySubscribe = function (sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            sink.error(err);
        }
    };
    Observable.prototype.forEach = function (next, promiseCtor) {
        var _this = this;
        promiseCtor = main_getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var subscriber = new main_SafeSubscriber({
                next: function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscriber.unsubscribe();
                    }
                },
                error: reject,
                complete: resolve,
            });
            _this.subscribe(subscriber);
        });
    };
    Observable.prototype._subscribe = function (subscriber) {
        var _a;
        return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
    };
    Observable.prototype[main_observable] = function () {
        return this;
    };
    Observable.prototype.pipe = function () {
        var operations = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            operations[_i] = arguments[_i];
        }
        return main_pipeFromArray(operations)(this);
    };
    Observable.prototype.toPromise = function (promiseCtor) {
        var _this = this;
        promiseCtor = main_getPromiseCtor(promiseCtor);
        return new promiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    };
    Observable.create = function (subscribe) {
        return new Observable(subscribe);
    };
    return Observable;
}());

function main_getPromiseCtor(promiseCtor) {
    var _a;
    return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : main_config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function main_isObserver(value) {
    return value && main_isFunction(value.next) && main_isFunction(value.error) && main_isFunction(value.complete);
}
function main_isSubscriber(value) {
    return (value && value instanceof main_Subscriber) || (main_isObserver(value) && main_isSubscription(value));
}
//# sourceMappingURL=Observable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js


function main_isInteropObservable(input) {
    return main_isFunction(input[main_observable]);
}
//# sourceMappingURL=isInteropObservable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js

function main_isAsyncIterable(obj) {
    return Symbol.asyncIterator && main_isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}
//# sourceMappingURL=isAsyncIterable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function main_createInvalidObservableTypeError(input) {
    return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}
//# sourceMappingURL=throwUnobservableError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function main_getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
var main_iterator_iterator = main_getSymbolIterator();
//# sourceMappingURL=iterator.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isIterable.js


function main_isIterable(input) {
    return main_isFunction(input === null || input === void 0 ? void 0 : input[main_iterator_iterator]);
}
//# sourceMappingURL=isIterable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js


function main_readableStreamLikeToAsyncGenerator(readableStream) {
    return main_asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
        var reader, _a, value, done;
        return main_generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    reader = readableStream.getReader();
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 9, 10]);
                    _b.label = 2;
                case 2:
                    if (false) {}
                    return [4, main_await(reader.read())];
                case 3:
                    _a = _b.sent(), value = _a.value, done = _a.done;
                    if (!done) return [3, 5];
                    return [4, main_await(void 0)];
                case 4: return [2, _b.sent()];
                case 5: return [4, main_await(value)];
                case 6: return [4, _b.sent()];
                case 7:
                    _b.sent();
                    return [3, 2];
                case 8: return [3, 10];
                case 9:
                    reader.releaseLock();
                    return [7];
                case 10: return [2];
            }
        });
    });
}
function main_isReadableStreamLike(obj) {
    return main_isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}
//# sourceMappingURL=isReadableStreamLike.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js












function main_innerFrom_innerFrom(input) {
    if (input instanceof main_Observable_Observable) {
        return input;
    }
    if (input != null) {
        if (main_isInteropObservable(input)) {
            return main_fromInteropObservable(input);
        }
        if (main_isArrayLike(input)) {
            return main_fromArrayLike(input);
        }
        if (main_isPromise(input)) {
            return main_fromPromise(input);
        }
        if (main_isAsyncIterable(input)) {
            return main_fromAsyncIterable(input);
        }
        if (main_isIterable(input)) {
            return main_fromIterable(input);
        }
        if (main_isReadableStreamLike(input)) {
            return main_fromReadableStreamLike(input);
        }
    }
    throw main_createInvalidObservableTypeError(input);
}
function main_fromInteropObservable(obj) {
    return new main_Observable_Observable(function (subscriber) {
        var obs = obj[main_observable]();
        if (main_isFunction(obs.subscribe)) {
            return obs.subscribe(subscriber);
        }
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    });
}
function main_fromArrayLike(array) {
    return new main_Observable_Observable(function (subscriber) {
        for (var i = 0; i < array.length && !subscriber.closed; i++) {
            subscriber.next(array[i]);
        }
        subscriber.complete();
    });
}
function main_fromPromise(promise) {
    return new main_Observable_Observable(function (subscriber) {
        promise
            .then(function (value) {
            if (!subscriber.closed) {
                subscriber.next(value);
                subscriber.complete();
            }
        }, function (err) { return subscriber.error(err); })
            .then(null, main_reportUnhandledError);
    });
}
function main_fromIterable(iterable) {
    return new main_Observable_Observable(function (subscriber) {
        var e_1, _a;
        try {
            for (var iterable_1 = main_values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                var value = iterable_1_1.value;
                subscriber.next(value);
                if (subscriber.closed) {
                    return;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        subscriber.complete();
    });
}
function main_fromAsyncIterable(asyncIterable) {
    return new main_Observable_Observable(function (subscriber) {
        main_process(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
    });
}
function main_fromReadableStreamLike(readableStream) {
    return main_fromAsyncIterable(main_readableStreamLikeToAsyncGenerator(readableStream));
}
function main_process(asyncIterable, subscriber) {
    var asyncIterable_1, asyncIterable_1_1;
    var e_2, _a;
    return main_tslib_es6_awaiter(this, void 0, void 0, function () {
        var value, e_2_1;
        return main_generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 5, 6, 11]);
                    asyncIterable_1 = main_asyncValues(asyncIterable);
                    _b.label = 1;
                case 1: return [4, asyncIterable_1.next()];
                case 2:
                    if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                    value = asyncIterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return [2];
                    }
                    _b.label = 3;
                case 3: return [3, 1];
                case 4: return [3, 11];
                case 5:
                    e_2_1 = _b.sent();
                    e_2 = { error: e_2_1 };
                    return [3, 11];
                case 6:
                    _b.trys.push([6, , 9, 10]);
                    if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                    return [4, _a.call(asyncIterable_1)];
                case 7:
                    _b.sent();
                    _b.label = 8;
                case 8: return [3, 10];
                case 9:
                    if (e_2) throw e_2.error;
                    return [7];
                case 10: return [7];
                case 11:
                    subscriber.complete();
                    return [2];
            }
        });
    });
}
//# sourceMappingURL=innerFrom.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function main_executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
    if (delay === void 0) { delay = 0; }
    if (repeat === void 0) { repeat = false; }
    var scheduleSubscription = scheduler.schedule(function () {
        work();
        if (repeat) {
            parentSubscription.add(this.schedule(null, delay));
        }
        else {
            this.unsubscribe();
        }
    }, delay);
    parentSubscription.add(scheduleSubscription);
    if (!repeat) {
        return scheduleSubscription;
    }
}
//# sourceMappingURL=executeSchedule.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js



function main_mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
    var buffer = [];
    var active = 0;
    var index = 0;
    var isComplete = false;
    var checkComplete = function () {
        if (isComplete && !buffer.length && !active) {
            subscriber.complete();
        }
    };
    var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
    var doInnerSub = function (value) {
        expand && subscriber.next(value);
        active++;
        var innerComplete = false;
        main_innerFrom_innerFrom(project(value, index++)).subscribe(main_createOperatorSubscriber(subscriber, function (innerValue) {
            onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
            if (expand) {
                outerNext(innerValue);
            }
            else {
                subscriber.next(innerValue);
            }
        }, function () {
            innerComplete = true;
        }, undefined, function () {
            if (innerComplete) {
                try {
                    active--;
                    var _loop_1 = function () {
                        var bufferedValue = buffer.shift();
                        if (innerSubScheduler) {
                            main_executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                        }
                        else {
                            doInnerSub(bufferedValue);
                        }
                    };
                    while (buffer.length && active < concurrent) {
                        _loop_1();
                    }
                    checkComplete();
                }
                catch (err) {
                    subscriber.error(err);
                }
            }
        }));
    };
    source.subscribe(main_createOperatorSubscriber(subscriber, outerNext, function () {
        isComplete = true;
        checkComplete();
    }));
    return function () {
        additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
    };
}
//# sourceMappingURL=mergeInternals.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js





function main_mergeMap(project, resultSelector, concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    if (main_isFunction(resultSelector)) {
        return main_mergeMap(function (a, i) { return main_map(function (b, ii) { return resultSelector(a, b, i, ii); })(main_innerFrom_innerFrom(project(a, i))); }, concurrent);
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return main_operate(function (source, subscriber) { return main_mergeInternals(source, subscriber, project, concurrent); });
}
//# sourceMappingURL=mergeMap.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js


function main_mergeAll(concurrent) {
    if (concurrent === void 0) { concurrent = Infinity; }
    return main_mergeMap(main_identity_identity, concurrent);
}
//# sourceMappingURL=mergeAll.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/empty.js

var main_EMPTY = new main_Observable_Observable(function (subscriber) { return subscriber.complete(); });
function main_empty(scheduler) {
    return scheduler ? main_emptyScheduled(scheduler) : main_EMPTY;
}
function main_emptyScheduled(scheduler) {
    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
}
//# sourceMappingURL=empty.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isScheduler.js

function main_isScheduler(value) {
    return value && main_isFunction(value.schedule);
}
//# sourceMappingURL=isScheduler.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/args.js


function main_last(arr) {
    return arr[arr.length - 1];
}
function main_args_popResultSelector(args) {
    return main_isFunction(main_last(args)) ? args.pop() : undefined;
}
function main_args_popScheduler(args) {
    return main_isScheduler(main_last(args)) ? args.pop() : undefined;
}
function main_popNumber(args, defaultValue) {
    return typeof main_last(args) === 'number' ? args.pop() : defaultValue;
}
//# sourceMappingURL=args.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/observeOn.js



function main_observeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return main_operate(function (source, subscriber) {
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) { return main_executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return main_executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return main_executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
    });
}
//# sourceMappingURL=observeOn.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js

function main_subscribeOn(scheduler, delay) {
    if (delay === void 0) { delay = 0; }
    return main_operate(function (source, subscriber) {
        subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
    });
}
//# sourceMappingURL=subscribeOn.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js



function main_scheduleObservable(input, scheduler) {
    return main_innerFrom_innerFrom(input).pipe(main_subscribeOn(scheduler), main_observeOn(scheduler));
}
//# sourceMappingURL=scheduleObservable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js



function main_schedulePromise(input, scheduler) {
    return main_innerFrom_innerFrom(input).pipe(main_subscribeOn(scheduler), main_observeOn(scheduler));
}
//# sourceMappingURL=schedulePromise.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js

function main_scheduleArray(input, scheduler) {
    return new main_Observable_Observable(function (subscriber) {
        var i = 0;
        return scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
            }
            else {
                subscriber.next(input[i++]);
                if (!subscriber.closed) {
                    this.schedule();
                }
            }
        });
    });
}
//# sourceMappingURL=scheduleArray.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js




function main_scheduleIterable(input, scheduler) {
    return new main_Observable_Observable(function (subscriber) {
        var iterator;
        main_executeSchedule(subscriber, scheduler, function () {
            iterator = input[main_iterator_iterator]();
            main_executeSchedule(subscriber, scheduler, function () {
                var _a;
                var value;
                var done;
                try {
                    (_a = iterator.next(), value = _a.value, done = _a.done);
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                }
            }, 0, true);
        });
        return function () { return main_isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
    });
}
//# sourceMappingURL=scheduleIterable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js


function main_scheduleAsyncIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new main_Observable_Observable(function (subscriber) {
        main_executeSchedule(subscriber, scheduler, function () {
            var iterator = input[Symbol.asyncIterator]();
            main_executeSchedule(subscriber, scheduler, function () {
                iterator.next().then(function (result) {
                    if (result.done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(result.value);
                    }
                });
            }, 0, true);
        });
    });
}
//# sourceMappingURL=scheduleAsyncIterable.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js


function main_scheduleReadableStreamLike(input, scheduler) {
    return main_scheduleAsyncIterable(main_readableStreamLikeToAsyncGenerator(input), scheduler);
}
//# sourceMappingURL=scheduleReadableStreamLike.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js













function main_scheduled(input, scheduler) {
    if (input != null) {
        if (main_isInteropObservable(input)) {
            return main_scheduleObservable(input, scheduler);
        }
        if (main_isArrayLike(input)) {
            return main_scheduleArray(input, scheduler);
        }
        if (main_isPromise(input)) {
            return main_schedulePromise(input, scheduler);
        }
        if (main_isAsyncIterable(input)) {
            return main_scheduleAsyncIterable(input, scheduler);
        }
        if (main_isIterable(input)) {
            return main_scheduleIterable(input, scheduler);
        }
        if (main_isReadableStreamLike(input)) {
            return main_scheduleReadableStreamLike(input, scheduler);
        }
    }
    throw main_createInvalidObservableTypeError(input);
}
//# sourceMappingURL=scheduled.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/from.js


function main_from_from(input, scheduler) {
    return scheduler ? main_scheduled(input, scheduler) : main_innerFrom_innerFrom(input);
}
//# sourceMappingURL=from.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/merge.js





function main_merge() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = main_args_popScheduler(args);
    var concurrent = main_popNumber(args, Infinity);
    var sources = args;
    return !sources.length
        ?
            main_EMPTY
        : sources.length === 1
            ?
                main_innerFrom_innerFrom(sources[0])
            :
                main_mergeAll(concurrent)(main_from_from(sources, scheduler));
}
//# sourceMappingURL=merge.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js


var main_isArray = Array.isArray;
function main_callOrApply(fn, args) {
    return main_isArray(args) ? fn.apply(void 0, main_spreadArray([], main_read(args))) : fn(args);
}
function main_mapOneOrManyArgs_mapOneOrManyArgs(fn) {
    return main_map(function (args) { return main_callOrApply(fn, args); });
}
//# sourceMappingURL=mapOneOrManyArgs.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js







var main_nodeEventEmitterMethods = ['addListener', 'removeListener'];
var main_eventTargetMethods = ['addEventListener', 'removeEventListener'];
var main_jqueryMethods = ['on', 'off'];
function main_fromEvent(target, eventName, options, resultSelector) {
    if (main_isFunction(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return main_fromEvent(target, eventName, options).pipe(main_mapOneOrManyArgs_mapOneOrManyArgs(resultSelector));
    }
    var _a = main_read(main_isEventTarget(target)
        ? main_eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
        :
            main_isNodeStyleEventEmitter(target)
                ? main_nodeEventEmitterMethods.map(main_toCommonHandlerRegistry(target, eventName))
                : main_isJQueryStyleEventEmitter(target)
                    ? main_jqueryMethods.map(main_toCommonHandlerRegistry(target, eventName))
                    : [], 2), add = _a[0], remove = _a[1];
    if (!add) {
        if (main_isArrayLike(target)) {
            return main_mergeMap(function (subTarget) { return main_fromEvent(subTarget, eventName, options); })(main_innerFrom_innerFrom(target));
        }
    }
    if (!add) {
        throw new TypeError('Invalid event target');
    }
    return new main_Observable_Observable(function (subscriber) {
        var handler = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return subscriber.next(1 < args.length ? args : args[0]);
        };
        add(handler);
        return function () { return remove(handler); };
    });
}
function main_toCommonHandlerRegistry(target, eventName) {
    return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
}
function main_isNodeStyleEventEmitter(target) {
    return main_isFunction(target.addListener) && main_isFunction(target.removeListener);
}
function main_isJQueryStyleEventEmitter(target) {
    return main_isFunction(target.on) && main_isFunction(target.off);
}
function main_isEventTarget(target) {
    return main_isFunction(target.addEventListener) && main_isFunction(target.removeEventListener);
}
//# sourceMappingURL=fromEvent.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/tap.js




function main_tap(observerOrNext, error, complete) {
    var tapObserver = main_isFunction(observerOrNext) || error || complete
        ?
            { next: observerOrNext, error: error, complete: complete }
        : observerOrNext;
    return tapObserver
        ? main_operate(function (source, subscriber) {
            var _a;
            (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
            var isUnsub = true;
            source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                var _a;
                (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                subscriber.next(value);
            }, function () {
                var _a;
                isUnsub = false;
                (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                subscriber.complete();
            }, function (err) {
                var _a;
                isUnsub = false;
                (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                subscriber.error(err);
            }, function () {
                var _a, _b;
                if (isUnsub) {
                    (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                }
                (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
            }));
        })
        :
            main_identity_identity;
}
//# sourceMappingURL=tap.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/take.js



function main_take(count) {
    return count <= 0
        ?
            function () { return main_EMPTY; }
        : main_operate(function (source, subscriber) {
            var seen = 0;
            source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                if (++seen <= count) {
                    subscriber.next(value);
                    if (count <= seen) {
                        subscriber.complete();
                    }
                }
            }));
        });
}
//# sourceMappingURL=take.js.map
;// ./node_modules/@snap/camera-kit/lib/common/loadScript.js

/**
 * Adds script element to document body and starts downloading provided script URL.
 * @param scriptUri Script URL.
 * @returns Script element added.
 */
function main_loadScript(scriptUri) {
    return new Promise((resolve, reject) => {
        const scriptElement = document.createElement("script");
        scriptElement.src = scriptUri;
        scriptElement.async = true;
        main_merge(main_fromEvent(scriptElement, "load").pipe(main_tap(() => resolve(scriptElement))), main_fromEvent(scriptElement, "error").pipe(main_tap((e) => reject(e))))
            .pipe(main_take(1))
            .subscribe();
        document.body.appendChild(scriptElement);
    });
}
//# sourceMappingURL=loadScript.js.map
;// ./node_modules/@snap/camera-kit/lib/common/typeguards.js
function main_typeguards_isString(value) {
    return typeof value === "string";
}
/**
 * Ensures given value is a safe string.
 *
 * Safe strings allow to prevent CRLF attacks. We use encoding approach inspired by:
 * https://community.veracode.com/s/question/0D53n00007hJJV5CAO/is-cwe-id-117-intended-for-consolelog
 */
function main_isSafeString(value) {
    return main_typeguards_isString(value) && encodeURIComponent(value) === value;
}
function main_isNumber(value) {
    return typeof value === "number";
}
function main_isNotNull(value) {
    return value !== null;
}
function main_isArrayOfType(elementTypeGuard, value) {
    return Array.isArray(value) && value.every((id) => elementTypeGuard(id));
}
function main_isStringArray(value) {
    return main_isArrayOfType(main_typeguards_isString, value);
}
function main_isSafeStringArray(value) {
    return main_isArrayOfType(main_isSafeString, value);
}
/**
 * Guards given value is instance of ArrayBuffer.
 */
function main_isArrayBuffer(value) {
    return value instanceof ArrayBuffer;
}
/**
 * Guards given value is a typed array.
 */
function main_isTypedArray(value) {
    return value instanceof Object.getPrototypeOf(Uint8Array);
}
/**
 * Guards given object is not undefined.
 */
function main_isUndefined(value) {
    return typeof value === "undefined";
}
/**
 * Narrow an unknown type to a Record (i.e. a non-null JS object). This holds true for class instances, not just
 * plain objects.
 */
function main_typeguards_isRecord(value) {
    return typeof value === "object" && value !== null && !Array.isArray(value);
}
/**
 * Check if the value is an arbitrary function
 */
function main_typeguards_isFunction(value) {
    return typeof value === "function";
}
/**
 * Apply a given type predicate asserting values are of type T to each value in a Record.
 *
 * @param predicate Any unary type predicate
 * @returns A type predicate which takes an UnknownRecord and tests that all its values are of type T
 */
function main_typeguards_predicateRecordValues(predicate) {
    return (value) => {
        for (const v of Object.values(value))
            if (!predicate(v))
                return false;
        return true;
    };
}
/**
 * Checks whether given value is undefined or a safe URL string.
 *
 * The function checks whether given string is a valid URL with https: protocol.
 *
 * @param urlString URL string to check.
 * @returns True if URL is valid.
 */
function main_isEmptyOrSafeUrl(urlString) {
    if (!urlString)
        return true;
    try {
        const url = new URL(urlString);
        return url.protocol === "https:" || url.protocol === "http:";
    }
    catch (_a) {
        return false;
    }
}
//# sourceMappingURL=typeguards.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/debugHandler.js


/**
 * Addes cookies to auth requests to custom LensCore binaries
 * when there are debugging overrides.
 *
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createDebugHandler = () => {
    var _a;
    const noCustomWasmEndpoint = !((_a = main_getConfigurationOverrides()) === null || _a === void 0 ? void 0 : _a.wasmEndpointOverride);
    if (noCustomWasmEndpoint) {
        return (next) => next;
    }
    return (next) => (input, init) => {
        var _a;
        const url = main_typeguards_isString(input) ? input : (_a = input === null || input === void 0 ? void 0 : input.url) !== null && _a !== void 0 ? _a : "";
        // if requests are made to internal LensCore binaries site
        // we have to include cookies for auth purposes
        // as per https://wiki.sc-corp.net/x/KsnRCg
        if (url.startsWith("https://lens-core-wasm.sc-corp.net/")) {
            return next(input, Object.assign(Object.assign({}, init), { credentials: "include" }));
        }
        return next(input, init);
    };
};
//# sourceMappingURL=debugHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/HandlerChainBuilder.js
/**
 * Creates a Handler chain – a series of functions composed such that each function may call a supplied `next` function
 * which passes execution down the chain. When the final Handler in the chain returns, execution passes back up the
 * chain eventually returning to the caller.
 *
 * Each Handler chain begins with a "raw" Handler – this is a function which takes some request and returns some
 * response. A chain is then created by supplying a series of mapping functions – the ChainableHandler type – which will
 * be called with the `next` Handler in the chain.
 *
 * Ex:
 * ```ts
 * const handler = (request: string, metadata?: RequestMetadata) => Promise.resolve(`Responded to ${request}`)
 * const chainable = (next: Handler<string, string>) => (request: string, metadata?: RequestMetadata) => {
 *   return next(`modified ${request}`, metadata)
 * }
 *
 * const chain = new HandlerChainBuilder(handler)
 *   .map(chainable)
 *   .handler
 *
 * const response = await chain('hello')
 * expect(response).toBe('Responded to modified hello; 0')
 * ```
 * You can largely ignore the `metadata` argument present in the above example. This is the mechanism by which an
 * AbortSignal is passed to each Handler in the chain, but the only real requirement when implementing a Handler is
 * to pass this argument along to the `next` function. In fact, many Handlers will want to be generic over the type
 * of metadata:
 * ```ts
 * const chainable = <Meta>(next: Handler<string, string, Meta>) => (request: string, metadata: Meta) => {
 *   return next(`modified ${request}`, metadata)
 * }
 * ```
 * Actually, it's a very good idea for Handlers to be as generic as possible, since that will allow greater re-use. In
 * the above example, we don't do anything with the response from `next`, so we can let that be generic, too:
 * ```ts
 * const chainable = <Res, Meta>(next: Handler<string, Res, Meta>) => (request: string, metadata: Meta) => {
 *   return next(`modified ${request}`, metadata)
 * }
 * ```
 * Now if some other Handler in the chain decides to return a different response type, our Handler won't require any
 * changes to compile.
 *
 * ---
 *
 * Since execution passes from handler to handler in the chain, and then back, handlers have the opportunity to modify
 * or observe both the request and response. This might be useful for implementing serialization/deserialization, but
 * the simplest example that demonstrates this feature is measuring request latency:
 * ```ts
 * const latencyMeasuringHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) =>
 *   async (req: Req, metadata: Meta) => {
 *     const start = performance.now()
 *     const response = await next(req, metadata)
 *     const latency = performance.now() - start
 *     console.log(`latency for request ${request} was ${latency}`)
 *     return response
 *   }
 * ```
 * Execution is first passed to our measuring handler, which marks the `start` timestamp. Then it passes execution on
 * down the chain. After a response is received (by some handler down the chain), execution passes back up to our
 * handler here, which records the amount of time spent inside `next`.
 *
 * ---
 *
 * Handlers may also abort requests. They can do this in two ways:
 *   1. Create an `AbortController` and add its `AbortSignal` to the `metadata` object when calling `next`.
 *   2. Resolve its returned Promise.
 *
 * The first approach is straightforward, but the second may benefit from an example – the simplest is a handler which
 * will timeout a request:
 * ```ts
 * const timeoutHandler = <Req, Res, Meta>(next: Handler<Req, Res, Meta>) => (req: Req, metadata: Meta) => {
 *   return Promise.race([
 *     next(req, metadata),
 *     sleep(1000),
 *   ])
 * }
 * ```
 * The Promise returned by this handler will resolve either when the `next` handler resolves or 1 second has elapsed,
 * whichever happens first. If the timeout happens first, we want the `next` handler to recieve an abort signal so that
 * it can terminate early (since its result is no longer needed).
 *
 * HandlerChainBuilder makes this happen by observing when each handler completes, and sending an abort signal to all
 * the handlers "downstream" from the aborting handler.
 */
class main_HandlerChainBuilder {
    constructor(inner) {
        // The TS compiler has the following behavior:
        //
        // class Infer<T extends SomeType | undefined> { constructor(f: (t?: T) => void) {} }
        // const f = (t?: SomeType) => {}
        // const i = new Infer(f)
        //
        // The type of `i` is inferred to be `Infer<SomeType>` instead of `Infer<SomeType | undefined>`, even though the
        // type of `f`'s argument is `SomeType | undefined`. This seems to be a bug in type inference. Note that making
        // the constructor argument required gives the expected behavior:
        //
        // class Infer<T extends SomeType | undefined> { constructor(f: (t: T) => void) {} }
        // const f = (t?: SomeType) => {}
        // const i = new Infer(f)
        //
        // Now `i` is inferred to be `Infer<SomeType | undefined>`.
        //
        // This has consequences if the inferred type T is used elsewhere in the class.
        //
        // In this case, we need to make sure that if the given `inner` function marks the metadata argument as
        // optional, that HandlerChainBuilder correctly infers that the Meta type includes undefined. So we don't mark
        // metadata as optional, and so we must cast to `Handler` (which does mark it as optional).
        //
        // Safety: We're adding `| undefined` to the metadata type, which may be unsafe – `undefined` may not be
        // assignable to Meta. But when handling the argument of type Meta, we simply pass it through from handler to
        // handler – we never call `inner` without passing the metadata argument we've received from some call to an
        // outer handler. The typing visible to callers remains safe.
        this.inner = inner;
    }
    get handler() {
        return this.inner;
    }
    map(outer) {
        // To create the next handler in the chain, we compose the "outer" handler with the "inner" handler.
        //
        // The outer handler observes its own completion and sends an abort signal to the inner handler when it has
        // resolved. To prevent unexpected behavior, the inner handler also observes its own completion, setting a flag
        // when it resolves so that – if it resolves before the outer handler – the outer handler can skip sending the
        // abort signal (since the inner handler has already completed).
        const outerHandler = (req, metadata) => {
            var _a;
            const abort = new AbortController();
            const signal = abort.signal;
            // It's important to not signal an abort to an inner handler which has already completed – it seems like
            // this would be a non-issue (shouldn't aborting after completion be a no-op?), but specifically for the
            // browser's implementation of `fetch`, aborting even after the `fetch` Promise resolves can cause an abort
            // error if e.g. the Fetch Response's body has not yet been read.
            //
            // So, for safety, we will only abort inner handlers which are still executing.
            let innerCompleted = false;
            const maybeAbort = () => {
                var _a;
                // Safety: we never give `abort` to anyone else, so we know if the signal is aborted, this function
                // has already run, so we can return early without fear of leaking. We also know if inner has completed,
                // it has already performed cleanup.
                if (signal.aborted || innerCompleted)
                    return;
                // If we've gotten here, the outer handler has either completed, or we heard an abort event while the
                // inner handler is still executing – so we pass the abort signal down to the inner handler.
                abort.abort();
                (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
            };
            (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.addEventListener("abort", maybeAbort);
            const innerHandler = new Proxy(this.inner, {
                apply: (target, thisArg, args) => {
                    const [req, metadata] = args;
                    // When calling the inner handler, we may not care about the result and don't want the handler's
                    // operation to be interrupted by an abort signal. For example, we might be calling the inner
                    // handler as a side-effect which we want to continue after the outer handler has completed.
                    //
                    // In this cases, we'll treat the inner handler as having completed immediately -- as far as the
                    // outer handler is concerned, the inner handler is a no-op. This means that when the outer handler
                    // completes, `maybeAbort` will not send an abort signal to the inner handler.
                    //
                    // A concrete example: returning a value from cache immediately, but then calling the inner handler
                    // as a side-effect to refresh the cache "in the background."
                    if (metadata === null || metadata === void 0 ? void 0 : metadata.isSideEffect)
                        innerCompleted = true;
                    // To help Handler authors out, we'll do some bookkeeping and cleanup for them – if they forget to
                    // remove an abort event listener, we'll remove it for them when the Promise they return resolves.
                    // Note: No need to proxy removeEventListener, since removing a non-existent listener just no-ops.
                    const abortListeners = [];
                    signal.addEventListener = new Proxy(signal.addEventListener, {
                        apply: (target, thisArg, args) => {
                            abortListeners.push(args[1]);
                            return Reflect.apply(target, thisArg, args);
                        },
                    });
                    const cleanupAndMarkComplete = () => {
                        var _a;
                        // The only reason we listen to upstream aborts is to pass them to the inner handler – since the
                        // inner handler has completed, we no longer need the listener.
                        (_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.removeEventListener("abort", maybeAbort);
                        abortListeners.forEach((listener) => signal.removeEventListener("abort", listener));
                        innerCompleted = true;
                    };
                    const innerResponse = Reflect.apply(target, thisArg, [
                        req,
                        Object.assign(Object.assign({}, metadata), { isSideEffect: false, signal }),
                    ]);
                    // Using `finally` is more idiomatic, but causes trouble in some environments (e.g. some testing
                    // runtimes which detect uncaught rejected promises).
                    innerResponse.catch(() => { }).then(cleanupAndMarkComplete);
                    return innerResponse;
                },
            });
            const outerResponse = outer(innerHandler)(req, metadata);
            outerResponse.catch(() => { }).then(maybeAbort);
            return outerResponse;
        };
        return new main_HandlerChainBuilder(outerHandler);
    }
}
//# sourceMappingURL=HandlerChainBuilder.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js

var main_ObjectUnsubscribedError = main_createErrorClass(function (_super) {
    return function ObjectUnsubscribedErrorImpl() {
        _super(this);
        this.name = 'ObjectUnsubscribedError';
        this.message = 'object unsubscribed';
    };
});
//# sourceMappingURL=ObjectUnsubscribedError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Subject.js






var main_Subject = (function (_super) {
    main_extends(Subject, _super);
    function Subject() {
        var _this = _super.call(this) || this;
        _this.closed = false;
        _this.currentObservers = null;
        _this.observers = [];
        _this.isStopped = false;
        _this.hasError = false;
        _this.thrownError = null;
        return _this;
    }
    Subject.prototype.lift = function (operator) {
        var subject = new main_AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    };
    Subject.prototype._throwIfClosed = function () {
        if (this.closed) {
            throw new main_ObjectUnsubscribedError();
        }
    };
    Subject.prototype.next = function (value) {
        var _this = this;
        main_errorContext(function () {
            var e_1, _a;
            _this._throwIfClosed();
            if (!_this.isStopped) {
                if (!_this.currentObservers) {
                    _this.currentObservers = Array.from(_this.observers);
                }
                try {
                    for (var _b = main_values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var observer = _c.value;
                        observer.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        });
    };
    Subject.prototype.error = function (err) {
        var _this = this;
        main_errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.hasError = _this.isStopped = true;
                _this.thrownError = err;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().error(err);
                }
            }
        });
    };
    Subject.prototype.complete = function () {
        var _this = this;
        main_errorContext(function () {
            _this._throwIfClosed();
            if (!_this.isStopped) {
                _this.isStopped = true;
                var observers = _this.observers;
                while (observers.length) {
                    observers.shift().complete();
                }
            }
        });
    };
    Subject.prototype.unsubscribe = function () {
        this.isStopped = this.closed = true;
        this.observers = this.currentObservers = null;
    };
    Object.defineProperty(Subject.prototype, "observed", {
        get: function () {
            var _a;
            return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
        },
        enumerable: false,
        configurable: true
    });
    Subject.prototype._trySubscribe = function (subscriber) {
        this._throwIfClosed();
        return _super.prototype._trySubscribe.call(this, subscriber);
    };
    Subject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._checkFinalizedStatuses(subscriber);
        return this._innerSubscribe(subscriber);
    };
    Subject.prototype._innerSubscribe = function (subscriber) {
        var _this = this;
        var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
        if (hasError || isStopped) {
            return main_EMPTY_SUBSCRIPTION;
        }
        this.currentObservers = null;
        observers.push(subscriber);
        return new main_Subscription(function () {
            _this.currentObservers = null;
            main_arrRemove(observers, subscriber);
        });
    };
    Subject.prototype._checkFinalizedStatuses = function (subscriber) {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
        if (hasError) {
            subscriber.error(thrownError);
        }
        else if (isStopped) {
            subscriber.complete();
        }
    };
    Subject.prototype.asObservable = function () {
        var observable = new main_Observable_Observable();
        observable.source = this;
        return observable;
    };
    Subject.create = function (destination, source) {
        return new main_AnonymousSubject(destination, source);
    };
    return Subject;
}(main_Observable_Observable));

var main_AnonymousSubject = (function (_super) {
    main_extends(AnonymousSubject, _super);
    function AnonymousSubject(destination, source) {
        var _this = _super.call(this) || this;
        _this.destination = destination;
        _this.source = source;
        return _this;
    }
    AnonymousSubject.prototype.next = function (value) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
    };
    AnonymousSubject.prototype.error = function (err) {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
    };
    AnonymousSubject.prototype.complete = function () {
        var _a, _b;
        (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
    };
    AnonymousSubject.prototype._subscribe = function (subscriber) {
        var _a, _b;
        return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : main_EMPTY_SUBSCRIPTION;
    };
    return AnonymousSubject;
}(main_Subject));

//# sourceMappingURL=Subject.js.map
;// ./node_modules/@snap/camera-kit/lib/common/entries.js
// `Object.entries` does not use `keyof` types, so it loses type specificity. We'll fix this with a wrapper.
const main_entries = (o) => Object.entries(o);
// `Object.fromEntries` similarly does not preserve key types.
const main_fromEntries = (entries) => Object.fromEntries(entries);
//# sourceMappingURL=entries.js.map
;// ./node_modules/@snap/camera-kit/lib/logger/logger.js


/**
 * A reference to the recently created log messages subject.
 * The subject is overridden in resetLogger() method, which is called during CameraKit bootstrapping.
 */
let main_logEntriesSubject = new main_Subject();
/**
 * This map associates log level names with their corresponding level value.
 * This means that a configured log level will match all log entries with a level value greater than
 * or equal to the configured value.
 */
const main_logLevelMap = {
    error: 3,
    warn: 2,
    log: 1,
    info: 1,
    debug: 0,
};
/**
 * Initializes a new logger subject.
 *
 * Note: currently only one `CameraKit` instance is allowed to listen to log messages at a time, therefore that is
 * necessary to avoid sharing the same subject between multiple `CameraKit` instances by calling`resetLogger()`.
 * Also, `resetLogger()` should be called when there is no interest in logged messages.
 * This allows the previous logEntriesSubject to be GCec.
 * @internal
 */
function main_resetLogger() {
    return (main_logEntriesSubject = new main_Subject());
}
/**
 * Gets logger for a given module.
 *
 * @internal
 *
 * @param module Module name.
 * @returns Logger instance.
 */
function main_getLogger(module) {
    return main_entries(main_logLevelMap).reduce((logger, [level]) => {
        logger[level] = (...messages) => {
            main_logEntriesSubject.next({
                time: new Date(),
                module,
                level,
                messages,
            });
        };
        return logger;
    }, {});
}
//# sourceMappingURL=logger.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/retryingHandler.js



const main_logger = main_getLogger("retryingHandler");
const main_logRetry = (responseOrError, sleep) => {
    main_logger.warn(`Retrying handler got failed response:`, responseOrError, `Waited ${sleep} millis, attempting retry now.`);
};
const main_sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const main_randomInRange = (min, max) => Math.round(Math.random() * (max - min) + min);
const main_defaultOptions = {
    backoffMultiple: 3,
    baseSleep: 500,
    maxSleep: 5 * 1000,
    maxRetries: 10,
    // The Response type is very common, so our default predicate special-cases to retry all failed Responses.
    retryPredicate: (responseOrError) => (responseOrError instanceof Response ? !responseOrError.ok : true),
};
/**
 * Returns a cloned instance of Request if the input is of that type, otherwise returns the input unchanged.
 *
 * This is necessary when attempting to retry a request.
 * It is not possible to reuse the same Request instance that has already been sent.
 */
function main_ensureClonedRequest(input) {
    return input instanceof Request ? input.clone() : input;
}
/**
 * Retry requests using an exponential backoff with jitter strategy.
 *
 * More about this approach to retries can be found
 * [here](https://aws.amazon.com/blogs/architecture/exponential-backoff-and-jitter/). This implementation uses the
 * "Decorrelated jitter" algorithm described in that post. This offers a good tradeoff between call volume and latency,
 * and also allows for convenient configurability.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createRetryingHandler = (options = {}) => {
    const definedOptions = main_copyDefinedProperties(options);
    const { backoffMultiple, baseSleep, maxSleep, maxRetries, retryPredicate } = Object.assign(Object.assign({}, main_defaultOptions), definedOptions);
    let retryCount = -1;
    const jitterSleep = (priorSleep) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const nextSleep = Math.min(maxSleep, main_randomInRange(baseSleep, priorSleep * backoffMultiple));
        yield main_sleep(nextSleep);
        return nextSleep;
    });
    const makeRequestAttempt = (next, priorSleep = baseSleep) => (req, metadata) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a, _b;
        retryCount++;
        try {
            const response = yield next(main_ensureClonedRequest(req), metadata);
            if (retryCount < maxRetries && retryPredicate(response, retryCount)) {
                const nextSleep = yield jitterSleep(priorSleep);
                // The request may have been aborted while we were sleeping. In that case, we'll resolve
                // with the failed response. In many cases this will be ignored, because an AbortError has already
                // been returned to the caller of the Handler chain – but this prevents us from doing
                // any extra work, and there may be edge cases where the caller could find the response useful.
                if ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _a === void 0 ? void 0 : _a.aborted)
                    return response;
                main_logRetry(response, nextSleep);
                return makeRequestAttempt(next, nextSleep)(req, metadata);
            }
            return response;
        }
        catch (error) {
            if (!(error instanceof Error)) {
                throw new Error("Invalid type caught by retrying handler. Handlers may only throw Errors. Got " +
                    `${JSON.stringify(error)}`);
            }
            // If the request fails because it was aborted, we assume this was done intentionally and we can stop.
            if (error.name === "AbortError")
                throw error;
            if (retryCount < maxRetries && retryPredicate(error, retryCount)) {
                const nextSleep = yield jitterSleep(priorSleep);
                if ((_b = metadata === null || metadata === void 0 ? void 0 : metadata.signal) === null || _b === void 0 ? void 0 : _b.aborted)
                    throw error;
                main_logRetry(error, nextSleep);
                return makeRequestAttempt(next, nextSleep)(req, metadata);
            }
            // If no retry is to be attempted, return the error to the caller.
            throw error;
        }
    });
    return (next) => makeRequestAttempt(next);
};
//# sourceMappingURL=retryingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/noCorsRetryingFetchHandler.js



const main_noCorsRetryingFetchHandler_logger = main_getLogger("noCorsRetryingFetchHandler");
const main_noCorsRetryingFetchHandler_logRetry = (error) => {
    main_noCorsRetryingFetchHandler_logger.warn(`NoCorsRetrying handler got failed response:`, error, `Retrying request with {mode: "no-cors"}.`);
};
/**
 * Some requests may require a no-cors pre-flight (which are allowed to follow redirects) before they can be
 * successful.
 *
 * An example is a federated identity authentication flow, like OpenID Connect or OAuth. In many such schemes,
 * an unauthenticated request will not include CORs headers. Instead, a redirect to an Identity Provider will be
 * returned. In order follow this redirect, the Fetch request must be made with "no-cors" mode.
 *
 * Once the "no-cors" request is made, redirects are followed resulting in authentication cookies being set on the
 * original domain. Then, the original request can be retried and the server will authenticate the request and set
 * proper CORs headers on the response.
 *
 * Here's an example request flow, in which the page already has cookies for IdentityProvider.com (if that wasn't
 * the case, IdentityProvider.com would prompt the user for credentials and the rest of the flow would be the same):
 *
 * ```
 * WebPage a.com        MyServer b.com    IdentityProvider c.com
 *    |                         |                 |
 * Original request,            |                 |
 * unauthenticated:             |                 |
 *    |------------------------>|                 |
 *    |<--302: c.com, no CORs---|                 |
 *    |                         |                 |
 *    |                         |                 |
 * No CORs headers in           |                 |
 * response. Retry in           |                 |
 * "no-cors" mode:              |                 |
 *    |-----"no-cors" mode----->|                 |
 *    |<--302: c.com, no CORs---|                 |
 *    |                         |                 |
 *    |                         |                 |
 *    |------------------IdP cookies------------->|
 *    |<----------302: b.com?token=foo------------|
 *                              |                 |
 *    |                         |                 |
 *    |----b.com?token=foo----->|                 |
 *    |<-302: b.com, set cookie-|                 |
 *    |                         |                 |
 *    |                         |                 |
 * Retry original request,      |                 |
 * now authenticated:           |                 |
 *    |-----------cookie------->|                 |
 *    |<-----------200----------|                 |
 *                              |                 |
 * ```
 */
const main_createNoCorsRetryingFetchHandler = () => {
    // If concurrent requests are made to the same domain, we only want to perform one "no-cors" request. We assume
    // requests to the same domain will set the same authentication cookies. To support this, we'll store any
    // in-flight "no-cors" retries and re-use them for concurrent requests.
    const noCorsRequests = new Map();
    return (next) => (input, init = {}) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        // `host` includes domain:port, so works for local development. If the input is a relative path, we'll
        // use `location.origin` to resolve into a fully qualified URL (although of course we don't actually
        // anticipate any CORs issues in that case -- but this is cleaner than special-casing).
        let requestKey = typeof input === "string" ? input : input.url;
        try {
            requestKey = new URL(requestKey, location.origin).host;
        }
        catch (_) {
            /* no-op, use the full input URL as the requestKey */
        }
        try {
            // By always attempting the request first, we avoid needing to maintain any state about the validity
            // of the request (e.g. the expiration time for a credential). We just make the request, and if it
            // fails, this tells us we've made an invalid request. This does result in one additional request, but
            // it makes this much more flexible and avoids having to maintain state (which can be a source of bugs).
            return yield next(main_ensureClonedRequest(input), init);
        }
        catch (error) {
            // If the request fails because it was aborted, we assume this was done intentionally and we can stop.
            if (error instanceof Error && error.name === "AbortError")
                throw error;
            // Otherwise we don't actually care what error occurred – we know this will be an error thrown by
            // `fetch` itself (rather than some error encountered on the server, which wouldn't cause `next` to
            // throw), and we'll just assume it's a CORs error. If it's not, we'll perform a "no-cors" retry anyway,
            // which will presumably also fail, and that failure will be returned to the caller.
            main_noCorsRetryingFetchHandler_logRetry(error);
            const noCorsRequest = (_a = noCorsRequests.get(requestKey)) !== null && _a !== void 0 ? _a : next(main_ensureClonedRequest(input), Object.assign(Object.assign({}, init), { mode: "no-cors" }));
            noCorsRequests.set(requestKey, noCorsRequest);
            yield noCorsRequest;
            noCorsRequests.delete(requestKey);
            return next(main_ensureClonedRequest(input), init);
        }
    });
};
//# sourceMappingURL=noCorsRetryingFetchHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/timeoutHandler.js


const main_timeoutHandler_sleep = (millis) => new Promise((resolve) => setTimeout(resolve, millis));
const main_timeoutHandler_defaultOptions = {
    createError: (request) => {
        // The string and Request types are very common, so our default error creator special-cases those types to
        // provide better error messages.
        const destination = main_typeguards_isString(request)
            ? `for ${request}`
            : request instanceof Request
                ? `for ${request.url}`
                : "";
        return new Error(`Request ${destination} timed out by client timeout handler.`);
    },
    timeout: 30 * 1000,
};
/**
 * Timeout requests after a given number of milliseconds, rejecting the Response promise with a custom error.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createTimeoutHandler = (options = {}) => {
    const definedOptions = main_copyDefinedProperties(options);
    const { createError, timeout } = Object.assign(Object.assign({}, main_timeoutHandler_defaultOptions), definedOptions);
    // If the timeout Promise wins the race, the HandlerChainBuilder sets the abort signal for subsequent handlers. They
    // may look at the abort signal in order to terminate themselves early.
    return (next) => (req, meta) => Promise.race([next(req, meta), main_timeoutHandler_sleep(timeout).then(() => Promise.reject(createError(req, meta)))]);
};
//# sourceMappingURL=timeoutHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/defaultFetchHandler.js






/**
 * The default Fetch implementation, used to make a simple HTTP requests without any custom headers. This can be passed
 * to `HandlerChainBuilder` to form the basis for other Fetch implementations (e.g. with custom headers, which extract
 * the Response body, etc.)
 *
 * Has support for retries, client-side timeout, and navigating federated auth flows that may not support CORs requests.
 *
 * @internal
 */
const main_defaultFetchHandlerFactory = main_Injectable("defaultFetchHandler", () => {
    return (new main_HandlerChainBuilder(fetch)
        .map(main_createDebugHandler())
        // The 20-second per-request timeout is pretty arbitrary, it's just set to be longer than our API gateway
        // timeout (15s) and lower than the browsers own timeout (variable, Chrome's is 5m).
        .map(main_createTimeoutHandler({ timeout: 20 * 1000 }))
        .map(main_createNoCorsRetryingFetchHandler())
        .map(main_createRetryingHandler({
        maxRetries: 3,
        retryPredicate: (responseOrError) => {
            // Don't retry successful Responses or Responses with a 4xx HTTP status code (indicating a
            // client error). Do retry all 5xx HTTP status codes.
            if (responseOrError instanceof Response) {
                if (responseOrError.ok)
                    return false;
                if (responseOrError.status % 400 < 100)
                    return false;
            }
            return true;
        },
    })).handler);
});
//# sourceMappingURL=defaultFetchHandler.js.map
;// ./node_modules/wasm-feature-detect/dist/esm/index.js
const main_bigInt=()=>(async e=>{try{return(await WebAssembly.instantiate(e)).instance.exports.b(BigInt(0))===BigInt(0)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,1,126,1,126,3,2,1,0,7,5,1,1,98,0,0,10,6,1,4,0,32,0,11])),main_bulkMemory=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,3,1,0,1,10,14,1,12,0,65,0,65,0,65,0,252,10,0,0,11])),main_exceptions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,6,64,25,11,11])),main_exceptionsFinal=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob("AGFzbQEAAAABBAFgAAADAgEAChABDgACaR9AAQMAAAsACxoL"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})(),main_extendedConst=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,0,1,11,9,1,0,65,1,65,2,106,11,0])),main_gc=()=>(async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,95,1,120,0])))(),main_jsStringBuiltins=()=>(async()=>{try{return await WebAssembly.instantiate(Uint8Array.from(atob("AGFzbQEAAAABBgFgAW8BfwIXAQ53YXNtOmpzLXN0cmluZwR0ZXN0AAA="),(e=>e.codePointAt(0))),{},{builtins:["js-string"]}),!0}catch(e){return!1}})(),main_jspi=()=>(async()=>"Suspending"in WebAssembly)(),main_memory64=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,5,3,1,4,1])),main_multiMemory=()=>(async()=>{try{return new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,5,5,2,0,0,0,0])),!0}catch(e){return!1}})(),main_multiValue=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,6,1,96,0,2,127,127,3,2,1,0,10,8,1,6,0,65,0,65,0,11])),main_mutableGlobals=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,2,8,1,1,97,1,98,3,127,1,6,6,1,127,1,65,0,11,7,5,1,1,97,3,1])),main_referenceTypes=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,7,1,5,0,208,112,26,11])),main_relaxedSimd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,15,1,13,0,65,1,253,15,65,2,253,15,253,128,2,11])),main_saturatedFloatToInt=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,12,1,10,0,67,0,0,0,0,252,0,26,11])),main_signExtensions=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,8,1,6,0,65,0,192,26,11])),main_simd=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),main_streamingCompilation=()=>(async()=>"compileStreaming"in WebAssembly)(),main_tailCall=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,6,1,4,0,18,0,11])),main_threads=()=>(async e=>{try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(e)}catch(e){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])),main_typeReflection=()=>(async()=>"Function"in WebAssembly)(),main_typedFunctionReferences=()=>(async()=>{try{return new WebAssembly.Module(Uint8Array.from(atob("AGFzbQEAAAABEANgAX8Bf2ABZAABf2AAAX8DBAMBAAIJBQEDAAEBChwDCwBBCkEqIAAUAGoLBwAgAEEBagsGANIBEAAL"),(e=>e.codePointAt(0)))),!0}catch(e){return!1}})();

;// ./node_modules/@snap/camera-kit/lib/common/memoize.js
function main_isMemoized(fn) {
    return typeof fn === "function" && typeof fn.delegate === "function";
}
function main_memoize(delegate) {
    let memo;
    const memoized = (...args) => {
        if (typeof memo !== "undefined")
            return memo;
        memo = delegate(...args);
        return memo;
    };
    memoized.delegate = delegate;
    return memoized;
}
//# sourceMappingURL=memoize.js.map
;// ./node_modules/@snap/camera-kit/lib/namedErrors.js
// NOTE: All errors thrown in the CameraKit package have to be defined here.
// Error types are not infered from error factories for API doc purposes and consistency.
/**
 * Removes the top trace line from the stack.
 */
function main_cleanErrorStack(stack) {
    const [first, _, ...rest] = stack.split("\n");
    return [first, ...rest].join("\n");
}
/**
 * Creates error factory that ensures Error.prototype.name field value.
 *
 * NOTE: exported only for unit tests.
 *
 * @param name Error name.
 * @returns Error factory function.
 * @internal
 */
function main_namedError(name) {
    return (message, cause) => {
        const error = new Error(message, { cause });
        error.name = name;
        error.stack = error.stack && main_cleanErrorStack(error.stack);
        // Safety: we set name above and therefore sure the type of error is correct
        return error;
    };
}
/** @internal */
const main_legalError = main_namedError("LegalError");
/** @internal */
const main_lensContentValidationError = main_namedError("LensContentValidationError");
/** @internal */
const main_lensError = main_namedError("LensError");
/** @internal */
const main_cameraKitSourceError = main_namedError("CameraKitSourceError");
/** @internal */
const main_lensImagePickerError = main_namedError("LensImagePickerError");
/** @internal */
const main_cacheKeyNotFoundError = main_namedError("CacheKeyNotFoundError");
/** @internal */
const main_configurationError = main_namedError("ConfigurationError");
/** @internal */
const main_namedErrors_webGLError = main_namedError("WebGLError");
/** @internal */
const main_namedErrors_benchmarkError = main_namedError("BenchmarkError");
/** @internal */
const main_platformNotSupportedError = main_namedError("PlatformNotSupportedError");
/** @internal */
const main_lensExecutionError = main_namedError("LensExecutionError");
/** @internal */
const main_lensAbortError = main_namedError("LensAbortError");
/** @internal */
const main_persistentStoreError = main_namedError("PersistentStoreError");
/** @internal */
const main_lensAssetError = main_namedError("LensAssetError");
/** @internal */
const main_bootstrapError = main_namedError("BootstrapError");
//# sourceMappingURL=namedErrors.js.map
;// ./node_modules/@snap/camera-kit/lib/environment.json
const main_environment_namespaceObject = /*#__PURE__*/JSON.parse('{"i":"0.15.1-alpha.1"}');
;// ./node_modules/@snap/camera-kit/lib/platform/platformInfo.js




/**
 * Some user agents may not properly implement the NavigatorUAData interface, so we have to do our own validation here
 * to make sure we're dealing with a well-formed value.
 */
function main_isNavigatorUAData(value) {
    return (main_typeguards_isRecord(value) &&
        Array.isArray(value["brands"]) &&
        value["brands"].every((brand) => {
            return main_typeguards_isRecord(brand) && typeof brand["brand"] === "string" && typeof brand["version"] === "string";
        }) &&
        typeof value["mobile"] === "boolean" &&
        typeof value["platform"] === "string");
}
/**
 * In the future, we may invest in more robust device-detection (e.g. a UA string database), but for now this will give
 * us some sense of device usage.
 */
function main_parseDeviceModel(userAgent) {
    // from user agent like "(Linux; Android 11; Pixel 2)" extact "Pixel 2"
    const userAgentWithModel = userAgent.match(/;[^;]+?;([^\)]+?)\)/);
    if (userAgentWithModel) {
        return userAgentWithModel[1].trim();
    }
    // from user agent like "... (iPad; CPU OS 15_1 like Mac OS X) ..." extract "iPad"
    const userAgentWithModel2 = userAgent.match(/\(([^;]+);/);
    if (userAgentWithModel2) {
        return userAgentWithModel2[1].trim();
    }
    return "unknown";
}
/**
 * The origin may be useful to identify the running application (e.g. to attribute metrics).
 *
 * We need to handle cases in which we run inside a child browsing context (e.g. an iframe), which may not have a
 * hostname – in this case we'll check each ancestor context until we find a valid hostname.
 */
function main_parseOrigin() {
    var _a, _b, _c;
    if (location.hostname !== "")
        return location.hostname;
    // Firefox does not implement ancestorOrigins, so we need a fallback.
    // Context here: https://github.com/whatwg/html/issues/1918
    const possibleOrigins = location.ancestorOrigins === undefined && typeof window !== "undefined"
        ? [window.parent.origin, (_b = (_a = window.top) === null || _a === void 0 ? void 0 : _a.origin) !== null && _b !== void 0 ? _b : ""]
        : (_c = location.ancestorOrigins) !== null && _c !== void 0 ? _c : [];
    for (let origin of possibleOrigins) {
        try {
            origin = new URL(origin).hostname;
            if (origin)
                return origin;
        }
        catch (_) { }
    }
    return "unknown";
}
function main_parseOSName(userAgent) {
    const knownPlatforms = new Map([
        ["android", "android"],
        ["linux", "linux"],
        ["iphone os", "ios"],
        ["ipad", "ipados"],
        ["mac os", "macos"],
        ["macos", "macos"],
        ["windows", "windows"],
    ]);
    const normalizedUserAgent = userAgent.toLowerCase();
    for (const [match, platform] of knownPlatforms.entries()) {
        if (normalizedUserAgent.includes(match))
            return platform;
    }
    return "unknown";
}
/**
 * Parse the OS (a.k.a. platform) version.
 *
 * From limited testing, this seems to often produce incorrect results – the userAgent string does not typically include
 * the actual OS version.
 *
 * Better results could be obtained from [NavigatorUAData.getHighEntropyValues]
 * (https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData/getHighEntropyValues), but this presents two
 * problems: 1) it's currently only supported on Chrome and 2) browsers may prompt the user for permission to share
 * this information.
 *
 * So, at least for now, we'll be satisfied with the incorrect version number.
 */
function main_parseOSVersion(userAgent) {
    // possible platform version values inside of user agent string
    // " 11;"
    // " 10_15_7)"
    // " 13_5_1 "
    // " 10.0;"
    // " 15_1 "
    const versionMatch = userAgent.match(/\s([\d][\d_.]*[\d])(;|\)|\s)/);
    if (versionMatch != null) {
        return versionMatch[1].replace(/_/g, ".");
    }
    return "";
}
/**
 * Some browsers (e.g. Safari) do not support the `Navigator.userAgentData` API. We'll attempt a sort of polyfill by
 * parsing the data found in [NavigatorUAData](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData) from
 * the raw user agent string.
 */
function main_parseUserAgentData(userAgent) {
    let brand;
    // Parse UA string for Chromium-based browsers (e.g. Chrome, Edge)
    if (/Chrome/.test(userAgent)) {
        const versionMatch = userAgent.match(/Chrome\/([\d.]+)/);
        brand = {
            brand: "Chrome",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    // Parse UA string for Safari (very important for this to only be done if Chrome is not found – Chrome userAgent
    // strings will contain "Safari")
    else if (/Safari/.test(userAgent)) {
        let versionMatch = userAgent.match(/Version\/([\d.]+)/);
        if (versionMatch === null)
            versionMatch = userAgent.match(/Safari\/([\d.]+)/);
        brand = {
            brand: "Safari",
            version: versionMatch !== null ? versionMatch[1] : "unknown",
        };
    }
    // Parse UA for unknown browser.
    // TODO: will be changed, default value support should be added on a COF server side.
    else {
        brand = {
            brand: "Firefox",
            version: "0",
        };
    }
    // We're not using `mobile` for anything, and we have no consistent way to determine this from the UA string.
    // We'll set it to false, but this should not be used – instead, we'll need to rely on more sophisticated methods
    // (e.g. a userAgent database) to determine actual device.
    const mobile = false;
    const platform = main_parseOSName(userAgent);
    return {
        brands: [brand],
        mobile,
        platform,
    };
}
function main_normalizeBrands(brands) {
    const knownBrands = new Map([
        ["Google Chrome", "Chrome"],
        ["Chrome", "Chrome"],
        ["Chromium", "Chrome"],
        ["Firefox", "Firefox"],
        ["Microsoft Edge", "Chrome"],
        ["Safari", "Safari"],
    ]);
    const normalizedBrands = brands
        .filter(({ brand }) => knownBrands.has(brand))
        .map((brand) => {
        return {
            // Safety: we've filtered out brands which do not appear as keys in `knownBrands`, so this cannot return
            // undefined.
            brand: knownBrands.get(brand.brand),
            version: brand.version,
        };
    });
    // TODO: default "unknown" value should be added on COF server side. For now we'll use Firefox.
    if (normalizedBrands.length === 0)
        return [{ brand: "Firefox", version: "0" }];
    return normalizedBrands;
}
/* eslint-disable max-len */
/**
 * We must ensure the data we get from `navigator.userAgentData` is normalized to match what our backend expects to
 * see in our custom CameraKitWeb userAgent string.
 *
 * This string is defined here:
 * https://github.sc-corp.net/Snapchat/useragent/blob/9333afe7cc6ac00503ad46cb234bcf94006dff98/java/useragent/src/main/java/snapchat/client/UserAgent.java#L124
 */
/* eslint-enable */
function main_normalizeUserAgentData(userAgentData) {
    return {
        brands: main_normalizeBrands(userAgentData.brands),
        mobile: userAgentData.mobile,
        platform: main_parseOSName(userAgentData.platform),
    };
}
/** @internal */
const main_getPlatformInfo = main_memoize(function getPlatformIno() {
    var _a, _b, _c;
    // [NavigatorUAData](https://developer.mozilla.org/en-US/docs/Web/API/NavigatorUAData) is currently only
    // available on Chromium-based browsers – it's nice because it gives us clear, well-documented information. But
    // we'll have to fallback to parsing the userAgent string when it's not available.
    const userAgent = navigator.userAgent;
    const userAgentData = main_isNavigatorUAData(navigator.userAgentData)
        ? main_normalizeUserAgentData(navigator.userAgentData)
        : main_parseUserAgentData(userAgent);
    const osVersion = main_parseOSVersion(userAgent);
    const deviceModel = main_parseDeviceModel(userAgent);
    // Remove any `-prerelease` or `+buildmetadata` portions from the semver string.
    const sdkShortVersion = main_environment_namespaceObject.i.replace(/[-+]\S+$/, "");
    const locale = navigator.language;
    // The full locale string includes all the languages with qvalues -- this is needed for some API calls.
    // More on qvalues: https://developer.mozilla.org/en-US/docs/Glossary/Quality_values
    const fullLocale = ((_a = navigator.languages) !== null && _a !== void 0 ? _a : [])
        .map((lang, index) => {
        const qvalue = Math.max(0, (10 - index) / 10);
        return `${lang};q=${qvalue.toFixed(1)}`;
    })
        .join(", ") || locale;
    return {
        sdkShortVersion,
        sdkLongVersion: main_environment_namespaceObject.i,
        lensCore: main_lensCoreWasmVersions_namespaceObject,
        // In cases where we've parsed the userAgent string to find the brand, there will only ever be a single brand –
        // in browsers which support NavigatorUAData there could be more than one (e.g. Chrome and Chromium), but they
        // should be equivalent for our purposes -- either way we're okay just picking the first one.
        browser: userAgentData.brands[0],
        osName: userAgentData.platform,
        osVersion,
        deviceModel,
        locale,
        fullLocale,
        origin: main_parseOrigin(),
        connectionType: (_c = (_b = navigator.connection) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : "unknown",
    };
});
//# sourceMappingURL=platformInfo.js.map
;// ./node_modules/@snap/camera-kit/lib/platform/platformCapabilities.js





// This required minimum max texture size is based on data from
// https://web3dsurvey.com/webgl/parameters/MAX_TEXTURE_SIZE. Checking for a reasonable minimum MAX_TEXTURE_SIZE avoids
// attempting to run lenses on platforms that will not support them -- most commonly, we've seen some platforms that
// report 0 MAX_TEXTURE_SIZE, which will cause errors for all lenses.
const main_minRequiredMaxTextureSize = 1024;
/**
 * @returns An object with fields describing support for various WebGL features.
 *
 * @internal
 */
function main_getWebGlSupport() {
    var _a;
    const ctx = (_a = globalThis.document) === null || _a === void 0 ? void 0 : _a.createElement("canvas").getContext("webgl2");
    if (!ctx)
        return {
            supported: false,
            error: main_platformNotSupportedError("CameraKit requires WebGL2, but this browser does not support WebGL2."),
        };
    const maxTextureSize = ctx.getParameter(ctx.MAX_TEXTURE_SIZE);
    const supported = maxTextureSize >= main_minRequiredMaxTextureSize;
    return supported
        ? { supported, maxTextureSize }
        : {
            supported,
            error: main_platformNotSupportedError(`CameraKit requires WebGL's MAX_TEXTURE_SIZE exceed a minimum value of ` +
                `${main_minRequiredMaxTextureSize}, but the browser's reported MAX_TEXTURE_SIZE is ${maxTextureSize}.`),
        };
}
/**
 * Because there may be a large number of WASM-related capabilities, and because these may correspond to various builds
 * of LensCore, we encode the various WASM capabilities into a single number by bitwise OR-ing together the numbers
 * corresponding to each capability.
 *
 * Since each combindation of capabilities is represented by a single number, we can easily map between that number and
 * the corresponding LensCore build name that makes use of those capabilities.
 *
 * @internal
 */
var main_WasmFeatures;
(function (WasmFeatures) {
    WasmFeatures[WasmFeatures["Default"] = 0] = "Default";
    WasmFeatures[WasmFeatures["SIMD"] = 1] = "SIMD";
    WasmFeatures[WasmFeatures["ExceptionHandling"] = 2] = "ExceptionHandling";
})(main_WasmFeatures || (main_WasmFeatures = {}));
/**
 * @returns A non-negative integer representing the combination of supported WebAssembly features, or -1 if WebAssembly
 * is not supported at all.
 *
 * @internal
 */
function main_getWebAssemblyCapabilities() {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        if (globalThis.WebAssembly === undefined)
            return {
                supported: false,
                error: main_platformNotSupportedError("CameraKit requires WebAssembly, but this browser does not support WebAssembly."),
            };
        return {
            supported: true,
            wasmFeatures: (yield Promise.all([
                main_simd().then((supported) => {
                    // Although Safari 16.4 reports SIMD support, LensCore encounters rendering bugs when using
                    // SIMD in Safari 16.4. We will disable SIMD for now until Safari stabilizes the feature.
                    if (main_getPlatformInfo().browser.brand === "Safari")
                        return main_WasmFeatures.Default;
                    return supported ? main_WasmFeatures.SIMD : main_WasmFeatures.Default;
                }),
                main_exceptions().then((supported) => (supported ? main_WasmFeatures.ExceptionHandling : main_WasmFeatures.Default)),
            ])).reduce((features, feature) => features | feature, main_WasmFeatures.Default),
        };
    });
}
/**
 * @returns A Promise containing an object with fields describing the support of various WebXR features. This object's
 * type is defined by LensCore, as they consume these capabilities and adjust behavior accordingly.
 *
 * @internal
 */
function main_getWebXrCapabilities() {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        const notSupported = {
            supported: false,
            error: main_platformNotSupportedError(`Use of this feature requires WebXR support for immersive AR sessions, but ` +
                `this browser does not support immersive AR sessions.`),
        };
        if (!isSecureContext)
            return notSupported;
        if (!navigator.xr)
            return notSupported;
        const isImmersiveArSupported = yield navigator.xr.isSessionSupported("immersive-ar");
        return isImmersiveArSupported
            ? {
                supported: true,
                sixDofSupported: true,
                sceneDepthSupported: true,
            }
            : notSupported;
    });
}
/**
 * Get information about the current platform capabilities, including:
 * - WebGL support and various WebGL parameters.
 * - WASM support and support for various WASM features.
 * - WebXR support and support for various WebXR features.
 *
 * @internal
 */
const main_getPlatformCapabilities = main_memoize(function getPlatformCapabilities() {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        return {
            webgl: main_getWebGlSupport(),
            wasm: yield main_getWebAssemblyCapabilities(),
            webxr: yield main_getWebXrCapabilities(),
        };
    });
});
//# sourceMappingURL=platformCapabilities.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-core-module/lensCoreError.js
// Construct a map linking each LensCore error name to its value,
// designed to trigger a compile-time error if an error is added or removed in LensCore.
// eslint-disable-next-line max-len
// https://github.sc-corp.net/Snapchat/LensCore/blob/285ac47cad7fe5268f38d1bab82d51b7b19d6b48/Src/PlatformSpecific/WebAssembly/ErrorType.hpp#L4
const main_lensCoreErrorValue = {
    LensDeserialization: 0,
    Validation: 1,
    Uncategorized: 2,
    LensExecution: 3,
    Abort: 4,
    Uninitialized: 5,
};
// The purpose of lensCoreErrorValue above is to safeguard integrity.
// To achieve constant lookup times, we must swap the keys with their corresponding values.
const main_lensCoreErrorName = Object.fromEntries(Object.entries(main_lensCoreErrorValue).map((entry) => [entry[1], entry[0]]));
function main_wrapLensCoreError(fn) {
    const handler = (cause) => {
        var _a;
        const error = new Error(cause.message.split("\n")[0], {
            cause: cause.otherExceptions || ((_a = cause.cause) === null || _a === void 0 ? void 0 : _a.metadata)
                ? {
                    otherExceptions: cause.otherExceptions,
                    metadata: cause.cause.metadata,
                }
                : undefined,
        });
        const name = `LensCore${cause.cause ? main_lensCoreErrorName[cause.cause.type.value] : "Unknown"}Error`;
        error.name = name;
        if (cause.stack) {
            // if cause has a stack, then we just replace the first line of it
            // which is actually a error message with our new one, which also contains new error name
            const [_, ...stackLines] = cause.stack.split("\n");
            if (error.stack) {
                stackLines.unshift(error.stack.split("\n")[0]);
            }
            error.stack = stackLines.join("\n");
        }
        // Safety: we set name above and therefore sure the type of error is correct
        fn(error);
    };
    return handler;
}
//# sourceMappingURL=lensCoreError.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-core-module/lensCore.js

// By using PropertiesOfKind, we can ensure a compile-time error if LensCoreModule adds a new async method,
// but we forget to update this list.
const main_promisifiableMethods = {
    addLens: null,
    clearAllLenses: null,
    imageToYuvBuffer: null,
    pauseCanvas: null,
    processAudioSampleBuffer: null,
    processFrame: null,
    removeLens: null,
    replaceLenses: null,
    setAudioParameters: null,
    setDeviceClass: null,
    setFPSLimit: null,
    setInputTransform: null,
    setOnFrameProcessedCallback: null,
    setRenderLoopMode: null,
    setRenderSize: null,
    teardown: null,
    useMediaElement: null,
    yuvBufferToBitmap: null,
};
const main_createLensCore = (lensCoreModule) => {
    const customMethods = {
        initialize(input) {
            return new Promise((onSuccess, onFailure) => lensCoreModule.initialize(Object.assign(Object.assign({}, input), { exceptionHandler: input.exceptionHandler && main_wrapLensCoreError(input.exceptionHandler), onSuccess, onFailure: main_wrapLensCoreError(onFailure) })));
        },
        provideRemoteAssetsResponse(input) {
            return lensCoreModule.provideRemoteAssetsResponse(Object.assign(Object.assign({}, input), { onFailure: input.onFailure && main_wrapLensCoreError(input.onFailure) }));
        },
        playCanvas(input) {
            return new Promise((onReady, onFailure) => {
                lensCoreModule.playCanvas(Object.assign(Object.assign({}, input), { onReady,
                    onFailure }));
            });
        },
    };
    return new Proxy(lensCoreModule, {
        get: (target, property, receiver) => {
            // Handle special methods with custom implementations
            if (property in customMethods) {
                // Safety: "in" operator above ensures that property is keyof LensCoreCustomMethods
                return customMethods[property];
            }
            // All other async methods return Promises
            if (property in main_promisifiableMethods) {
                const method = Reflect.get(target, property, receiver);
                if (!method)
                    method;
                return (input) => new Promise((onSuccess, onFailure) => method(Object.assign(Object.assign({}, input), { onSuccess, onFailure: main_wrapLensCoreError(onFailure) })));
            }
            // All other kinds of properties (enums, sync methods) are unmodified.
            return Reflect.get(target, property, receiver);
        },
        // Safety: We ensured safety by defining types for both custom and promisifiable methods.
    });
};
//# sourceMappingURL=lensCore.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-core-module/loader/lensCoreFactory.js










const main_lensCoreFactory_logger = main_getLogger("lensCoreFactory");
const main_wasmAssets = ["LensCoreWebAssembly.js", "LensCoreWebAssembly.wasm"];
const main_findMatch = (regex, strings) => strings.find((s) => regex.test(s));
/**
 * Map various combinations of WebAssembly capabilities to the corresponding LensCore build flavours which make use
 * of them.
 */
const main_wasmCapabilitiesToLensCoreBuildFlavor = {
    [main_WasmFeatures.Default]: "release",
    [main_WasmFeatures.ExceptionHandling]: "rel-neh",
    [main_WasmFeatures.SIMD]: "release-simd",
    [main_WasmFeatures.ExceptionHandling | main_WasmFeatures.SIMD]: "rel-simd-neh",
};
/**
 * Returns a list of URLs for resources which will be fetched during {@link bootstrapCameraKit}.
 *
 * When CameraKit is used on a website, these URLs much be reachable in order for CameraKit to be successfully
 * bootstrapped.
 *
 * @param endpointOverride Optional endpoint override to load the assets from.
 * @returns An array of asset URLs.
 *
 * @category Bootstrapping and Configuration
 */
function main_getRequiredBootstrapURLs(endpointOverride) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        // If we have an endpoint override, remove trailing `/` so we can construct a valid URL.
        const endpoint = endpointOverride === null || endpointOverride === void 0 ? void 0 : endpointOverride.replace(/[\/]+$/, "");
        const { wasm } = yield main_getPlatformCapabilities();
        if (!wasm.supported)
            throw wasm.error;
        const { lensCore } = main_getPlatformInfo();
        const flavor = main_wasmCapabilitiesToLensCoreBuildFlavor[wasm.wasmFeatures];
        if (!flavor)
            throw new Error(`Could not determine a LensCore build flavor corresponding to the bitstring ` +
                `${wasm.wasmFeatures.toString(2)}. CameraKit cannot be bootstrapped.`);
        const version = lensCore.version;
        const buildNumber = lensCore.buildNumber;
        return main_wasmAssets.map((asset) => {
            if (endpoint)
                return `${endpoint}/${asset}`;
            const { origin, pathname, search } = new URL(lensCore.baseUrl);
            return `${origin}${pathname}/${version}/${buildNumber}/${flavor}/${asset}${search}`;
        });
    });
}
/**
 * This component is responsible for:
 *   1) Loading LensCore WebAssembly (WASM) assets
 *   2) Using the WASM assets to initialize the LensCore WASM module
 *
 * By default, WASM assets will be loaded from the Bolt CDN – but if `endpoint` is provided, assets will be loaded
 * using it as a base URL.
 *
 * @internal
 */
const main_lensCoreFactory = main_Injectable("lensCore", [main_defaultFetchHandlerFactory.token, main_configurationToken], (handler, { lensCoreOverrideUrls, wasmEndpointOverride }) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    let lensCoreJS;
    let lensCoreWASM;
    if (lensCoreOverrideUrls) {
        lensCoreJS = lensCoreOverrideUrls.js;
        lensCoreWASM = lensCoreOverrideUrls.wasm;
    }
    else {
        const endpointOverride = wasmEndpointOverride !== null && wasmEndpointOverride !== void 0 ? wasmEndpointOverride : undefined;
        const assetURLs = yield main_getRequiredBootstrapURLs(endpointOverride);
        lensCoreJS = (_a = main_findMatch(/\.js/, assetURLs)) !== null && _a !== void 0 ? _a : "";
        lensCoreWASM = (_b = main_findMatch(/\.wasm/, assetURLs)) !== null && _b !== void 0 ? _b : "";
        if (!lensCoreJS || !lensCoreWASM) {
            throw new Error(`Cannot fetch required LensCore assets. Either the JS or WASM filename is missing from ` +
                `this list: ${assetURLs}.`);
        }
        // Fetching here and creating an Object URL lets LensCore optimized loading itself in a WebWorker,
        // otherwise the glue script would need to be downloaded again.
        const glueScript = yield handler(lensCoreJS).then((r) => r.blob());
        lensCoreJS = URL.createObjectURL(glueScript);
    }
    const scriptElement = yield main_loadScript(lensCoreJS);
    const lensCore = yield new Promise((resolve, reject) => {
        let initialModule;
        // will trigger WASM initialization and data loading,
        // after completion it will be safe to call imported WASM functions
        // More about emscripten initialization:
        // eslint-disable-next-line max-len
        // https://emscripten.org/docs/getting_started/FAQ.html?highlight=modularize#how-can-i-tell-when-the-page-is-fully-loaded-and-it-is-safe-to-call-compiled-functions
        const moduleInit = globalThis.createLensesModule((initialModule = {
            // url will be used for loading glue JS during Worker inialization
            mainScriptUrlOrBlob: lensCoreJS,
            // will be triggered by Emscripten during the initialization
            instantiateWasm: (importObject, receiveInstance) => {
                WebAssembly.instantiateStreaming(handler(lensCoreWASM), importObject)
                    .then(function ({ instance, module }) {
                    receiveInstance(instance, module);
                    // compiled module will be reused in Worker
                    initialModule.compiledModule = module;
                    resolve(moduleInit);
                })
                    .catch(reject);
            },
        }));
    });
    // now when we have LensCore WASM in memory we can release the script element
    scriptElement.remove();
    // print warning if loaded version differs from hardcoded one
    if (main_lensCoreWasmVersions_namespaceObject.version != `${lensCore.getCoreVersion()}`) {
        main_lensCoreFactory_logger.warn(`Loaded LensCore version (${lensCore.getCoreVersion()}) differs from expected one (${main_lensCoreWasmVersions_namespaceObject.version})`);
    }
    return main_createLensCore(lensCore);
}));
//# sourceMappingURL=lensCoreFactory.js.map
;// ./node_modules/@snap/camera-kit/lib/benchmark/webglUtils.js

const main_webGLEntityCreationError = (name) => webGLError(`Could not create ${name}.`);
function main_webglUtils_createProgram(gl, vertexSource, fragmentSource) {
    const vertexShader = main_createShader(gl, vertexSource, gl.VERTEX_SHADER);
    const fragmentShader = main_createShader(gl, fragmentSource, gl.FRAGMENT_SHADER);
    const program = gl.createProgram();
    if (!program)
        throw main_webGLEntityCreationError("WebGLProgram");
    gl.attachShader(program, vertexShader);
    gl.deleteShader(vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.deleteShader(fragmentShader);
    gl.linkProgram(program);
    const success = gl.getProgramParameter(program, gl.LINK_STATUS);
    if (!success) {
        const message = gl.getProgramInfoLog(program);
        gl.deleteProgram(program);
        throw webGLError(`WebGLProgram linking failed with status: ${message}.`);
    }
    return program;
}
function main_createShader(gl, source, type) {
    const shader = gl.createShader(type);
    if (!shader)
        throw main_webGLEntityCreationError(`WebGLShader (type ${type})`);
    gl.shaderSource(shader, source);
    gl.compileShader(shader);
    const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    if (!success) {
        const message = gl.getShaderInfoLog(shader);
        gl.deleteShader(shader);
        throw webGLError(`WebGLShader (type ${type}) compilation failed with status: ${message}.`);
    }
    return shader;
}
function main_webglUtils_createTexture(gl, width, height) {
    const texture = gl.createTexture();
    if (!texture)
        throw main_webGLEntityCreationError("WebGLTexture");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
    return texture;
}
function main_webglUtils_createFramebuffer(gl, texture) {
    const framebuffer = gl.createFramebuffer();
    if (!framebuffer)
        throw main_webGLEntityCreationError("WebGLFramebuffer");
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    return framebuffer;
}
function main_webglUtils_setUniform1i(gl, program, name, data) {
    gl.uniform1i(gl.getUniformLocation(program, name), data);
}
function main_webglUtils_setUniform4f(gl, program, name, data) {
    gl.uniform4f(gl.getUniformLocation(program, name), ...data);
}
function main_webglUtils_promiseSync(gl) {
    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    if (!sync)
        throw main_webGLEntityCreationError("WebGLSync");
    gl.flush();
    return new Promise((resolve, reject) => {
        const waitForSync = () => {
            const glEnum = gl.clientWaitSync(sync, 0, 0);
            switch (glEnum) {
                case gl.TIMEOUT_EXPIRED:
                    setTimeout(waitForSync);
                    return;
                case gl.WAIT_FAILED:
                    gl.deleteSync(sync);
                    return reject();
                case gl.ALREADY_SIGNALED:
                case gl.CONDITION_SATISFIED:
                    gl.deleteSync(sync);
                    return resolve();
            }
        };
        waitForSync();
    });
}
//# sourceMappingURL=webglUtils.js.map
;// ./node_modules/@snap/camera-kit/lib/benchmark/benchmarkGflops.js


const main_vertexSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0.0, 1.0);
}
`));
const main_fragmentSource = (/* unused pure expression or super */ null && (`#version 300 es

precision mediump float;
precision mediump int;

uniform int LOOP_COUNT;
uniform vec4 v0;
uniform vec4 v1;
uniform vec4 v2;

out vec4 fragColor;

#define REPEAT_2(x) x; x
#define REPEAT_4(x) REPEAT_2(x); REPEAT_2(x)
#define REPEAT_8(x) REPEAT_4(x); REPEAT_4(x)
#define REPEAT_16(x) REPEAT_8(x); REPEAT_8(x)
#define REPEAT_32(x) REPEAT_16(x); REPEAT_16(x)

void main() {
    vec4 r = v2;
    for (int i = 0; i < LOOP_COUNT; i++) {
        REPEAT_32(r = r * v1 + v0);
    }
    fragColor = r;
}
`));
const main_width = 1024;
const main_height = 1024;
const main_budgetMs = 300;
const main_maxLoopCount = 1000;
function main_prepareBenchmark(gl) {
    const texture = createTexture(gl, main_width, main_height);
    const framebuffer = createFramebuffer(gl, texture);
    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
    const buffer = gl.createBuffer();
    if (!buffer) {
        throw new Error("Failed to create WebGLBuffer.");
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, 1, -1, -1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    gl.viewport(0, 0, main_width, main_height);
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    const program = createProgram(gl, main_vertexSource, main_fragmentSource);
    gl.useProgram(program);
    const posLocation = gl.getAttribLocation(program, "pos");
    gl.enableVertexAttribArray(posLocation);
    gl.vertexAttribPointer(posLocation, 2, gl.FLOAT, false, 0, 0);
    setUniform4f(gl, program, "v0", [1.15, 1.23, 1.47, 1.84]);
    setUniform4f(gl, program, "v1", [1.65, 1.22, 1.69, 1.04]);
    setUniform4f(gl, program, "v2", [1.05, 1.3, 1.55, 1.23]);
    return {
        program,
        cleanupBenchmark: () => {
            gl.deleteProgram(program);
            gl.deleteBuffer(buffer);
            gl.deleteFramebuffer(framebuffer);
            gl.deleteTexture(texture);
        },
    };
}
function main_runBenchmark(gl, program) {
    return __awaiter(this, void 0, void 0, function* () {
        yield promiseSync(gl);
        const start = performance.now();
        const flops = [];
        let loopCount = 20;
        while (true) {
            setUniform1i(gl, program, "LOOP_COUNT", loopCount);
            const iterationStart = performance.now();
            gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
            yield promiseSync(gl);
            const iterationEnd = performance.now();
            const duration = iterationEnd - iterationStart;
            flops.push(loopCount / duration);
            const remainingBudgetMs = main_budgetMs - (iterationEnd - start);
            if (remainingBudgetMs < 0)
                break;
            if (loopCount < main_maxLoopCount) {
                loopCount += remainingBudgetMs < duration ? 10 : (0.6 * loopCount * remainingBudgetMs) / duration;
            }
        }
        const maxFlops = Math.max(...flops) * (8 * 32) * main_width * main_height;
        return maxFlops / 1e6;
    });
}
/**
 * These are obtained from historical performance data gathered from end-user devices. Keys are gflops, values are the
 * corresponding performance rating.
 *
 * To compute the performance rating given a gflops value, find the nearest key in this map and look up the rating.
 */
const main_benchmarkGflops_gflopsClusterCenters = new Map([
    [34, 1],
    [134, 2],
    [385, 3],
    [783, 4],
    [1484, 5],
    [2313, 6],
]);
/**
 * This benchmark is the same that's run on non-web (e.g. native mobile) platforms, and produces results that can be
 * compared to those gathered on those platforms – this allows us to cluster results and determine a performance rating
 * based on historical data gathered elsewhere.
 *
 * @internal
 */
function main_benchmarkGflops_benchmarkGflops(gl) {
    return __awaiter(this, void 0, void 0, function* () {
        const { program, cleanupBenchmark } = main_prepareBenchmark(gl);
        const gflops = yield main_runBenchmark(gl, program);
        cleanupBenchmark();
        return { name: "gflops", value: gflops };
    });
}
//# sourceMappingURL=benchmarkGflops.js.map
;// ./node_modules/@snap/camera-kit/lib/benchmark/estimateLensPerformanceCluster.js



const main_findNearest = (n, arr) => arr.reduce((a, b) => (Math.abs(a - n) <= Math.abs(b - n) ? a : b));
const main_webglContextAttributes = {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    powerPreference: "high-performance",
};
/**
 * Run benchmarks which attempt to predict expected lens performance, and assign a cluster (i.e. a performance rating)
 * which the CameraKit SDK can use to optimize certain lenses.
 *
 * @returns A rating from 1-6, indicating expected Lens performance.
 *
 * @category Bootstrapping and Configuration
 */
function main_estimateLensPerformance() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
        // Prepare performance measurement.
        const canvas = document.createElement("canvas");
        const gl = canvas.getContext("webgl2", main_webglContextAttributes);
        if (!gl)
            throw benchmarkError("WebGL2 is required to compute performance, but it is not supported.");
        const debugInfo = gl.getExtension("WEBGL_debug_renderer_info");
        const webglRendererInfo = debugInfo ? gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL) : "unknown";
        // Measure performance (just GFLOPS for now, but could add more benchmarks in the future).
        const gflops = yield benchmarkGflops(gl);
        // Combine performance results and compute a performance rating. Right now we just run a single benchmark, so this
        // is pretty trivial.
        const nearestGflopsClusterCenter = main_findNearest(gflops.value, Array.from(gflopsClusterCenters.keys()));
        // This should always find a value, but just in case something strange happens inside `findNearest`, we'll default
        // to zero (instead of asserting .get() will always be defined).
        const gflopsCluster = (_a = gflopsClusterCenters.get(nearestGflopsClusterCenter)) !== null && _a !== void 0 ? _a : 0;
        return {
            cluster: gflopsCluster,
            benchmarks: [gflops],
            webglRendererInfo,
        };
    });
}
//# sourceMappingURL=estimateLensPerformanceCluster.js.map
// EXTERNAL MODULE: ./node_modules/reflect-metadata/Reflect.js
var main_reflect_metadata_Reflect = __webpack_require__(4741);
;// ./node_modules/@snap/camera-kit/lib/common/validate.js

const main_predicateMetadataKey = Symbol("validate");
// A map of primitive types accoring to
/* eslint-disable max-len */
// http://blog.wolksoftware.com/decorators-metadata-reflection-in-typescript-from-novice-to-expert-part-4#3-basic-type-serialization_1
const main_primitiveMap = {
    string: String,
    number: Number,
    boolean: Boolean,
};
const main_ordinalSuffixMap = {
    1: "st",
    2: "nd",
    3: "rd",
};
function main_getArgumentInfo(target, methodName, argumentIndex, arg) {
    var _a;
    let argString;
    try {
        argString = JSON.stringify(arg);
    }
    catch (_b) {
        argString = String(arg);
    }
    return {
        argPosition: `${argumentIndex + 1}${(_a = main_ordinalSuffixMap[argumentIndex + 1]) !== null && _a !== void 0 ? _a : "th"}`,
        methodPath: `${main_getTypeName(target)}.${String(methodName)}()`,
        argTypeName: main_getTypeName(arg),
        argString,
    };
}
function main_guard(predicate) {
    return (target, propertyKey, parameterIndex) => {
        let existingPredicates = Reflect.getOwnMetadata(main_predicateMetadataKey, target, propertyKey) || [];
        existingPredicates[parameterIndex] = predicate;
        Reflect.defineMetadata(main_predicateMetadataKey, existingPredicates, target, propertyKey);
    };
}
function main_validate_validate(target, key, descriptor) {
    const method = descriptor.value;
    const types = Reflect.getMetadata("design:paramtypes", target, key);
    const predicates = Reflect.getMetadata(main_predicateMetadataKey, target, key);
    descriptor.value = function (...args) {
        for (const [i, type] of types.entries()) {
            let arg = Array.isArray(args) && args[i];
            if (!!predicates && predicates[i] && !predicates[i](arg)) {
                const { methodPath, argPosition, argString } = main_getArgumentInfo(target, key, i, arg);
                throw new Error(`The ${argPosition} argument to ${methodPath} method has an invalid value: ${argString}.`);
            }
            if (arg === undefined || arg === null) {
                // TODO: is there a way to check for nullable parameter?
                break;
            }
            if (!main_isValueOfType(arg, type)) {
                const { methodPath, argPosition, argTypeName } = main_getArgumentInfo(target, key, i, arg);
                throw new Error(`The ${argPosition} argument to ${methodPath} method is of type ` +
                    `${argTypeName}, which is not assignable to parameter of type ${type.name}.`);
            }
        }
        return method.apply(this, arguments);
    };
}
/**
 * Checks whether given value is assignable to provided type.
 */
function main_isValueOfType(value, type) {
    if (value instanceof type) {
        return true;
    }
    // test for primitive value
    const isPrimitive = value !== Object(value);
    return isPrimitive && main_primitiveMap[typeof value] === type;
}
/* eslint-disable max-len */
/**
 * Returns type string of a value. It mostly mimics the behavior of typeof, but for non-primitives
 * (i.e. objects and functions), it returns a more granular type name where possible. Source:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof#custom_method_that_gets_a_more_specific_type
 */
function main_getTypeName(value) {
    if (value === null) {
        return "null";
    }
    const baseType = typeof value;
    // Primitive types
    if (!["object", "function"].includes(baseType)) {
        return baseType;
    }
    // Safety: at this point null and undefined values are already handled
    const nonNullValue = value;
    // Symbol.toStringTag often specifies the "display name" of the
    // object's class. It's used in Object.prototype.toString().
    // Safety: cast to an object with Symbol.toStringTag key in order to check for its existance.
    const tag = nonNullValue[Symbol.toStringTag];
    if (typeof tag === "string") {
        return tag;
    }
    // If it's a function whose source code starts with the "class" keyword
    if (baseType === "function" && Function.prototype.toString.call(nonNullValue).startsWith("class")) {
        return "class";
    }
    // The name of the constructor; for example `Array`, `GeneratorFunction`,
    // `Number`, `String`, `Boolean` or `MyCustomClass`
    const className = nonNullValue.constructor.name;
    if (typeof className === "string" && className !== "") {
        return className;
    }
    // At this point there's no robust way to get the type of value,
    // so we use the base implementation.
    return baseType;
}
//# sourceMappingURL=validate.js.map
;// ./node_modules/@snap/camera-kit/lib/common/errorHelpers.js
/**
 * Returns a stack trace for a given error, and also appends the stack trace of any nested error, if one exists.
 * @param error Error to stringify.
 * @returns Error stack trace.
 */
function main_stringifyError(error) {
    var _a;
    const outer = (_a = error.stack) !== null && _a !== void 0 ? _a : "";
    return error.cause ? `${outer}\nCaused by:\n\t${main_stringifyError(main_errorHelpers_ensureError(error.cause))}` : outer;
}
/**
 * If given a value of type Error, return it – otherwise wrap the value in an Error.
 */
function main_errorHelpers_ensureError(error) {
    if (error instanceof Error)
        return error;
    try {
        return new Error(`Non-Error type exception thrown. Serialized error value: ${JSON.stringify(error)}`);
    }
    catch (_) {
        return new Error("Non-Error type exception thrown. Original error value could not be serialized.");
    }
}
//# sourceMappingURL=errorHelpers.js.map
;// ./node_modules/@snap/camera-kit/lib/common/time.js
const main_getTimeMs = () => performance.now();
const main_convertDaysToSeconds = (days) => days * 24 * 60 * 60;
//# sourceMappingURL=time.js.map
;// ./node_modules/@snap/camera-kit/lib/events/TypedCustomEvent.js
/**
 * This wrapper around CustomEvent provides more descriptive type information. By using this class, the `type` property
 * of the CustomEvent will be typed as a string literal – this allows [TypedEventTarget] to provide more useful type
 * checking of events.
 */
class main_TypedCustomEvent extends CustomEvent {
    constructor(type, detail, eventInitDict = {}) {
        super(type, Object.assign(Object.assign({}, eventInitDict), { detail }));
    }
}
//# sourceMappingURL=TypedCustomEvent.js.map
;// ./node_modules/@snap/camera-kit/lib/events/TypedEventTarget.js
/**
 * This wrapper around EventTarget provides more descriptive type information. By using this class, calls to EventTarget
 * methods are correctly type checked to ensure only allowed event types are used, and that events and their type
 * strings are correctly associated.
 *
 * For example, when calling TypedEventTarget::addEventListener, the event passed to the callback will have the correct
 * type corresponding to the type of event for which the listener has been added.
 */
class main_TypedEventTarget {
    constructor() {
        this.listeners = new Map();
        this.options = new Map();
    }
    addEventListener(type, callback, options) {
        var _a;
        // Safety: the type in the method signature ensures the callback handles events of type K, and we use that type
        // as the key when storing the callback – we only ever invoke callbacks obtained by mapping from that event
        // type to the callback, so even though we store the callback with a wider type, we only ever call it with the
        // specific event type specified by K.
        const listener = callback;
        const listeners = (_a = this.listeners.get(type)) !== null && _a !== void 0 ? _a : [];
        this.listeners.set(type, [...listeners, listener]);
        if (options)
            this.options.set(listener, options);
    }
    dispatchEvent(event) {
        const listeners = this.listeners.get(event.type);
        if (!listeners)
            return true;
        listeners.forEach((listener) => {
            var _a;
            const options = (_a = this.options.get(listener)) !== null && _a !== void 0 ? _a : {};
            try {
                listener(event);
            }
            catch (error) {
                // We'll do our best to immitate native behavior, where if a listener throws an error it is caught and
                // emitted as an error event on the window – this might be slightly different from native behavior since
                // we have to use a CustomEvent, but it's as close as we can get.
                if (window)
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
            if (options.once)
                this.removeEventListener(event.type, listener);
        });
        return true;
    }
    removeEventListener(type, callback) {
        const listener = callback;
        const listeners = this.listeners.get(type);
        if (!listeners)
            return;
        this.listeners.set(type, listeners.filter((l) => l !== listener));
        this.options.delete(listener);
    }
}
//# sourceMappingURL=TypedEventTarget.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/requestStateEmittingHandler.js






let main_requestId = 0;
const main_safeParseInt = (str) => {
    if (str == null)
        return 0;
    const maybeInt = parseInt(str);
    return isNaN(maybeInt) ? 0 : maybeInt;
};
const main_dispatchRequestStarted = (requestStateEventTarget, data) => {
    const started = Object.assign(Object.assign({}, data), { requestId: main_requestId++, timeMs: main_getTimeMs() });
    requestStateEventTarget.dispatchEvent(new main_TypedCustomEvent("started", started));
    return started;
};
const main_dispatchRequestCompleted = (requestStateEventTarget, data) => {
    const completed = Object.assign(Object.assign({}, data), { timeMs: main_getTimeMs() });
    requestStateEventTarget.dispatchEvent(new main_TypedCustomEvent("completed", completed));
    return completed;
};
const main_dispatchRequestErrored = (requestStateEventTarget, data) => {
    const errored = Object.assign(Object.assign({}, data), { timeMs: main_getTimeMs() });
    requestStateEventTarget.dispatchEvent(new main_TypedCustomEvent("errored", errored));
    return errored;
};
const main_createRequestStateEmittingHandler = (requestStateEventTarget) => (next) => ([request, dimensions], metadata) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const { requestId } = main_dispatchRequestStarted(requestStateEventTarget, { dimensions });
    try {
        const response = yield next(request, metadata);
        const status = response.status;
        const sizeByte = main_safeParseInt(response.headers.get("content-length"));
        main_dispatchRequestCompleted(requestStateEventTarget, { requestId, dimensions, status, sizeByte });
        return response;
    }
    catch (error) {
        main_dispatchRequestErrored(requestStateEventTarget, { requestId, dimensions, error: main_errorHelpers_ensureError(error) });
        throw error;
    }
});
/**
 * @internal
 */
const main_requestStateEventTargetFactory = main_Injectable("requestStateEventTarget", () => new main_TypedEventTarget());
//# sourceMappingURL=requestStateEmittingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/arrayBufferParsingHandler.js

/**
 * Parse a Fetch Response body into an ArrayBuffer.
 *
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createArrayBufferParsingHandler = () => (next) => (req, metadata) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const response = yield next(req, metadata);
    let buffer;
    try {
        buffer = yield response.arrayBuffer();
    }
    catch (_) {
        buffer = new ArrayBuffer(0);
    }
    return [buffer, response];
});
//# sourceMappingURL=arrayBufferParsingHandler.js.map
// EXTERNAL MODULE: ./node_modules/long/src/long.js
var main_src_long = __webpack_require__(8570);
var main_long_default = /*#__PURE__*/__webpack_require__.n(main_src_long);
// EXTERNAL MODULE: ./node_modules/protobufjs/minimal.js
var main_minimal = __webpack_require__(6946);
var main_minimal_default = /*#__PURE__*/__webpack_require__.n(main_minimal);
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/any.js


const main_protobufPackage = "google.protobuf";
function main_createBaseAny() {
    return { typeUrl: "", value: new Uint8Array() };
}
const main_Any = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.typeUrl !== "") {
            writer.uint32(10).string(message.typeUrl);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseAny();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.typeUrl = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            typeUrl: main_isSet(object.typeUrl) ? String(object.typeUrl) : "",
            value: main_isSet(object.value) ? main_bytesFromBase64(object.value) : new Uint8Array(),
        };
    },
    toJSON(message) {
        const obj = {};
        message.typeUrl !== undefined && (obj.typeUrl = message.typeUrl);
        message.value !== undefined &&
            (obj.value = main_base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseAny();
        message.typeUrl = (_a = object.typeUrl) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var main_any_globalThis = (() => {
    if (typeof main_any_globalThis !== "undefined")
        return main_any_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
const main_any_atob = main_any_globalThis.atob || ((b64) => main_any_globalThis.Buffer.from(b64, "base64").toString("binary"));
function main_bytesFromBase64(b64) {
    const bin = main_any_atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const main_btoa = main_any_globalThis.btoa || ((bin) => main_any_globalThis.Buffer.from(bin, "binary").toString("base64"));
function main_base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return main_btoa(bin.join(""));
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=any.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/lens.js



const main_lens_protobufPackage = "com.snap.camerakit.v3";
var main_Lens_CameraFacing;
(function (Lens_CameraFacing) {
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_UNSET"] = 0] = "CAMERA_FACING_UNSET";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_FRONT"] = 1] = "CAMERA_FACING_FRONT";
    Lens_CameraFacing[Lens_CameraFacing["CAMERA_FACING_BACK"] = 2] = "CAMERA_FACING_BACK";
    Lens_CameraFacing[Lens_CameraFacing["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_Lens_CameraFacing || (main_Lens_CameraFacing = {}));
function main_lens_CameraFacingFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_FACING_UNSET":
            return main_Lens_CameraFacing.CAMERA_FACING_UNSET;
        case 1:
        case "CAMERA_FACING_FRONT":
            return main_Lens_CameraFacing.CAMERA_FACING_FRONT;
        case 2:
        case "CAMERA_FACING_BACK":
            return main_Lens_CameraFacing.CAMERA_FACING_BACK;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_Lens_CameraFacing.UNRECOGNIZED;
    }
}
function main_lens_CameraFacingToJSON(object) {
    switch (object) {
        case main_Lens_CameraFacing.CAMERA_FACING_UNSET:
            return "CAMERA_FACING_UNSET";
        case main_Lens_CameraFacing.CAMERA_FACING_FRONT:
            return "CAMERA_FACING_FRONT";
        case main_Lens_CameraFacing.CAMERA_FACING_BACK:
            return "CAMERA_FACING_BACK";
        default:
            return "UNKNOWN";
    }
}
var main_LensAssetManifestItem_Type;
(function (LensAssetManifestItem_Type) {
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["DEVICE_DEPENDENT_ASSET_UNSET"] = 0] = "DEVICE_DEPENDENT_ASSET_UNSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["ASSET"] = 1] = "ASSET";
    LensAssetManifestItem_Type[LensAssetManifestItem_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_LensAssetManifestItem_Type || (main_LensAssetManifestItem_Type = {}));
function main_lensAssetManifestItem_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "DEVICE_DEPENDENT_ASSET_UNSET":
            return main_LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET;
        case 1:
        case "ASSET":
            return main_LensAssetManifestItem_Type.ASSET;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LensAssetManifestItem_Type.UNRECOGNIZED;
    }
}
function main_lensAssetManifestItem_TypeToJSON(object) {
    switch (object) {
        case main_LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
            return "DEVICE_DEPENDENT_ASSET_UNSET";
        case main_LensAssetManifestItem_Type.ASSET:
            return "ASSET";
        default:
            return "UNKNOWN";
    }
}
var main_LensAssetManifestItem_RequestTiming;
(function (LensAssetManifestItem_RequestTiming) {
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["PRELOAD_UNSET"] = 0] = "PRELOAD_UNSET";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["ON_DEMAND"] = 1] = "ON_DEMAND";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["REQUIRED"] = 2] = "REQUIRED";
    LensAssetManifestItem_RequestTiming[LensAssetManifestItem_RequestTiming["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_LensAssetManifestItem_RequestTiming || (main_LensAssetManifestItem_RequestTiming = {}));
function main_lensAssetManifestItem_RequestTimingFromJSON(object) {
    switch (object) {
        case 0:
        case "PRELOAD_UNSET":
            return main_LensAssetManifestItem_RequestTiming.PRELOAD_UNSET;
        case 1:
        case "ON_DEMAND":
            return main_LensAssetManifestItem_RequestTiming.ON_DEMAND;
        case 2:
        case "REQUIRED":
            return main_LensAssetManifestItem_RequestTiming.REQUIRED;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LensAssetManifestItem_RequestTiming.UNRECOGNIZED;
    }
}
function main_lensAssetManifestItem_RequestTimingToJSON(object) {
    switch (object) {
        case main_LensAssetManifestItem_RequestTiming.PRELOAD_UNSET:
            return "PRELOAD_UNSET";
        case main_LensAssetManifestItem_RequestTiming.ON_DEMAND:
            return "ON_DEMAND";
        case main_LensAssetManifestItem_RequestTiming.REQUIRED:
            return "REQUIRED";
        default:
            return "UNKNOWN";
    }
}
function main_createBaseLens() {
    return {
        id: "",
        name: "",
        vendorData: {},
        content: undefined,
        isThirdParty: false,
        cameraFacingPreference: 0,
        featureMetadata: [],
        lensCreator: undefined,
        scannable: undefined,
    };
}
const main_Lens = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        Object.entries(message.vendorData).forEach(([key, value]) => {
            main_Lens_VendorDataEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.content !== undefined) {
            main_Content.encode(message.content, writer.uint32(34).fork()).ldelim();
        }
        if (message.isThirdParty === true) {
            writer.uint32(40).bool(message.isThirdParty);
        }
        if (message.cameraFacingPreference !== 0) {
            writer.uint32(48).int32(message.cameraFacingPreference);
        }
        for (const v of message.featureMetadata) {
            main_Any.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.lensCreator !== undefined) {
            main_LensCreator.encode(message.lensCreator, writer.uint32(66).fork()).ldelim();
        }
        if (message.scannable !== undefined) {
            main_Scannable.encode(message.scannable, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    const entry3 = main_Lens_VendorDataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.vendorData[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.content = main_Content.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.isThirdParty = reader.bool();
                    break;
                case 6:
                    message.cameraFacingPreference = reader.int32();
                    break;
                case 7:
                    message.featureMetadata.push(main_Any.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.lensCreator = main_LensCreator.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.scannable = main_Scannable.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: main_lens_isSet(object.id) ? String(object.id) : "",
            name: main_lens_isSet(object.name) ? String(object.name) : "",
            vendorData: main_isObject(object.vendorData)
                ? Object.entries(object.vendorData).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            content: main_lens_isSet(object.content) ? main_Content.fromJSON(object.content) : undefined,
            isThirdParty: main_lens_isSet(object.isThirdParty) ? Boolean(object.isThirdParty) : false,
            cameraFacingPreference: main_lens_isSet(object.cameraFacingPreference)
                ? main_lens_CameraFacingFromJSON(object.cameraFacingPreference)
                : 0,
            featureMetadata: Array.isArray(object === null || object === void 0 ? void 0 : object.featureMetadata)
                ? object.featureMetadata.map((e) => main_Any.fromJSON(e))
                : [],
            lensCreator: main_lens_isSet(object.lensCreator) ? main_LensCreator.fromJSON(object.lensCreator) : undefined,
            scannable: main_lens_isSet(object.scannable) ? main_Scannable.fromJSON(object.scannable) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        obj.vendorData = {};
        if (message.vendorData) {
            Object.entries(message.vendorData).forEach(([k, v]) => {
                obj.vendorData[k] = v;
            });
        }
        message.content !== undefined && (obj.content = message.content ? main_Content.toJSON(message.content) : undefined);
        message.isThirdParty !== undefined && (obj.isThirdParty = message.isThirdParty);
        message.cameraFacingPreference !== undefined &&
            (obj.cameraFacingPreference = main_lens_CameraFacingToJSON(message.cameraFacingPreference));
        if (message.featureMetadata) {
            obj.featureMetadata = message.featureMetadata.map((e) => (e ? main_Any.toJSON(e) : undefined));
        }
        else {
            obj.featureMetadata = [];
        }
        message.lensCreator !== undefined &&
            (obj.lensCreator = message.lensCreator ? main_LensCreator.toJSON(message.lensCreator) : undefined);
        message.scannable !== undefined &&
            (obj.scannable = message.scannable ? main_Scannable.toJSON(message.scannable) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBaseLens();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.vendorData = Object.entries((_c = object.vendorData) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.content =
            object.content !== undefined && object.content !== null ? main_Content.fromPartial(object.content) : undefined;
        message.isThirdParty = (_d = object.isThirdParty) !== null && _d !== void 0 ? _d : false;
        message.cameraFacingPreference = (_e = object.cameraFacingPreference) !== null && _e !== void 0 ? _e : 0;
        message.featureMetadata = ((_f = object.featureMetadata) === null || _f === void 0 ? void 0 : _f.map((e) => main_Any.fromPartial(e))) || [];
        message.lensCreator =
            object.lensCreator !== undefined && object.lensCreator !== null
                ? main_LensCreator.fromPartial(object.lensCreator)
                : undefined;
        message.scannable =
            object.scannable !== undefined && object.scannable !== null ? main_Scannable.fromPartial(object.scannable) : undefined;
        return message;
    },
};
function main_createBaseLens_VendorDataEntry() {
    return { key: "", value: "" };
}
const main_Lens_VendorDataEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLens_VendorDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: main_lens_isSet(object.key) ? String(object.key) : "",
            value: main_lens_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseLens_VendorDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseContent() {
    return {
        lnsUrl: "",
        lnsSha256: "",
        iconUrl: "",
        preview: undefined,
        assetManifest: [],
        defaultHintId: "",
        hintTranslations: {},
        lnsUrlBolt: "",
        iconUrlBolt: "",
    };
}
const main_Content = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.lnsUrl !== "") {
            writer.uint32(10).string(message.lnsUrl);
        }
        if (message.lnsSha256 !== "") {
            writer.uint32(18).string(message.lnsSha256);
        }
        if (message.iconUrl !== "") {
            writer.uint32(26).string(message.iconUrl);
        }
        if (message.preview !== undefined) {
            main_Preview.encode(message.preview, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.assetManifest) {
            main_LensAssetManifestItem.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.defaultHintId !== "") {
            writer.uint32(50).string(message.defaultHintId);
        }
        Object.entries(message.hintTranslations).forEach(([key, value]) => {
            main_Content_HintTranslationsEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        if (message.lnsUrlBolt !== "") {
            writer.uint32(66).string(message.lnsUrlBolt);
        }
        if (message.iconUrlBolt !== "") {
            writer.uint32(74).string(message.iconUrlBolt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lnsUrl = reader.string();
                    break;
                case 2:
                    message.lnsSha256 = reader.string();
                    break;
                case 3:
                    message.iconUrl = reader.string();
                    break;
                case 4:
                    message.preview = main_Preview.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.assetManifest.push(main_LensAssetManifestItem.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.defaultHintId = reader.string();
                    break;
                case 7:
                    const entry7 = main_Content_HintTranslationsEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.hintTranslations[entry7.key] = entry7.value;
                    }
                    break;
                case 8:
                    message.lnsUrlBolt = reader.string();
                    break;
                case 9:
                    message.iconUrlBolt = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lnsUrl: main_lens_isSet(object.lnsUrl) ? String(object.lnsUrl) : "",
            lnsSha256: main_lens_isSet(object.lnsSha256) ? String(object.lnsSha256) : "",
            iconUrl: main_lens_isSet(object.iconUrl) ? String(object.iconUrl) : "",
            preview: main_lens_isSet(object.preview) ? main_Preview.fromJSON(object.preview) : undefined,
            assetManifest: Array.isArray(object === null || object === void 0 ? void 0 : object.assetManifest)
                ? object.assetManifest.map((e) => main_LensAssetManifestItem.fromJSON(e))
                : [],
            defaultHintId: main_lens_isSet(object.defaultHintId) ? String(object.defaultHintId) : "",
            hintTranslations: main_isObject(object.hintTranslations)
                ? Object.entries(object.hintTranslations).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            lnsUrlBolt: main_lens_isSet(object.lnsUrlBolt) ? String(object.lnsUrlBolt) : "",
            iconUrlBolt: main_lens_isSet(object.iconUrlBolt) ? String(object.iconUrlBolt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lnsUrl !== undefined && (obj.lnsUrl = message.lnsUrl);
        message.lnsSha256 !== undefined && (obj.lnsSha256 = message.lnsSha256);
        message.iconUrl !== undefined && (obj.iconUrl = message.iconUrl);
        message.preview !== undefined && (obj.preview = message.preview ? main_Preview.toJSON(message.preview) : undefined);
        if (message.assetManifest) {
            obj.assetManifest = message.assetManifest.map((e) => (e ? main_LensAssetManifestItem.toJSON(e) : undefined));
        }
        else {
            obj.assetManifest = [];
        }
        message.defaultHintId !== undefined && (obj.defaultHintId = message.defaultHintId);
        obj.hintTranslations = {};
        if (message.hintTranslations) {
            Object.entries(message.hintTranslations).forEach(([k, v]) => {
                obj.hintTranslations[k] = v;
            });
        }
        message.lnsUrlBolt !== undefined && (obj.lnsUrlBolt = message.lnsUrlBolt);
        message.iconUrlBolt !== undefined && (obj.iconUrlBolt = message.iconUrlBolt);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = main_createBaseContent();
        message.lnsUrl = (_a = object.lnsUrl) !== null && _a !== void 0 ? _a : "";
        message.lnsSha256 = (_b = object.lnsSha256) !== null && _b !== void 0 ? _b : "";
        message.iconUrl = (_c = object.iconUrl) !== null && _c !== void 0 ? _c : "";
        message.preview =
            object.preview !== undefined && object.preview !== null ? main_Preview.fromPartial(object.preview) : undefined;
        message.assetManifest = ((_d = object.assetManifest) === null || _d === void 0 ? void 0 : _d.map((e) => main_LensAssetManifestItem.fromPartial(e))) || [];
        message.defaultHintId = (_e = object.defaultHintId) !== null && _e !== void 0 ? _e : "";
        message.hintTranslations = Object.entries((_f = object.hintTranslations) !== null && _f !== void 0 ? _f : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.lnsUrlBolt = (_g = object.lnsUrlBolt) !== null && _g !== void 0 ? _g : "";
        message.iconUrlBolt = (_h = object.iconUrlBolt) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function main_createBaseContent_HintTranslationsEntry() {
    return { key: "", value: "" };
}
const main_Content_HintTranslationsEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseContent_HintTranslationsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: main_lens_isSet(object.key) ? String(object.key) : "",
            value: main_lens_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseContent_HintTranslationsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseLensAssetManifestItem() {
    return { type: 0, id: "", requestTiming: 0, assetUrl: "", assetChecksum: "" };
}
const main_LensAssetManifestItem = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.requestTiming !== 0) {
            writer.uint32(24).int32(message.requestTiming);
        }
        if (message.assetUrl !== "") {
            writer.uint32(34).string(message.assetUrl);
        }
        if (message.assetChecksum !== "") {
            writer.uint32(42).string(message.assetChecksum);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLensAssetManifestItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                case 3:
                    message.requestTiming = reader.int32();
                    break;
                case 4:
                    message.assetUrl = reader.string();
                    break;
                case 5:
                    message.assetChecksum = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: main_lens_isSet(object.type) ? main_lensAssetManifestItem_TypeFromJSON(object.type) : 0,
            id: main_lens_isSet(object.id) ? String(object.id) : "",
            requestTiming: main_lens_isSet(object.requestTiming)
                ? main_lensAssetManifestItem_RequestTimingFromJSON(object.requestTiming)
                : 0,
            assetUrl: main_lens_isSet(object.assetUrl) ? String(object.assetUrl) : "",
            assetChecksum: main_lens_isSet(object.assetChecksum) ? String(object.assetChecksum) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = main_lensAssetManifestItem_TypeToJSON(message.type));
        message.id !== undefined && (obj.id = message.id);
        message.requestTiming !== undefined &&
            (obj.requestTiming = main_lensAssetManifestItem_RequestTimingToJSON(message.requestTiming));
        message.assetUrl !== undefined && (obj.assetUrl = message.assetUrl);
        message.assetChecksum !== undefined && (obj.assetChecksum = message.assetChecksum);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseLensAssetManifestItem();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.requestTiming = (_c = object.requestTiming) !== null && _c !== void 0 ? _c : 0;
        message.assetUrl = (_d = object.assetUrl) !== null && _d !== void 0 ? _d : "";
        message.assetChecksum = (_e = object.assetChecksum) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function main_createBasePreview() {
    return { imageUrl: "", imageSequenceSize: 0, imageSequenceWebpUrlPattern: "" };
}
const main_Preview = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.imageUrl !== "") {
            writer.uint32(10).string(message.imageUrl);
        }
        if (message.imageSequenceSize !== 0) {
            writer.uint32(16).int32(message.imageSequenceSize);
        }
        if (message.imageSequenceWebpUrlPattern !== "") {
            writer.uint32(26).string(message.imageSequenceWebpUrlPattern);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePreview();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.imageUrl = reader.string();
                    break;
                case 2:
                    message.imageSequenceSize = reader.int32();
                    break;
                case 3:
                    message.imageSequenceWebpUrlPattern = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            imageUrl: main_lens_isSet(object.imageUrl) ? String(object.imageUrl) : "",
            imageSequenceSize: main_lens_isSet(object.imageSequenceSize) ? Number(object.imageSequenceSize) : 0,
            imageSequenceWebpUrlPattern: main_lens_isSet(object.imageSequenceWebpUrlPattern)
                ? String(object.imageSequenceWebpUrlPattern)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.imageUrl !== undefined && (obj.imageUrl = message.imageUrl);
        message.imageSequenceSize !== undefined && (obj.imageSequenceSize = Math.round(message.imageSequenceSize));
        message.imageSequenceWebpUrlPattern !== undefined &&
            (obj.imageSequenceWebpUrlPattern = message.imageSequenceWebpUrlPattern);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBasePreview();
        message.imageUrl = (_a = object.imageUrl) !== null && _a !== void 0 ? _a : "";
        message.imageSequenceSize = (_b = object.imageSequenceSize) !== null && _b !== void 0 ? _b : 0;
        message.imageSequenceWebpUrlPattern = (_c = object.imageSequenceWebpUrlPattern) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function main_createBaseLensCreator() {
    return { displayName: "" };
}
const main_LensCreator = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.displayName !== "") {
            writer.uint32(10).string(message.displayName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLensCreator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.displayName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            displayName: main_lens_isSet(object.displayName) ? String(object.displayName) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.displayName !== undefined && (obj.displayName = message.displayName);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseLensCreator();
        message.displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseScannable() {
    return { snapcodeImageUrl: "", snapcodeDeeplink: "" };
}
const main_Scannable = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.snapcodeImageUrl !== "") {
            writer.uint32(10).string(message.snapcodeImageUrl);
        }
        if (message.snapcodeDeeplink !== "") {
            writer.uint32(18).string(message.snapcodeDeeplink);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseScannable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snapcodeImageUrl = reader.string();
                    break;
                case 2:
                    message.snapcodeDeeplink = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            snapcodeImageUrl: main_lens_isSet(object.snapcodeImageUrl) ? String(object.snapcodeImageUrl) : "",
            snapcodeDeeplink: main_lens_isSet(object.snapcodeDeeplink) ? String(object.snapcodeDeeplink) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.snapcodeImageUrl !== undefined && (obj.snapcodeImageUrl = message.snapcodeImageUrl);
        message.snapcodeDeeplink !== undefined && (obj.snapcodeDeeplink = message.snapcodeDeeplink);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseScannable();
        message.snapcodeImageUrl = (_a = object.snapcodeImageUrl) !== null && _a !== void 0 ? _a : "";
        message.snapcodeDeeplink = (_b = object.snapcodeDeeplink) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_isObject(value) {
    return typeof value === "object" && value !== null;
}
function main_lens_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=lens.js.map
;// ./node_modules/@snap/camera-kit/lib/logger/errorLoggingDecorator.js
/**
 * Creates a class member decorator that logs errors thrown during the member invocation.
 * If the member returns a Promise, promise rejections are handled.
 * Any caught errors are re-thrown.
 * @param logger The logger to report errors to.
 * @return A decorator function.
 */
function main_errorLoggingDecorator(logger) {
    const handleError = (error) => logger.error(error);
    return function (_target, _propertyKey, descriptor) {
        const methodName = descriptor.value ? "value" : "get";
        const originalMethod = descriptor[methodName];
        descriptor[methodName] = function (...args) {
            try {
                // "this" refers to original scope this function is called in
                const result = originalMethod.apply(this, args);
                if (result instanceof Promise) {
                    // in case of a promise we don't return our promise chain
                    // that logs an error because we want callers to handle the error as well
                    result.catch(handleError);
                }
                return result;
            }
            catch (error) {
                handleError(error);
                throw error;
            }
        };
        return descriptor;
    };
}
//# sourceMappingURL=errorLoggingDecorator.js.map
;// ./node_modules/@snap/camera-kit/lib/common/assertions.js
/**
 * Assert a particular code path is unreachable, e.g. to perform a compile-time exhaustiveness check.
 *
 * Ex:
 * ```ts
 * interface A { type: 'a' }
 * interface B { type: 'b' }
 * type TaggedUnion = A | B
 *
 * function exhaustiveSwitch(value: TaggedUnion) {
 *   switch (value.type) {
 *     case 'a': // do something with A
 *     case 'b': // do something with B
 *     // this will fail to compile if we add another type to TaggedUnion and forget to add a corresponding case
 *     // to the switch statement.
 *     default: assertUnreachable(value)
 *   }
 * }
 * ```
 */
function main_assertUnreachable(_) {
    throw new Error("Reached unreachable code at runtime.");
}
/**
 * Assert that a condition is true. Otherwise, throws an error.
 * @param condition Condition to test.
 * @param error Optional error message or error instance to throw.
 */
function main_assert(condition, error = "Assertion failed") {
    if (!condition) {
        if (error instanceof Error) {
            throw error;
        }
        else {
            throw new Error(error);
        }
    }
}
//# sourceMappingURL=assertions.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/Lens.js


function main_isLensArray(value) {
    return main_isArrayOfType(main_isLens, value);
}
function main_isLens(value) {
    return (main_typeguards_isRecord(value) &&
        main_typeguards_isString(value.id) &&
        main_typeguards_isString(value.name) &&
        (main_isUndefined(value.iconUrl) || main_typeguards_isString(value.iconUrl)) &&
        main_typeguards_isRecord(value.vendorData) &&
        main_typeguards_predicateRecordValues(main_typeguards_isString)(value.vendorData) &&
        main_isNumber(value.cameraFacingPreference) &&
        (main_isUndefined(value.preview) || main_isPreview(value.preview)) &&
        (main_isUndefined(value.lensCreator) || main_isLensCreator(value.lensCreator)) &&
        (main_isUndefined(value.snapcode) || main_isSnapcode(value.snapcode)) &&
        main_isAnyArray(value.featureMetadata));
}
function main_isLensProto(value) {
    return (isRecord(value) &&
        isString(value.id) &&
        isString(value.name) &&
        isRecord(value.vendorData) &&
        predicateRecordValues(isString)(value.vendorData) &&
        (typeof value.content === "undefined" || main_isLensContent(value.content)));
}
function main_isPreview(value) {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.imageUrl);
}
function main_isLensCreator(value) {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.displayName);
}
function main_isSnapcode(value) {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.imageUrl) && main_typeguards_isString(value.deepLink);
}
function main_isLensContent(value) {
    return (isRecord(value) &&
        isString(value.iconUrlBolt) &&
        isString(value.lnsSha256) &&
        isString(value.lnsUrlBolt) &&
        isRecord(value.preview) &&
        isString(value.preview.imageUrl));
}
function main_isGetGroupResponse(value) {
    return isRecord(value) && isString(value.id) && Array.isArray(value.lenses) && value.lenses.every(main_isLensProto);
}
function main_isAny(value) {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.typeUrl) && main_isTypedArray(value.value);
}
function main_isAnyArray(value) {
    return main_isArrayOfType(main_isAny, value);
}
/**
 * Converts lens proto to a public lens object.
 * @param lens Lens proto
 * @returns Public lens object.
 *
 * @internal
 */
function main_toPublicLens({ id, groupId, name, content, vendorData, cameraFacingPreference, lensCreator, scannable, featureMetadata, }) {
    var _a;
    main_assert(main_isEmptyOrSafeUrl(content === null || content === void 0 ? void 0 : content.iconUrlBolt), "Unsafe icon URL");
    main_assert(main_isEmptyOrSafeUrl((_a = content === null || content === void 0 ? void 0 : content.preview) === null || _a === void 0 ? void 0 : _a.imageUrl), "Unsafe preview URL");
    return {
        id,
        groupId,
        name,
        iconUrl: content === null || content === void 0 ? void 0 : content.iconUrlBolt,
        preview: (content === null || content === void 0 ? void 0 : content.preview) ? { imageUrl: content.preview.imageUrl } : undefined,
        vendorData,
        cameraFacingPreference,
        lensCreator,
        snapcode: scannable
            ? { imageUrl: scannable.snapcodeImageUrl, deepLink: scannable.snapcodeDeeplink }
            : undefined,
        featureMetadata,
    };
}
//# sourceMappingURL=Lens.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-core-module/loader/index.js

//# sourceMappingURL=index.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-core-module/index.js



//# sourceMappingURL=index.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/metricsEventTarget.js


/**
 * Any metrics that we wish to emit to applications should be dispatched on this event target.
 *
 * Our business events reporter also listens to this event target, and may report the emitted metrics to our backend.
 *
 * @internal
 */
const main_metricsEventTargetFactory = main_Injectable("metricsEventTarget", () => new main_TypedEventTarget());
//# sourceMappingURL=metricsEventTarget.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/EmptyError.js

var main_EmptyError = main_createErrorClass(function (_super) { return function EmptyErrorImpl() {
    _super(this);
    this.name = 'EmptyError';
    this.message = 'no elements in sequence';
}; });
//# sourceMappingURL=EmptyError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/firstValueFrom.js


function main_firstValueFrom(source, config) {
    var hasConfig = typeof config === 'object';
    return new Promise(function (resolve, reject) {
        var subscriber = new main_SafeSubscriber({
            next: function (value) {
                resolve(value);
                subscriber.unsubscribe();
            },
            error: reject,
            complete: function () {
                if (hasConfig) {
                    resolve(config.defaultValue);
                }
                else {
                    reject(new main_EmptyError());
                }
            },
        });
        source.subscribe(subscriber);
    });
}
//# sourceMappingURL=firstValueFrom.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/catchError.js



function main_catchError(selector) {
    return main_operate(function (source, subscriber) {
        var innerSub = null;
        var syncUnsub = false;
        var handledResult;
        innerSub = source.subscribe(main_createOperatorSubscriber(subscriber, undefined, undefined, function (err) {
            handledResult = main_innerFrom_innerFrom(selector(err, main_catchError(selector)(source)));
            if (innerSub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
            else {
                syncUnsub = true;
            }
        }));
        if (syncUnsub) {
            innerSub.unsubscribe();
            innerSub = null;
            handledResult.subscribe(subscriber);
        }
    });
}
//# sourceMappingURL=catchError.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var main_dateTimestampProvider = {
    now: function () {
        return (main_dateTimestampProvider.delegate || Date).now();
    },
    delegate: undefined,
};
//# sourceMappingURL=dateTimestampProvider.js.map
;// ./node_modules/rxjs/dist/esm5/internal/ReplaySubject.js



var main_ReplaySubject = (function (_super) {
    main_extends(ReplaySubject, _super);
    function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
        if (_bufferSize === void 0) { _bufferSize = Infinity; }
        if (_windowTime === void 0) { _windowTime = Infinity; }
        if (_timestampProvider === void 0) { _timestampProvider = main_dateTimestampProvider; }
        var _this = _super.call(this) || this;
        _this._bufferSize = _bufferSize;
        _this._windowTime = _windowTime;
        _this._timestampProvider = _timestampProvider;
        _this._buffer = [];
        _this._infiniteTimeWindow = true;
        _this._infiniteTimeWindow = _windowTime === Infinity;
        _this._bufferSize = Math.max(1, _bufferSize);
        _this._windowTime = Math.max(1, _windowTime);
        return _this;
    }
    ReplaySubject.prototype.next = function (value) {
        var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
        if (!isStopped) {
            _buffer.push(value);
            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
        }
        this._trimBuffer();
        _super.prototype.next.call(this, value);
    };
    ReplaySubject.prototype._subscribe = function (subscriber) {
        this._throwIfClosed();
        this._trimBuffer();
        var subscription = this._innerSubscribe(subscriber);
        var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
        var copy = _buffer.slice();
        for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
            subscriber.next(copy[i]);
        }
        this._checkFinalizedStatuses(subscriber);
        return subscription;
    };
    ReplaySubject.prototype._trimBuffer = function () {
        var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
        var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
        if (!_infiniteTimeWindow) {
            var now = _timestampProvider.now();
            var last = 0;
            for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                last = i;
            }
            last && _buffer.splice(0, last + 1);
        }
    };
    return ReplaySubject;
}(main_Subject));

//# sourceMappingURL=ReplaySubject.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/share.js





function main_share(options) {
    if (options === void 0) { options = {}; }
    var _a = options.connector, connector = _a === void 0 ? function () { return new main_Subject(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
    return function (wrapperSource) {
        var connection;
        var resetConnection;
        var subject;
        var refCount = 0;
        var hasCompleted = false;
        var hasErrored = false;
        var cancelReset = function () {
            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
            resetConnection = undefined;
        };
        var reset = function () {
            cancelReset();
            connection = subject = undefined;
            hasCompleted = hasErrored = false;
        };
        var resetAndUnsubscribe = function () {
            var conn = connection;
            reset();
            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
        };
        return main_operate(function (source, subscriber) {
            refCount++;
            if (!hasErrored && !hasCompleted) {
                cancelReset();
            }
            var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
            subscriber.add(function () {
                refCount--;
                if (refCount === 0 && !hasErrored && !hasCompleted) {
                    resetConnection = main_handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                }
            });
            dest.subscribe(subscriber);
            if (!connection &&
                refCount > 0) {
                connection = new main_SafeSubscriber({
                    next: function (value) { return dest.next(value); },
                    error: function (err) {
                        hasErrored = true;
                        cancelReset();
                        resetConnection = main_handleReset(reset, resetOnError, err);
                        dest.error(err);
                    },
                    complete: function () {
                        hasCompleted = true;
                        cancelReset();
                        resetConnection = main_handleReset(reset, resetOnComplete);
                        dest.complete();
                    },
                });
                main_innerFrom_innerFrom(source).subscribe(connection);
            }
        })(wrapperSource);
    };
}
function main_handleReset(reset, on) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (on === true) {
        reset();
        return;
    }
    if (on === false) {
        return;
    }
    var onSubscriber = new main_SafeSubscriber({
        next: function () {
            onSubscriber.unsubscribe();
            reset();
        },
    });
    return main_innerFrom_innerFrom(on.apply(void 0, main_spreadArray([], main_read(args)))).subscribe(onSubscriber);
}
//# sourceMappingURL=share.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js


function main_shareReplay(configOrBufferSize, windowTime, scheduler) {
    var _a, _b, _c;
    var bufferSize;
    var refCount = false;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        (_a = configOrBufferSize.bufferSize, bufferSize = _a === void 0 ? Infinity : _a, _b = configOrBufferSize.windowTime, windowTime = _b === void 0 ? Infinity : _b, _c = configOrBufferSize.refCount, refCount = _c === void 0 ? false : _c, scheduler = configOrBufferSize.scheduler);
    }
    else {
        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);
    }
    return main_share({
        connector: function () { return new main_ReplaySubject(bufferSize, windowTime, scheduler); },
        resetOnError: true,
        resetOnComplete: false,
        resetOnRefCountZero: refCount,
    });
}
//# sourceMappingURL=shareReplay.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/namespace.js


const main_namespace_protobufPackage = "snapchat.cdp.cof";
var main_Namespace;
(function (Namespace) {
    Namespace[Namespace["DEFAULT"] = 0] = "DEFAULT";
    Namespace[Namespace["LENS_CORE"] = 64] = "LENS_CORE";
    Namespace[Namespace["CAMERA_KIT_CORE"] = 65] = "CAMERA_KIT_CORE";
    Namespace[Namespace["LENS_CORE_CONFIG"] = 143] = "LENS_CORE_CONFIG";
    Namespace[Namespace["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_Namespace || (main_Namespace = {}));
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=namespace.js.map
;// ./node_modules/@snap/camera-kit/lib/platform/cameraKitUserAgent.js



/** @internal */
const main_getCameraKitUserAgent = main_memoize(function getCameraKitUserAgent() {
    var _a;
    const { browser, deviceModel, origin, osName, osVersion, sdkShortVersion, lensCore } = main_getPlatformInfo();
    // Set this to `DEBUG` manually while testing / root-causing.
    const { userAgentFlavor } = (_a = main_getConfigurationOverrides()) !== null && _a !== void 0 ? _a : { userAgentFlavor: "release" };
    const flavor = userAgentFlavor === "release" ? "" : "DEBUG ";
    // This full string is defined here:
    // eslint-disable-next-line max-len
    // https://github.sc-corp.net/Snapchat/useragent/blob/9333afe7cc6ac00503ad46cb234bcf94006dff98/java/useragent/src/main/java/snapchat/client/UserAgent.java#L124
    return (`CameraKitWeb/${sdkShortVersion} ${flavor}(${deviceModel}; ${osName} ${osVersion}) ` +
        `${browser.brand}/${browser.version} Core/${lensCore.version} ` +
        // We overload appId, using the origin instead of the true appId parsed from the apiToken -- we do this because
        // origin is human-readable, and this is used to populate the appId dimension in operational metrics.
        `AppId/${origin}`);
});
//# sourceMappingURL=cameraKitUserAgent.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/headersModifyingFetchHandler.js
/**
 * Modify a Fetch Request's headers.
 *
 * @param modifyHeaders
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createHeadersModifyingFetchHandler = (modifyHeaders) => (next) => (input, init) => {
    const headers = init && init.headers
        ? new Headers(init.headers)
        : typeof input === "string"
            ? new Headers()
            : input.headers;
    const modifiedHeaders = modifyHeaders(headers);
    // When `init` contains headers, `fetch` uses these *instead* of any headers found in the `input` Request.
    return next(input, Object.assign(Object.assign({}, init), { headers: modifiedHeaders }));
};
//# sourceMappingURL=headersModifyingFetchHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/cameraKitServiceFetchHandlerFactory.js






/**
 * A Fetch implementation which adds headers required to make authenticated calls to the CameraKit backend service.
 *
 * @internal
 */
const main_cameraKitServiceFetchHandlerFactory = main_Injectable("cameraKitServiceFetchHandler", [main_configurationToken, main_defaultFetchHandlerFactory.token], ({ apiToken }, defaultFetchHandler) => {
    return new main_HandlerChainBuilder(defaultFetchHandler).map(main_createHeadersModifyingFetchHandler((headers) => {
        headers.append("x-snap-client-user-agent", main_getCameraKitUserAgent());
        headers.append("authorization", `Bearer ${apiToken}`);
        return headers;
    })).handler;
});
//# sourceMappingURL=cameraKitServiceFetchHandlerFactory.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/index.js


//# sourceMappingURL=index.js.map
// EXTERNAL MODULE: ./node_modules/browser-headers/dist/browser-headers.umd.js
var main_browser_headers_umd = __webpack_require__(7018);
;// ./node_modules/@snap/camera-kit/lib/common/unionBy.js
/**
 * Creates an array of unique values, in order, from all given arrays using a specified iteratee.
 * If multiple elements have the same key generated by the iteratee, the last occurrence is kept.
 *
 * @param {((item: T) => unknown) | keyof T} iteratee - The iteratee invoked per element.
 * @param {...T[][]} arrays - The arrays to inspect and unite.
 * @returns {T[]} - Returns the new array of combined elements, preserving the order of last occurrences.
 * @example
 * // Using a property name as iteratee
 * const result = unionBy(
 *   'id',
 *   [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }],
 *   [{ id: 1, name: 'Sally' }, { id: 3, name: 'Doe' }]
 * );
 * console.log(result);
 * // Output: [{ id: 1, name: 'Sally' }, { id: 2, name: 'Jane' }, { id: 3, name: 'Doe' }]
 *
 * @example
 * // Using a function as iteratee
 * const result = unionBy(
 *   item => item.id,
 *   [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }],
 *   [{ id: 1, name: 'Sally' }, { id: 3, name: 'Doe' }]
 * );
 * console.log(result);
 * // Output: [{ id: 1, name: 'Sally' }, { id: 2, name: 'Jane' }, { id: 3, name: 'Doe' }]
 */
function main_unionBy(iteratee, ...arrays) {
    const throwIterateeError = () => {
        throw new Error("Iteratee must be a function or a valid property key of the item");
    };
    // One helpful feature of Map is maintainig the insertion order of elements. This is particularly nice for the
    // unionBy function since it ensures that the combined array preserves the order of elements as they first appear
    // in the input arrays.
    const seen = new Map();
    for (const item of arrays.flat()) {
        const key = typeof iteratee === "function"
            ? iteratee(item)
            : typeof item === "object" && item !== null && iteratee in item
                ? item[iteratee]
                : throwIterateeError();
        seen.set(key, item);
    }
    return Array.from(seen.values());
}
//# sourceMappingURL=unionBy.js.map
// EXTERNAL MODULE: ./node_modules/@improbable-eng/grpc-web/dist/grpc-web-client.umd.js
var main_grpc_web_client_umd = __webpack_require__(2553);
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/timestamp.js


const main_timestamp_protobufPackage = "google.protobuf";
function main_createBaseTimestamp() {
    return { seconds: 0, nanos: 0 };
}
const main_Timestamp = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.seconds !== 0) {
            writer.uint32(8).int64(message.seconds);
        }
        if (message.nanos !== 0) {
            writer.uint32(16).int32(message.nanos);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.seconds = main_longToNumber(reader.int64());
                    break;
                case 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            seconds: main_timestamp_isSet(object.seconds) ? Number(object.seconds) : 0,
            nanos: main_timestamp_isSet(object.nanos) ? Number(object.nanos) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.seconds !== undefined && (obj.seconds = Math.round(message.seconds));
        message.nanos !== undefined && (obj.nanos = Math.round(message.nanos));
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseTimestamp();
        message.seconds = (_a = object.seconds) !== null && _a !== void 0 ? _a : 0;
        message.nanos = (_b = object.nanos) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
var main_timestamp_globalThis = (() => {
    if (typeof main_timestamp_globalThis !== "undefined")
        return main_timestamp_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_timestamp_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_timestamp_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=timestamp.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/benchmark.js



const main_benchmark_protobufPackage = "snapchat.cdp.cof";
function main_createBaseBenchmarkValue() {
    return { intValue: undefined, longValue: undefined, boolValue: undefined, floatValue: undefined };
}
const main_BenchmarkValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(24).bool(message.boolValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(37).float(message.floatValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBenchmarkValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.intValue = reader.int32();
                    break;
                case 2:
                    message.longValue = main_benchmark_longToNumber(reader.int64());
                    break;
                case 3:
                    message.boolValue = reader.bool();
                    break;
                case 4:
                    message.floatValue = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseBenchmarkValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.boolValue = (_c = object.boolValue) !== null && _c !== void 0 ? _c : undefined;
        message.floatValue = (_d = object.floatValue) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function main_createBaseBenchmarkRequest() {
    return { benchmarkNames: [], expirationTimestamp: undefined };
}
const main_BenchmarkRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.benchmarkNames) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.expirationTimestamp !== undefined) {
            main_Timestamp.encode(main_toTimestamp(message.expirationTimestamp), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBenchmarkRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.benchmarkNames.push(reader.int32());
                        }
                    }
                    else {
                        message.benchmarkNames.push(reader.int32());
                    }
                    break;
                case 2:
                    message.expirationTimestamp = main_fromTimestamp(main_Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseBenchmarkRequest();
        message.benchmarkNames = ((_a = object.benchmarkNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.expirationTimestamp = (_b = object.expirationTimestamp) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function main_createBaseBenchmarkResult() {
    return { name: 0, value: undefined };
}
const main_BenchmarkResult = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.name !== 0) {
            writer.uint32(8).int32(message.name);
        }
        if (message.value !== undefined) {
            main_BenchmarkValue.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBenchmarkResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.int32();
                    break;
                case 2:
                    message.value = main_BenchmarkValue.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseBenchmarkResult();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : 0;
        message.value =
            object.value !== undefined && object.value !== null ? main_BenchmarkValue.fromPartial(object.value) : undefined;
        return message;
    },
};
var main_benchmark_globalThis = (() => {
    if (typeof main_benchmark_globalThis !== "undefined")
        return main_benchmark_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function main_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function main_benchmark_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_benchmark_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=benchmark.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/common/ruid.js


const main_ruid_protobufPackage = "snapchat.common";
var main_Ruid_Type;
(function (Ruid_Type) {
    Ruid_Type[Ruid_Type["UNSET"] = 0] = "UNSET";
    Ruid_Type[Ruid_Type["USER"] = 1] = "USER";
    Ruid_Type[Ruid_Type["DEVICE"] = 2] = "DEVICE";
    Ruid_Type[Ruid_Type["WEB_CLIENT"] = 3] = "WEB_CLIENT";
    Ruid_Type[Ruid_Type["AD_ACCOUNT"] = 4] = "AD_ACCOUNT";
    Ruid_Type[Ruid_Type["USERNAME"] = 5] = "USERNAME";
    Ruid_Type[Ruid_Type["AD_MODERATION_AD"] = 6] = "AD_MODERATION_AD";
    Ruid_Type[Ruid_Type["WEB_SNAPCHAT_USER"] = 7] = "WEB_SNAPCHAT_USER";
    Ruid_Type[Ruid_Type["INTERNAL"] = 8] = "INTERNAL";
    Ruid_Type[Ruid_Type["AM_ORGANIZATION"] = 9] = "AM_ORGANIZATION";
    Ruid_Type[Ruid_Type["AM_MEMBER"] = 10] = "AM_MEMBER";
    Ruid_Type[Ruid_Type["AM_SESSION"] = 11] = "AM_SESSION";
    Ruid_Type[Ruid_Type["AM_PROFILE"] = 12] = "AM_PROFILE";
    Ruid_Type[Ruid_Type["AM_SNAPCHAT_USER"] = 13] = "AM_SNAPCHAT_USER";
    Ruid_Type[Ruid_Type["SNAPCHAT_ADVERTISING"] = 14] = "SNAPCHAT_ADVERTISING";
    Ruid_Type[Ruid_Type["AM_CLIENT"] = 15] = "AM_CLIENT";
    Ruid_Type[Ruid_Type["MISCHIEF"] = 16] = "MISCHIEF";
    Ruid_Type[Ruid_Type["ARES_VISITOR"] = 17] = "ARES_VISITOR";
    Ruid_Type[Ruid_Type["POD_NAME"] = 18] = "POD_NAME";
    Ruid_Type[Ruid_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_Ruid_Type || (main_Ruid_Type = {}));
function main_createBaseRuid() {
    return { type: 0, stringValue: "", loggingIdValue: "" };
}
const main_Ruid = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.stringValue !== "") {
            writer.uint32(18).string(message.stringValue);
        }
        if (message.loggingIdValue !== "") {
            writer.uint32(26).string(message.loggingIdValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseRuid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.stringValue = reader.string();
                    break;
                case 3:
                    message.loggingIdValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseRuid();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.stringValue = (_b = object.stringValue) !== null && _b !== void 0 ? _b : "";
        message.loggingIdValue = (_c = object.loggingIdValue) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=ruid.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/google/protobuf/wrappers.js


const main_wrappers_protobufPackage = "google.protobuf";
function main_createBaseDoubleValue() {
    return { value: 0 };
}
const main_DoubleValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(9).double(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseDoubleValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseDoubleValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseFloatValue() {
    return { value: 0 };
}
const main_FloatValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(13).float(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseFloatValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.float();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseFloatValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseInt64Value() {
    return { value: 0 };
}
const main_Int64Value = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).int64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = main_wrappers_longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseUInt64Value() {
    return { value: 0 };
}
const main_UInt64Value = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).uint64(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUInt64Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = main_wrappers_longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseUInt64Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseInt32Value() {
    return { value: 0 };
}
const main_Int32Value = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseUInt32Value() {
    return { value: 0 };
}
const main_UInt32Value = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== 0) {
            writer.uint32(8).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUInt32Value();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseUInt32Value();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseBoolValue() {
    return { value: false };
}
const main_BoolValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value === true) {
            writer.uint32(8).bool(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBoolValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseBoolValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function main_createBaseStringValue() {
    return { value: "" };
}
const main_StringValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value !== "") {
            writer.uint32(10).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseStringValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseStringValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseBytesValue() {
    return { value: new Uint8Array() };
}
const main_BytesValue = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.value.length !== 0) {
            writer.uint32(10).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBytesValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseBytesValue();
        message.value = (_a = object.value) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
var main_wrappers_globalThis = (() => {
    if (typeof main_wrappers_globalThis !== "undefined")
        return main_wrappers_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_wrappers_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_wrappers_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=wrappers.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_request.js





const main_config_request_protobufPackage = "snapchat.cdp.cof";
var main_ConfigTargetingTriggerEventType;
(function (ConfigTargetingTriggerEventType) {
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNKNOWN_EVENT_TYPE"] = 0] = "UNKNOWN_EVENT_TYPE";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["COLD_START"] = 1] = "COLD_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["WARM_START"] = 2] = "WARM_START";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["FOREGROUND_TRIGGER"] = 3] = "FOREGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["BACKGROUND_TRIGGER"] = 4] = "BACKGROUND_TRIGGER";
    ConfigTargetingTriggerEventType[ConfigTargetingTriggerEventType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ConfigTargetingTriggerEventType || (main_ConfigTargetingTriggerEventType = {}));
var main_ConfigTargetingAppState;
(function (ConfigTargetingAppState) {
    ConfigTargetingAppState[ConfigTargetingAppState["UNKNOWN_APP_STATE"] = 0] = "UNKNOWN_APP_STATE";
    ConfigTargetingAppState[ConfigTargetingAppState["FOREGROUND"] = 1] = "FOREGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["BACKGROUND"] = 2] = "BACKGROUND";
    ConfigTargetingAppState[ConfigTargetingAppState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ConfigTargetingAppState || (main_ConfigTargetingAppState = {}));
var main_ConfigTargetingInstrumentation;
(function (ConfigTargetingInstrumentation) {
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["DEFAULT_INSTRUMENTATION"] = 0] = "DEFAULT_INSTRUMENTATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["USER_AUTHENTICATION"] = 1] = "USER_AUTHENTICATION";
    ConfigTargetingInstrumentation[ConfigTargetingInstrumentation["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ConfigTargetingInstrumentation || (main_ConfigTargetingInstrumentation = {}));
var main_Connectivity_NetworkType;
(function (Connectivity_NetworkType) {
    Connectivity_NetworkType[Connectivity_NetworkType["UNKNOWN_NETWORK_TYPE"] = 0] = "UNKNOWN_NETWORK_TYPE";
    Connectivity_NetworkType[Connectivity_NetworkType["CELLULAR"] = 1] = "CELLULAR";
    Connectivity_NetworkType[Connectivity_NetworkType["WIFI"] = 2] = "WIFI";
    Connectivity_NetworkType[Connectivity_NetworkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_Connectivity_NetworkType || (main_Connectivity_NetworkType = {}));
function main_createBaseConfigTargetingRequest() {
    return {
        configResultsEtag: "",
        namespaces: [],
        ghostId: "",
        countryCode: "",
        screenWidth: 0,
        screenHeight: 0,
        connectivity: undefined,
        maxVideoWidthPx: 0,
        maxVideoHeightPx: 0,
        benchmarkResults: [],
        deltaSync: false,
        userAgent: "",
        triggerEventType: 0,
        appState: 0,
        locale: "",
        deviceId: "",
        userId: "",
        clientIp: "",
        isUnAuthorized: false,
        appLocale: "",
        instrumentation: 0,
        lastSuccessfulSync: 0,
        isLogout: false,
        packageInstaller: "",
        syncTriggerBlizzardSessionId: "",
        syncExecutionBlizzardSessionId: "",
        cofSyncTriggerDelayFromStartupMs: 0,
        cofSyncExecutionDelayFromStartupMs: 0,
        syncTriggerTime: 0,
        decoderEncoderAvailability: undefined,
        snapkitAppId: "",
        lenscoreVersion: 0,
        ruid: undefined,
        configNames: [],
        includeTestUserTreatments: false,
        disableExposureLogging: false,
        lensClusterOrig4: 0,
        clientId: "",
    };
}
const main_ConfigTargetingRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configResultsEtag !== "") {
            writer.uint32(10).string(message.configResultsEtag);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.ghostId !== "") {
            writer.uint32(26).string(message.ghostId);
        }
        if (message.countryCode !== "") {
            writer.uint32(34).string(message.countryCode);
        }
        if (message.screenWidth !== 0) {
            writer.uint32(40).int32(message.screenWidth);
        }
        if (message.screenHeight !== 0) {
            writer.uint32(48).int32(message.screenHeight);
        }
        if (message.connectivity !== undefined) {
            main_Connectivity.encode(message.connectivity, writer.uint32(58).fork()).ldelim();
        }
        if (message.maxVideoWidthPx !== 0) {
            writer.uint32(64).int32(message.maxVideoWidthPx);
        }
        if (message.maxVideoHeightPx !== 0) {
            writer.uint32(72).int32(message.maxVideoHeightPx);
        }
        for (const v of message.benchmarkResults) {
            main_BenchmarkResult.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.deltaSync === true) {
            writer.uint32(88).bool(message.deltaSync);
        }
        if (message.userAgent !== "") {
            writer.uint32(98).string(message.userAgent);
        }
        if (message.triggerEventType !== 0) {
            writer.uint32(104).int32(message.triggerEventType);
        }
        if (message.appState !== 0) {
            writer.uint32(112).int32(message.appState);
        }
        if (message.locale !== "") {
            writer.uint32(122).string(message.locale);
        }
        if (message.deviceId !== "") {
            writer.uint32(130).string(message.deviceId);
        }
        if (message.userId !== "") {
            writer.uint32(138).string(message.userId);
        }
        if (message.clientIp !== "") {
            writer.uint32(146).string(message.clientIp);
        }
        if (message.isUnAuthorized === true) {
            writer.uint32(152).bool(message.isUnAuthorized);
        }
        if (message.appLocale !== "") {
            writer.uint32(162).string(message.appLocale);
        }
        if (message.instrumentation !== 0) {
            writer.uint32(168).int32(message.instrumentation);
        }
        if (message.lastSuccessfulSync !== 0) {
            writer.uint32(176).int64(message.lastSuccessfulSync);
        }
        if (message.isLogout === true) {
            writer.uint32(184).bool(message.isLogout);
        }
        if (message.packageInstaller !== "") {
            writer.uint32(194).string(message.packageInstaller);
        }
        if (message.syncTriggerBlizzardSessionId !== "") {
            writer.uint32(202).string(message.syncTriggerBlizzardSessionId);
        }
        if (message.syncExecutionBlizzardSessionId !== "") {
            writer.uint32(210).string(message.syncExecutionBlizzardSessionId);
        }
        if (message.cofSyncTriggerDelayFromStartupMs !== 0) {
            writer.uint32(216).int32(message.cofSyncTriggerDelayFromStartupMs);
        }
        if (message.cofSyncExecutionDelayFromStartupMs !== 0) {
            writer.uint32(224).int32(message.cofSyncExecutionDelayFromStartupMs);
        }
        if (message.syncTriggerTime !== 0) {
            writer.uint32(232).int64(message.syncTriggerTime);
        }
        if (message.decoderEncoderAvailability !== undefined) {
            main_DecoderEncoderAvailablity.encode(message.decoderEncoderAvailability, writer.uint32(242).fork()).ldelim();
        }
        if (message.snapkitAppId !== "") {
            writer.uint32(250).string(message.snapkitAppId);
        }
        if (message.lenscoreVersion !== 0) {
            writer.uint32(256).int32(message.lenscoreVersion);
        }
        if (message.ruid !== undefined) {
            main_Ruid.encode(message.ruid, writer.uint32(266).fork()).ldelim();
        }
        for (const v of message.configNames) {
            writer.uint32(274).string(v);
        }
        if (message.includeTestUserTreatments === true) {
            writer.uint32(288).bool(message.includeTestUserTreatments);
        }
        if (message.disableExposureLogging === true) {
            writer.uint32(296).bool(message.disableExposureLogging);
        }
        if (message.lensClusterOrig4 !== 0) {
            writer.uint32(304).int32(message.lensClusterOrig4);
        }
        if (message.clientId !== "") {
            writer.uint32(314).string(message.clientId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResultsEtag = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 3:
                    message.ghostId = reader.string();
                    break;
                case 4:
                    message.countryCode = reader.string();
                    break;
                case 5:
                    message.screenWidth = reader.int32();
                    break;
                case 6:
                    message.screenHeight = reader.int32();
                    break;
                case 7:
                    message.connectivity = main_Connectivity.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.maxVideoWidthPx = reader.int32();
                    break;
                case 9:
                    message.maxVideoHeightPx = reader.int32();
                    break;
                case 10:
                    message.benchmarkResults.push(main_BenchmarkResult.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.deltaSync = reader.bool();
                    break;
                case 12:
                    message.userAgent = reader.string();
                    break;
                case 13:
                    message.triggerEventType = reader.int32();
                    break;
                case 14:
                    message.appState = reader.int32();
                    break;
                case 15:
                    message.locale = reader.string();
                    break;
                case 16:
                    message.deviceId = reader.string();
                    break;
                case 17:
                    message.userId = reader.string();
                    break;
                case 18:
                    message.clientIp = reader.string();
                    break;
                case 19:
                    message.isUnAuthorized = reader.bool();
                    break;
                case 20:
                    message.appLocale = reader.string();
                    break;
                case 21:
                    message.instrumentation = reader.int32();
                    break;
                case 22:
                    message.lastSuccessfulSync = main_config_request_longToNumber(reader.int64());
                    break;
                case 23:
                    message.isLogout = reader.bool();
                    break;
                case 24:
                    message.packageInstaller = reader.string();
                    break;
                case 25:
                    message.syncTriggerBlizzardSessionId = reader.string();
                    break;
                case 26:
                    message.syncExecutionBlizzardSessionId = reader.string();
                    break;
                case 27:
                    message.cofSyncTriggerDelayFromStartupMs = reader.int32();
                    break;
                case 28:
                    message.cofSyncExecutionDelayFromStartupMs = reader.int32();
                    break;
                case 29:
                    message.syncTriggerTime = main_config_request_longToNumber(reader.int64());
                    break;
                case 30:
                    message.decoderEncoderAvailability = main_DecoderEncoderAvailablity.decode(reader, reader.uint32());
                    break;
                case 31:
                    message.snapkitAppId = reader.string();
                    break;
                case 32:
                    message.lenscoreVersion = reader.int32();
                    break;
                case 33:
                    message.ruid = main_Ruid.decode(reader, reader.uint32());
                    break;
                case 34:
                    message.configNames.push(reader.string());
                    break;
                case 36:
                    message.includeTestUserTreatments = reader.bool();
                    break;
                case 37:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 38:
                    message.lensClusterOrig4 = reader.int32();
                    break;
                case 39:
                    message.clientId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
        const message = main_createBaseConfigTargetingRequest();
        message.configResultsEtag = (_a = object.configResultsEtag) !== null && _a !== void 0 ? _a : "";
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.ghostId = (_c = object.ghostId) !== null && _c !== void 0 ? _c : "";
        message.countryCode = (_d = object.countryCode) !== null && _d !== void 0 ? _d : "";
        message.screenWidth = (_e = object.screenWidth) !== null && _e !== void 0 ? _e : 0;
        message.screenHeight = (_f = object.screenHeight) !== null && _f !== void 0 ? _f : 0;
        message.connectivity =
            object.connectivity !== undefined && object.connectivity !== null
                ? main_Connectivity.fromPartial(object.connectivity)
                : undefined;
        message.maxVideoWidthPx = (_g = object.maxVideoWidthPx) !== null && _g !== void 0 ? _g : 0;
        message.maxVideoHeightPx = (_h = object.maxVideoHeightPx) !== null && _h !== void 0 ? _h : 0;
        message.benchmarkResults = ((_j = object.benchmarkResults) === null || _j === void 0 ? void 0 : _j.map((e) => main_BenchmarkResult.fromPartial(e))) || [];
        message.deltaSync = (_k = object.deltaSync) !== null && _k !== void 0 ? _k : false;
        message.userAgent = (_l = object.userAgent) !== null && _l !== void 0 ? _l : "";
        message.triggerEventType = (_m = object.triggerEventType) !== null && _m !== void 0 ? _m : 0;
        message.appState = (_o = object.appState) !== null && _o !== void 0 ? _o : 0;
        message.locale = (_p = object.locale) !== null && _p !== void 0 ? _p : "";
        message.deviceId = (_q = object.deviceId) !== null && _q !== void 0 ? _q : "";
        message.userId = (_r = object.userId) !== null && _r !== void 0 ? _r : "";
        message.clientIp = (_s = object.clientIp) !== null && _s !== void 0 ? _s : "";
        message.isUnAuthorized = (_t = object.isUnAuthorized) !== null && _t !== void 0 ? _t : false;
        message.appLocale = (_u = object.appLocale) !== null && _u !== void 0 ? _u : "";
        message.instrumentation = (_v = object.instrumentation) !== null && _v !== void 0 ? _v : 0;
        message.lastSuccessfulSync = (_w = object.lastSuccessfulSync) !== null && _w !== void 0 ? _w : 0;
        message.isLogout = (_x = object.isLogout) !== null && _x !== void 0 ? _x : false;
        message.packageInstaller = (_y = object.packageInstaller) !== null && _y !== void 0 ? _y : "";
        message.syncTriggerBlizzardSessionId = (_z = object.syncTriggerBlizzardSessionId) !== null && _z !== void 0 ? _z : "";
        message.syncExecutionBlizzardSessionId = (_0 = object.syncExecutionBlizzardSessionId) !== null && _0 !== void 0 ? _0 : "";
        message.cofSyncTriggerDelayFromStartupMs = (_1 = object.cofSyncTriggerDelayFromStartupMs) !== null && _1 !== void 0 ? _1 : 0;
        message.cofSyncExecutionDelayFromStartupMs = (_2 = object.cofSyncExecutionDelayFromStartupMs) !== null && _2 !== void 0 ? _2 : 0;
        message.syncTriggerTime = (_3 = object.syncTriggerTime) !== null && _3 !== void 0 ? _3 : 0;
        message.decoderEncoderAvailability =
            object.decoderEncoderAvailability !== undefined && object.decoderEncoderAvailability !== null
                ? main_DecoderEncoderAvailablity.fromPartial(object.decoderEncoderAvailability)
                : undefined;
        message.snapkitAppId = (_4 = object.snapkitAppId) !== null && _4 !== void 0 ? _4 : "";
        message.lenscoreVersion = (_5 = object.lenscoreVersion) !== null && _5 !== void 0 ? _5 : 0;
        message.ruid = object.ruid !== undefined && object.ruid !== null ? main_Ruid.fromPartial(object.ruid) : undefined;
        message.configNames = ((_6 = object.configNames) === null || _6 === void 0 ? void 0 : _6.map((e) => e)) || [];
        message.includeTestUserTreatments = (_7 = object.includeTestUserTreatments) !== null && _7 !== void 0 ? _7 : false;
        message.disableExposureLogging = (_8 = object.disableExposureLogging) !== null && _8 !== void 0 ? _8 : false;
        message.lensClusterOrig4 = (_9 = object.lensClusterOrig4) !== null && _9 !== void 0 ? _9 : 0;
        message.clientId = (_10 = object.clientId) !== null && _10 !== void 0 ? _10 : "";
        return message;
    },
};
function main_createBaseConnectivity() {
    return { networkType: 0, isMetered: undefined, isRoaming: undefined, carrier: "" };
}
const main_Connectivity = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.networkType !== 0) {
            writer.uint32(8).int32(message.networkType);
        }
        if (message.isMetered !== undefined) {
            main_BoolValue.encode({ value: message.isMetered }, writer.uint32(18).fork()).ldelim();
        }
        if (message.isRoaming !== undefined) {
            main_BoolValue.encode({ value: message.isRoaming }, writer.uint32(26).fork()).ldelim();
        }
        if (message.carrier !== "") {
            writer.uint32(34).string(message.carrier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConnectivity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.networkType = reader.int32();
                    break;
                case 2:
                    message.isMetered = main_BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 3:
                    message.isRoaming = main_BoolValue.decode(reader, reader.uint32()).value;
                    break;
                case 4:
                    message.carrier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseConnectivity();
        message.networkType = (_a = object.networkType) !== null && _a !== void 0 ? _a : 0;
        message.isMetered = (_b = object.isMetered) !== null && _b !== void 0 ? _b : undefined;
        message.isRoaming = (_c = object.isRoaming) !== null && _c !== void 0 ? _c : undefined;
        message.carrier = (_d = object.carrier) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function main_createBaseDecoderEncoderAvailablity() {
    return { isSnapVp9DecoderAvailable: false, isSnapAv1DecoderAvailable: false };
}
const main_DecoderEncoderAvailablity = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.isSnapVp9DecoderAvailable === true) {
            writer.uint32(8).bool(message.isSnapVp9DecoderAvailable);
        }
        if (message.isSnapAv1DecoderAvailable === true) {
            writer.uint32(16).bool(message.isSnapAv1DecoderAvailable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseDecoderEncoderAvailablity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.isSnapVp9DecoderAvailable = reader.bool();
                    break;
                case 2:
                    message.isSnapAv1DecoderAvailable = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseDecoderEncoderAvailablity();
        message.isSnapVp9DecoderAvailable = (_a = object.isSnapVp9DecoderAvailable) !== null && _a !== void 0 ? _a : false;
        message.isSnapAv1DecoderAvailable = (_b = object.isSnapAv1DecoderAvailable) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
var main_config_request_globalThis = (() => {
    if (typeof main_config_request_globalThis !== "undefined")
        return main_config_request_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_config_request_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_config_request_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=config_request.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/common/value.js



const main_value_protobufPackage = "snapchat.common";
function main_createBaseMapRecord() {
    return { key: "", value: "" };
}
const main_MapRecord = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseMapRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseMapRecord();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseMapRecords() {
    return { records: [] };
}
const main_MapRecords = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.records) {
            main_MapRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseMapRecords();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.records.push(main_MapRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseMapRecords();
        message.records = ((_a = object.records) === null || _a === void 0 ? void 0 : _a.map((e) => main_MapRecord.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseStringArray() {
    return { value: [] };
}
const main_StringArray = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.value) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseStringArray();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseStringArray();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function main_createBaseValue() {
    return {
        intValue: undefined,
        longValue: undefined,
        floatValue: undefined,
        doubleValue: undefined,
        boolValue: undefined,
        stringValue: undefined,
        anyValue: undefined,
        mapValue: undefined,
        intPairValue: undefined,
        stringArrayValue: undefined,
    };
}
const main_Value = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.intValue !== undefined) {
            writer.uint32(8).int32(message.intValue);
        }
        if (message.longValue !== undefined) {
            writer.uint32(16).int64(message.longValue);
        }
        if (message.floatValue !== undefined) {
            writer.uint32(29).float(message.floatValue);
        }
        if (message.doubleValue !== undefined) {
            writer.uint32(73).double(message.doubleValue);
        }
        if (message.boolValue !== undefined) {
            writer.uint32(32).bool(message.boolValue);
        }
        if (message.stringValue !== undefined) {
            writer.uint32(42).string(message.stringValue);
        }
        if (message.anyValue !== undefined) {
            main_Any.encode(message.anyValue, writer.uint32(50).fork()).ldelim();
        }
        if (message.mapValue !== undefined) {
            main_MapRecords.encode(message.mapValue, writer.uint32(58).fork()).ldelim();
        }
        if (message.intPairValue !== undefined) {
            writer.uint32(65).fixed64(message.intPairValue);
        }
        if (message.stringArrayValue !== undefined) {
            main_StringArray.encode(message.stringArrayValue, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseValue();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.intValue = reader.int32();
                    break;
                case 2:
                    message.longValue = main_value_longToNumber(reader.int64());
                    break;
                case 3:
                    message.floatValue = reader.float();
                    break;
                case 9:
                    message.doubleValue = reader.double();
                    break;
                case 4:
                    message.boolValue = reader.bool();
                    break;
                case 5:
                    message.stringValue = reader.string();
                    break;
                case 6:
                    message.anyValue = main_Any.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.mapValue = main_MapRecords.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.intPairValue = main_value_longToNumber(reader.fixed64());
                    break;
                case 10:
                    message.stringArrayValue = main_StringArray.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = main_createBaseValue();
        message.intValue = (_a = object.intValue) !== null && _a !== void 0 ? _a : undefined;
        message.longValue = (_b = object.longValue) !== null && _b !== void 0 ? _b : undefined;
        message.floatValue = (_c = object.floatValue) !== null && _c !== void 0 ? _c : undefined;
        message.doubleValue = (_d = object.doubleValue) !== null && _d !== void 0 ? _d : undefined;
        message.boolValue = (_e = object.boolValue) !== null && _e !== void 0 ? _e : undefined;
        message.stringValue = (_f = object.stringValue) !== null && _f !== void 0 ? _f : undefined;
        message.anyValue =
            object.anyValue !== undefined && object.anyValue !== null ? main_Any.fromPartial(object.anyValue) : undefined;
        message.mapValue =
            object.mapValue !== undefined && object.mapValue !== null ? main_MapRecords.fromPartial(object.mapValue) : undefined;
        message.intPairValue = (_g = object.intPairValue) !== null && _g !== void 0 ? _g : undefined;
        message.stringArrayValue =
            object.stringArrayValue !== undefined && object.stringArrayValue !== null
                ? main_StringArray.fromPartial(object.stringArrayValue)
                : undefined;
        return message;
    },
};
var main_value_globalThis = (() => {
    if (typeof main_value_globalThis !== "undefined")
        return main_value_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_value_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_value_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=value.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_result.js



const main_config_result_protobufPackage = "snapchat.cdp.cof";
var main_ConfigResult_ServePlatform;
(function (ConfigResult_ServePlatform) {
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNKNOWN_CONTEXT_PLATFORM"] = 0] = "UNKNOWN_CONTEXT_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["IOS_PLATFORM"] = 1] = "IOS_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["ANDROID_PLATFORM"] = 2] = "ANDROID_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["SERVER_PLATFORM"] = 3] = "SERVER_PLATFORM";
    ConfigResult_ServePlatform[ConfigResult_ServePlatform["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ConfigResult_ServePlatform || (main_ConfigResult_ServePlatform = {}));
var main_ClientTargetingExpression_Operator;
(function (ClientTargetingExpression_Operator) {
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNKNOWN_OPERATOR"] = 0] = "UNKNOWN_OPERATOR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["AND"] = 1] = "AND";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["OR"] = 2] = "OR";
    ClientTargetingExpression_Operator[ClientTargetingExpression_Operator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ClientTargetingExpression_Operator || (main_ClientTargetingExpression_Operator = {}));
var main_ClientTargetingExpression_PredicateOperator;
(function (ClientTargetingExpression_PredicateOperator) {
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNKNOWN_PREDICATE_OPERATOR"] = 0] = "UNKNOWN_PREDICATE_OPERATOR";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["EQUAL"] = 1] = "EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["NOT_EQUAL"] = 2] = "NOT_EQUAL";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["GREATER_THAN_OR_EQUAL_TO"] = 3] = "GREATER_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["LESS_THAN_OR_EQUAL_TO"] = 4] = "LESS_THAN_OR_EQUAL_TO";
    ClientTargetingExpression_PredicateOperator[ClientTargetingExpression_PredicateOperator["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ClientTargetingExpression_PredicateOperator || (main_ClientTargetingExpression_PredicateOperator = {}));
var main_ClientTargetingExpression_Property;
(function (ClientTargetingExpression_Property) {
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNKNOWN_PROPERTY"] = 0] = "UNKNOWN_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BATTERY_LEVEL"] = 1] = "BATTERY_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFLINE"] = 2] = "IS_OFFLINE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_CHARGING"] = 3] = "IS_CHARGING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BANDWIDTH"] = 4] = "BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_SIZE"] = 5] = "DISK_SIZE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DISK_AVAILABLE"] = 6] = "DISK_AVAILABLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE_DEPRECATED"] = 7] = "MEDIA_TYPE_DEPRECATED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_STORY"] = 8] = "IS_PUBLIC_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_OFFICIAL_STORY"] = 9] = "IS_OFFICIAL_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_DIRECTION"] = 10] = "CAMERA_DIRECTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_CONTEXT"] = 11] = "CAMERA_CONTEXT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_API"] = 12] = "CAMERA_API";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_FLASH_STATE"] = 13] = "CAMERA_FLASH_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_SOURCE"] = 14] = "SNAP_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LEGACY_MUSHROOM_CONTENT_TYPE"] = 15] = "LEGACY_MUSHROOM_CONTENT_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPLOAD_BANDWIDTH"] = 16] = "UPLOAD_BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_LEVEL"] = 17] = "CAMERA2_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_NIGHT_MODE_STATE"] = 18] = "CAMERA_NIGHT_MODE_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_LANGUAGE"] = 19] = "USER_LANGUAGE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VIDEO_DURATION"] = 20] = "VIDEO_DURATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_MOBILE_NETWORK_GENERATION"] = 21] = "REALTIME_MOBILE_NETWORK_GENERATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_TYPE"] = 22] = "REALTIME_NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_METERED"] = 23] = "REALTIME_NETWORK_IS_METERED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REALTIME_NETWORK_IS_ROAMING"] = 24] = "REALTIME_NETWORK_IS_ROAMING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA_IS_FIRST_CAPTURE"] = 25] = "CAMERA_IS_FIRST_CAPTURE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PICTURE_MODE"] = 26] = "PICTURE_MODE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_USE_CASE"] = 27] = "BOLT_USE_CASE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CDN_EXPERIMENTATION_ID"] = 28] = "BOLT_CDN_EXPERIMENTATION_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_LENS_ACTIVATION"] = 29] = "MINS_SINCE_LAST_LENS_ACTIVATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION"] = 30] = "MINS_SINCE_LAST_SNAPPABLE_LENS_ACTIVATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_LOGIN_OR_OPEN"] = 31] = "DAYS_SINCE_LAST_LOGIN_OR_OPEN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPECTACLES_VERSION"] = 32] = "SPECTACLES_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STICKY_MAX_CONNECTION_TYPE"] = 33] = "STICKY_MAX_CONNECTION_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_ANIMATED_OVERLAY"] = 34] = "WITH_ANIMATED_OVERLAY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ESTIMATED_DURATION_FOR_EVENT_MS"] = 35] = "ESTIMATED_DURATION_FOR_EVENT_MS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["URL"] = 36] = "URL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_SOURCE"] = 37] = "MEDIA_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ASSET_TYPE"] = 38] = "ASSET_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_IS_CONTENT_POPULAR"] = 39] = "BOLT_IS_CONTENT_POPULAR";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAPTURE_MODE"] = 40] = "CAPTURE_MODE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["VP9_SOFTWARE_DECODING_SUPPORTED"] = 41] = "VP9_SOFTWARE_DECODING_SUPPORTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SOFTWARE_DECODING_SUPPORTED"] = 42] = "AV1_SOFTWARE_DECODING_SUPPORTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WITH_MUSIC"] = 43] = "WITH_MUSIC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FEATURE_PROVIDED_SIZE"] = 44] = "FEATURE_PROVIDED_SIZE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_TYPE"] = 45] = "MEDIA_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCANNED_CATEGORY_IDS"] = 46] = "SCANNED_CATEGORY_IDS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTENT_VIEW_SOURCE"] = 47] = "CONTENT_VIEW_SOURCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_HEVC"] = 48] = "RECIPIENTS_SUPPORT_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COGNAC_APP_ID"] = 49] = "COGNAC_APP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_VERIFIED"] = 50] = "EMAIL_VERIFIED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PHONE_VERIFIED"] = 51] = "PHONE_VERIFIED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NOTIFICATION_PERM_GRANTED"] = 52] = "NOTIFICATION_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_GRANTED"] = 53] = "CONTACT_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_COUNT"] = 54] = "MUTUAL_FRIENDS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GROUPS_COUNT"] = 55] = "GROUPS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS"] = 56] = "HAS_NON_TEAM_SNAPCHAT_CONVERSATIONS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLAYBACK_ITEM_TYPE"] = 57] = "PLAYBACK_ITEM_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_BOOLEAN_PROPERTY"] = 58] = "SUP_BOOLEAN_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_INTEGER_PROPERTY"] = 59] = "SUP_INTEGER_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_LONG_PROPERTY"] = 60] = "SUP_LONG_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_STRING_PROPERTY"] = 61] = "SUP_STRING_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_DOUBLE_PROPERTY"] = 62] = "SUP_DOUBLE_PROPERTY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_MILLIS_PROPERTY_TO_NOW"] = 63] = "SUP_MILLIS_PROPERTY_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USED_SPECTACLES"] = 64] = "HAS_USED_SPECTACLES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_SECS_PROPERTY_TO_NOW"] = 65] = "SUP_SECS_PROPERTY_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BOLT_CLIENT_APP_STATE"] = 66] = "BOLT_CLIENT_APP_STATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["EMAIL_SET"] = 67] = "EMAIL_SET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BITMOJI_SET"] = 68] = "BITMOJI_SET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["QUICK_TAP_CAMERA_SUPPORTED_ENABLED"] = 69] = "QUICK_TAP_CAMERA_SUPPORTED_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ADD_FRIENDS_REQUEST"] = 70] = "HAS_ADD_FRIENDS_REQUEST";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_FROM_PUSH"] = 71] = "APP_LAUNCH_FROM_PUSH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LAUNCH_TYPE"] = 72] = "APP_LAUNCH_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT"] = 73] = "BILLBOARD_CAMPAIGN_LOCAL_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 74] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT"] = 75] = "BILLBOARD_CAMPAIGN_LOCAL_CONTINUOUS_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_NUM_IN_APP_WARNINGS"] = 76] = "FST_NUM_IN_APP_WARNINGS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_SHOULD_CHANGE_PASSWORD"] = 77] = "FST_SHOULD_CHANGE_PASSWORD";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_IS_BACKGROUND_CHECK"] = 78] = "FST_IS_BACKGROUND_CHECK";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AUDIO_RECORD_PERM_GRANTED"] = 79] = "AUDIO_RECORD_PERM_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT"] = 80] = "MUTUAL_FRIENDS_WITH_BIRTHDAY_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT"] = 81] = "BILLBOARD_CAMPAIGN_LOCAL_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USE_VERTICAL_NAVIGATION"] = 82] = "USE_VERTICAL_NAVIGATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FREEABLE_DISK_AVAILABLE"] = 83] = "FREEABLE_DISK_AVAILABLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEMORIES_COUNT"] = 84] = "MEMORIES_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MODEL"] = 85] = "DEVICE_MODEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COUNTRY"] = 86] = "COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS"] = 87] = "OS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["OS_VERSION"] = 88] = "OS_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_VERSION"] = 89] = "APP_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_FLAVOR"] = 90] = "BUILD_FLAVOR";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_ID"] = 91] = "USER_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LOCALE"] = 92] = "LOCALE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_CLUSTER"] = 93] = "DEVICE_CLUSTER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_BRAND"] = 94] = "DEVICE_BRAND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_EMPLOYEE"] = 95] = "IS_EMPLOYEE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USERNAME"] = 96] = "USERNAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TEST_USER"] = 97] = "IS_TEST_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PROFILE"] = 98] = "USER_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_WIDTH"] = 99] = "SCREEN_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_HEIGHT"] = 100] = "SCREEN_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SUPPORT"] = 101] = "HEVC_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_TYPE"] = 102] = "NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_WIDTH"] = 103] = "MAX_VIDEO_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MAX_VIDEO_HEIGHT"] = 104] = "MAX_VIDEO_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_NETWORK_METERED"] = 105] = "IS_NETWORK_METERED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ROAMING"] = 106] = "IS_ROAMING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_ENGAGEMENT_LEVEL"] = 107] = "APP_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_ENGAGEMENT_LEVEL"] = 108] = "COMMUNICATION_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FRIEND_STORY_ENGAGEMENT_LEVEL"] = 109] = "FRIEND_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLIC_USER_STORY_ENGAGEMENT_LEVEL"] = 110] = "PUBLIC_USER_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PUBLISHER_STORY_ENGAGEMENT_LEVEL"] = 111] = "PUBLISHER_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_ENGAGEMENT_LEVEL"] = 112] = "LENS_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NON_FRIEND_STORY_ENGAGEMENT_LEVEL"] = 113] = "NON_FRIEND_STORY_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FOLLOWER_SIZE_LEVEL"] = 114] = "FOLLOWER_SIZE_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION"] = 115] = "DAYS_SINCE_CREATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA"] = 116] = "USER_PERSONA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_CREATION_TIME"] = 117] = "USER_CREATION_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MOBILE_NETWORK_TYPE"] = 118] = "MOBILE_NETWORK_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AGGREGATED_USER_BANDWIDTH"] = 119] = "AGGREGATED_USER_BANDWIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED"] = 120] = "LENS_CLUSTER_BIASED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_LOG"] = 121] = "LENS_CLUSTER_LOG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG"] = 122] = "LENS_CLUSTER_ORIG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_ORIG_4"] = 123] = "LENS_CLUSTER_ORIG_4";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_BIASED_LOG"] = 124] = "LENS_CLUSTER_BIASED_LOG";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_LOCALE"] = 125] = "APP_LOCALE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_COMMON_NAME"] = 126] = "DEVICE_COMMON_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_FRIEND_COUNT"] = 127] = "USER_FRIEND_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["L90_COUNTRY"] = 128] = "L90_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STUB"] = 129] = "STUB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_TRUE"] = 130] = "IS_TRUE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_RATIO"] = 131] = "STORY_POST_RATIO";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GENDER"] = 132] = "GENDER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INFERRED_AGE_BUCKET"] = 133] = "INFERRED_AGE_BUCKET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORIES"] = 134] = "STORIES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SENDS"] = 135] = "SENDS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_CREATE_L7"] = 136] = "SNAP_CREATE_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_L7"] = 137] = "STORY_POST_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNICATION_L7"] = 138] = "COMMUNICATION_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DF_L7"] = 139] = "DF_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_L7"] = 140] = "APP_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_CREATION_BUCKET"] = 141] = "DAYS_SINCE_CREATION_BUCKET";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS"] = 142] = "BIDIRECTIONAL_FRIEND_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_POST_PREDICTION"] = 143] = "STORY_POST_PREDICTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPENS"] = 144] = "APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES"] = 145] = "LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SNAPS"] = 146] = "LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_OPS"] = 147] = "LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_APP_OPENS"] = 148] = "W1_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SWIPES"] = 149] = "W1_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_SNAPS"] = 150] = "W1_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W1_LENS_OPS"] = 151] = "W1_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_APP_OPENS"] = 152] = "W2_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SWIPES"] = 153] = "W2_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_SNAPS"] = 154] = "W2_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W2_LENS_OPS"] = 155] = "W2_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_APP_OPENS"] = 156] = "W34_APP_OPENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SWIPES"] = 157] = "W34_LENS_SWIPES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_SNAPS"] = 158] = "W34_LENS_SNAPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["W34_LENS_OPS"] = 159] = "W34_LENS_OPS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_SWIPES_PREDICTION"] = 160] = "LENS_SWIPES_PREDICTION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_COUNTRY"] = 161] = "REGISTRATION_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_ASN"] = 162] = "IP_ASN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_REGION"] = 163] = "IP_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IP_CITY"] = 164] = "IP_CITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_USER_ID"] = 165] = "HAS_USER_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BITMOJI"] = 166] = "HAS_BITMOJI";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_APP_OPENS_LAST_8_DAYS"] = 167] = "NUM_APP_OPENS_LAST_8_DAYS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_VIEW_DAYS_L7"] = 168] = "NUM_FEATURE_STORY_VIEW_DAYS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_FEATURE_STORY_SYNC_DAYS_L7"] = 169] = "NUM_FEATURE_STORY_SYNC_DAYS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEXAGON_NN_SUPPORTED_VERSION"] = 170] = "HEXAGON_NN_SUPPORTED_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NETWORK_QUALITY"] = 171] = "NETWORK_QUALITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_MEMORY_MB"] = 172] = "DEVICE_MEMORY_MB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_GL_VERSION"] = 173] = "DEVICE_GL_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRO_STATUS"] = 174] = "SNAP_PRO_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_VP9_DECODING_SUPPORT"] = 175] = "DEVICE_VP9_DECODING_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AVG_FRIEND_STORY_VIEW_COUNT_L7"] = 176] = "AVG_FRIEND_STORY_VIEW_COUNT_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_JOIN_TIME"] = 177] = "GAME_JOIN_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GAME_LAST_ACTIVE_TIME"] = 178] = "GAME_LAST_ACTIVE_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_GAME_ACTIVITY"] = 179] = "DAYS_SINCE_FIRST_GAME_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_GAME_ACTIVITY"] = 180] = "DAYS_SINCE_LAST_GAME_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PF_PAGE_SESSIONS_WITH_LONG_IMP"] = 181] = "PF_PAGE_SESSIONS_WITH_LONG_IMP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WIRELESS_CARRIER"] = 182] = "WIRELESS_CARRIER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_JOIN_TIME"] = 183] = "MINIS_JOIN_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MINIS_LAST_ACTIVE_TIME"] = 184] = "MINIS_LAST_ACTIVE_TIME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_MINIS_ACTIVITY"] = 185] = "DAYS_SINCE_FIRST_MINIS_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_MINIS_ACTIVITY"] = 186] = "DAYS_SINCE_LAST_MINIS_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DEVICE_AV1_DECODING_SUPPORT"] = 187] = "DEVICE_AV1_DECODING_SUPPORT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_PACKAGE_INSTALLER"] = 188] = "APP_PACKAGE_INSTALLER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL"] = 189] = "STORY_VIEWS_5TH_TAB_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REPORTED_AGE"] = 190] = "REPORTED_AGE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ANDROID_MOBILE_SERVICES_PROVIDER"] = 191] = "ANDROID_MOBILE_SERVICES_PROVIDER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACQUIRED_USER"] = 192] = "IS_ACQUIRED_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["YDPI"] = 193] = "YDPI";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BIDIRECTIONAL_FRIEND_STATUS_VELLUM"] = 194] = "BIDIRECTIONAL_FRIEND_STATUS_VELLUM";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORIGIN"] = 195] = "ORIGIN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENSCORE_VERSION"] = 196] = "LENSCORE_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPKIT_APP_ID"] = 197] = "SNAPKIT_APP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GPU"] = 198] = "GPU";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_NAME"] = 199] = "CHIPSET_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHIPSET_VERSION"] = 200] = "CHIPSET_VERSION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ZERO_IDFA"] = 201] = "HAS_ZERO_IDFA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LIMIT_AD_TRACKING"] = 202] = "LIMIT_AD_TRACKING";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATT_AUTH_STATUS"] = 203] = "ATT_AUTH_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_FRONT_SS_GAIN_OVER_TPA"] = 204] = "CAMERA2_FRONT_SS_GAIN_OVER_TPA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ATTACHMENT_TOOL_V2"] = 205] = "ATTACHMENT_TOOL_V2";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_PERSONA_V3"] = 206] = "USER_PERSONA_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITH_HEVC"] = 207] = "SNAPS_SEND_WITH_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAPS_SEND_WITHOUT_HEVC"] = 208] = "SNAPS_SEND_WITHOUT_HEVC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_NATIVE_CRASH_OVER_CAMERA1"] = 209] = "CAMERA2_NATIVE_CRASH_OVER_CAMERA1";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMERA2_G2S_LATENCY_OVER_CAMERA1"] = 210] = "CAMERA2_G2S_LATENCY_OVER_CAMERA1";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_INTERNAL"] = 211] = "IS_INTERNAL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_WEB"] = 212] = "IS_WEB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MAP"] = 213] = "APP_OPEN_TO_MAP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_FRIENDSFEED"] = 214] = "APP_OPEN_TO_FRIENDSFEED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_LENSES"] = 215] = "APP_OPEN_TO_LENSES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_MEMORIES"] = 216] = "APP_OPEN_TO_MEMORIES";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_COMMUNITY"] = 217] = "APP_OPEN_TO_COMMUNITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["APP_OPEN_TO_SPOTLIGHT"] = 218] = "APP_OPEN_TO_SPOTLIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_IMPACTED_BY_PINC_893"] = 219] = "IS_IMPACTED_BY_PINC_893";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_BEFORE_BIRTHDAY"] = 220] = "DAYS_BEFORE_BIRTHDAY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_BIPA"] = 221] = "HAS_BIPA";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_ENGAGEMENT_STATUS"] = 222] = "SPOTLIGHT_STORY_ENGAGEMENT_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["INCLUSION_PANEL_MEMBER"] = 223] = "INCLUSION_PANEL_MEMBER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_HW_DECODER"] = 224] = "HEVC_HW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HEVC_SW_DECODER"] = 225] = "HEVC_SW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HASH_MURMUR3_128_MOD_100"] = 226] = "HASH_MURMUR3_128_MOD_100";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_ACTIVE_SNAPCHAT_PLUS"] = 227] = "HAS_ACTIVE_SNAPCHAT_PLUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_KIT_OAUTH_ID"] = 228] = "SNAP_KIT_OAUTH_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_TYPE"] = 229] = "ORGANIZATION_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_SUPPORT_REQUIRED"] = 230] = "CHUNK_UPLOAD_SUPPORT_REQUIRED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CLOUDFRONT_POP"] = 231] = "CLOUDFRONT_POP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 232] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT"] = 233] = "BILLBOARD_CAMPAIGN_LOCAL_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT"] = 234] = "BILLBOARD_CAMPAIGN_LOCAL_INTERACTION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 235] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH"] = 236] = "FST_LOCK_SCREEN_WIDGET_BILLBOARD_LAUNCHED_FROM_PUSH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_WIDTH"] = 237] = "WEB_SCREEN_WIDTH";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEB_SCREEN_HEIGHT"] = 238] = "WEB_SCREEN_HEIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED"] = 239] = "SUP_IOS_LOCK_SCREEN_WIDGET_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SNAP_PRIVACY"] = 240] = "SNAP_PRIVACY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ADS_INTERFACES_IS_NEW_ORGANIZATION"] = 241] = "ADS_INTERFACES_IS_NEW_ORGANIZATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SERVER_ONLY"] = 242] = "SERVER_ONLY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_ORGANIZATION"] = 243] = "GHE_ORGANIZATION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_REPOSITORY"] = 244] = "GHE_REPOSITORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GHE_USER_EMAIL"] = 245] = "GHE_USER_EMAIL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_ID"] = 246] = "BUILD_DEFINITION_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUILD_DEFINITION_NAME"] = 247] = "BUILD_DEFINITION_NAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LCA_PRINCIPAL"] = 248] = "LCA_PRINCIPAL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MEDIA_PERFORMANCE_CLASS"] = 249] = "MEDIA_PERFORMANCE_CLASS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COMMUNITY_COUNT"] = 250] = "COMMUNITY_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RECIPIENTS_SUPPORT_FMP4"] = 251] = "RECIPIENTS_SUPPORT_FMP4";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SCREEN_ASPECT_RATIO"] = 252] = "SCREEN_ASPECT_RATIO";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_GROUP"] = 253] = "USER_GROUP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["USER_HAS_DENIED_CAMERA_PERM"] = 254] = "USER_HAS_DENIED_CAMERA_PERM";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAMEOS_ENGAGEMENT_LEVEL"] = 255] = "CAMEOS_ENGAGEMENT_LEVEL";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CAMEOS"] = 256] = "HAS_CAMEOS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_ACTIVE_LENS_VIDEO_CHAT_USER"] = 257] = "IS_ACTIVE_LENS_VIDEO_CHAT_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_SPOTLIGHT_POSTS_L7"] = 258] = "NUM_SPOTLIGHT_POSTS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_MAP_POSTS_L7"] = 259] = "NUM_MAP_POSTS_L7";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_CREATED_PUBLIC_PROFILE"] = 260] = "HAS_CREATED_PUBLIC_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE"] = 261] = "HAS_PUBLIC_PROFILE_ACCESS_VIA_ROLE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_CAMERA_PERM_DENY"] = 262] = "DAYS_SINCE_LAST_CAMERA_PERM_DENY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_AD_ORG_JOIN"] = 263] = "DAYS_SINCE_AD_ORG_JOIN";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_CREATE"] = 264] = "DAYS_SINCE_FIRST_AD_CREATE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["ORGANIZATION_COUNTRY"] = 265] = "ORGANIZATION_COUNTRY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_DWEB_VISIT"] = 266] = "DAYS_SINCE_FIRST_DWEB_VISIT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_DWEB_VISIT"] = 267] = "DAYS_SINCE_LAST_DWEB_VISIT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["WEEKS_SINCE_USING_DWEB"] = 268] = "WEEKS_SINCE_USING_DWEB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_LENS"] = 269] = "HAS_LENS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_IMPRESSION_COUNT"] = 270] = "BILLBOARD_SERVER_IMPRESSION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CLICK_COUNT"] = 271] = "BILLBOARD_SERVER_CLICK_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_DISMISS_COUNT"] = 272] = "BILLBOARD_SERVER_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_INTERACTION_COUNT"] = 273] = "BILLBOARD_SERVER_INTERACTION_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW"] = 274] = "BILLBOARD_SERVER_FIRST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW"] = 275] = "BILLBOARD_SERVER_LAST_IMPRESSION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW"] = 276] = "BILLBOARD_SERVER_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW"] = 277] = "BILLBOARD_SERVER_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 278] = "BILLBOARD_SERVER_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW"] = 279] = "BILLBOARD_SERVER_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 280] = "BILLBOARD_SERVER_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW"] = 281] = "BILLBOARD_SERVER_LAST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT"] = 282] = "BILLBOARD_SERVER_CONTINUOUS_DISMISS_COUNT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW"] = 283] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW"] = 284] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_CLICK_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW"] = 285] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW"] = 286] = "BILLBOARD_CAMPAIGN_LOCAL_LAST_DISMISS_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW"] = 287] = "BILLBOARD_CAMPAIGN_LOCAL_FIRST_INTERACTION_TIME_SECS_TO_NOW";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_FIRST_AD_SPEND"] = 288] = "DAYS_SINCE_FIRST_AD_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_AD_SPEND"] = 289] = "DAYS_SINCE_LAST_AD_SPEND";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_2_PLUS_STORY_SESSION_7D_STATUS_DETAILED"] = 290] = "SPOTLIGHT_2_PLUS_STORY_SESSION_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_5_PLUS_STORY_SESSION_7D_STATUS_DETAILED"] = 291] = "SPOTLIGHT_5_PLUS_STORY_SESSION_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["SPOTLIGHT_STORY_VIEW_7D_STATUS_DETAILED"] = 292] = "SPOTLIGHT_STORY_VIEW_7D_STATUS_DETAILED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LAST_USER_ACCEPTED_TOS"] = 293] = "LAST_USER_ACCEPTED_TOS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UPDATED_DEVICE_CLUSTER"] = 294] = "UPDATED_DEVICE_CLUSTER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CREATOR_TIER"] = 295] = "CREATOR_TIER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_SW_DECODER"] = 296] = "AV1_SW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AV1_HW_DECODER"] = 297] = "AV1_HW_DECODER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_EXPLICIT_PUBLIC_PROFILE"] = 298] = "HAS_EXPLICIT_PUBLIC_PROFILE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LARGER_TEXT_DISPLAY_OPTION_ENABLED"] = 299] = "LARGER_TEXT_DISPLAY_OPTION_ENABLED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_PUBLIC_POSTING_PREFERRED_USER"] = 300] = "IS_PUBLIC_POSTING_PREFERRED_USER";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RUID"] = 301] = "RUID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["MUTABLE_USERNAME"] = 302] = "MUTABLE_USERNAME";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["BUDGET_GROUP_ID"] = 303] = "BUDGET_GROUP_ID";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AB_POPULATION_RANGE_HASH_FUNC"] = 304] = "AB_POPULATION_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["AB_TREATMENT_RANGE_HASH_FUNC"] = 305] = "AB_TREATMENT_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["REGISTRATION_IP_REGION"] = 306] = "REGISTRATION_IP_REGION";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["RUID_TYPE"] = 307] = "RUID_TYPE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["PLUS_INTERNAL_ONLY"] = 308] = "PLUS_INTERNAL_ONLY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["COF_ROLLOUT_RANGE_HASH_FUNC"] = 309] = "COF_ROLLOUT_RANGE_HASH_FUNC";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_AI_SELFIE"] = 341] = "HAS_AI_SELFIE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["HAS_DREAMS"] = 342] = "HAS_DREAMS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DAYS_SINCE_LAST_ACTIVITY"] = 343] = "DAYS_SINCE_LAST_ACTIVITY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_OS_GRANTED"] = 344] = "CONTACT_PERM_OS_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CONTACT_PERM_USER_GRANTED"] = 345] = "CONTACT_PERM_USER_GRANTED";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["LENS_CLUSTER_GPU_V2"] = 346] = "LENS_CLUSTER_GPU_V2";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CAN_ACCESS_ADS_TAB"] = 347] = "CAN_ACCESS_ADS_TAB";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GOOGLE_CDN_POP"] = 348] = "GOOGLE_CDN_POP";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_STRONG_RELATIONSHIPS_V3"] = 349] = "NUM_STRONG_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_CLOSE_PLUS_RELATIONSHIPS_V3"] = 350] = "NUM_CLOSE_PLUS_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["NUM_ACQUAINTANCE_PLUS_RELATIONSHIPS_V3"] = 351] = "NUM_ACQUAINTANCE_PLUS_RELATIONSHIPS_V3";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["DREAMS_ENGAGEMENT_STATUS"] = 352] = "DREAMS_ENGAGEMENT_STATUS";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["IS_LOW_LIGHT"] = 353] = "IS_LOW_LIGHT";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["GALLERY_HAS_2023_YEAR_END_STORY"] = 354] = "GALLERY_HAS_2023_YEAR_END_STORY";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["CHUNK_UPLOAD_PREFERENCE"] = 355] = "CHUNK_UPLOAD_PREFERENCE";
    ClientTargetingExpression_Property[ClientTargetingExpression_Property["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ClientTargetingExpression_Property || (main_ClientTargetingExpression_Property = {}));
var main_ClientTargetingExpression_PropertyMetadata_SignalToHash;
(function (ClientTargetingExpression_PropertyMetadata_SignalToHash) {
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNKNOWN_SIGNAL_TO_HASH"] = 0] = "UNKNOWN_SIGNAL_TO_HASH";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_SEED_AND_USER_ID"] = 1] = "HASH_SEED_AND_USER_ID";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["HASH_USER_ID_AND_NAMESPACE"] = 2] = "HASH_USER_ID_AND_NAMESPACE";
    ClientTargetingExpression_PropertyMetadata_SignalToHash[ClientTargetingExpression_PropertyMetadata_SignalToHash["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_ClientTargetingExpression_PropertyMetadata_SignalToHash || (main_ClientTargetingExpression_PropertyMetadata_SignalToHash = {}));
function main_createBaseConfigResult() {
    return {
        configId: "",
        value: undefined,
        targetingExpression: undefined,
        ttlSeconds: 0,
        configRuleUuidBytes: new Uint8Array(),
        priority: 0,
        namespace: 0,
        studyName: "",
        experimentId: 0,
        delete: false,
        servePlatforms: [],
        sequenceId: 0,
        ruidType: 0,
        segmentOrdinal: 0,
        generatedFromAbAllowlists: false,
        internalFields: undefined,
    };
}
const main_ConfigResult = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configId !== "") {
            writer.uint32(10).string(message.configId);
        }
        if (message.value !== undefined) {
            main_Value.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        if (message.targetingExpression !== undefined) {
            main_ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(26).fork()).ldelim();
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(32).int64(message.ttlSeconds);
        }
        if (message.configRuleUuidBytes.length !== 0) {
            writer.uint32(42).bytes(message.configRuleUuidBytes);
        }
        if (message.priority !== 0) {
            writer.uint32(48).int32(message.priority);
        }
        if (message.namespace !== 0) {
            writer.uint32(56).int32(message.namespace);
        }
        if (message.studyName !== "") {
            writer.uint32(66).string(message.studyName);
        }
        if (message.experimentId !== 0) {
            writer.uint32(72).int32(message.experimentId);
        }
        if (message.delete === true) {
            writer.uint32(80).bool(message.delete);
        }
        writer.uint32(90).fork();
        for (const v of message.servePlatforms) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.sequenceId !== 0) {
            writer.uint32(96).int32(message.sequenceId);
        }
        if (message.ruidType !== 0) {
            writer.uint32(104).int32(message.ruidType);
        }
        if (message.segmentOrdinal !== 0) {
            writer.uint32(112).int32(message.segmentOrdinal);
        }
        if (message.generatedFromAbAllowlists === true) {
            writer.uint32(120).bool(message.generatedFromAbAllowlists);
        }
        if (message.internalFields !== undefined) {
            main_ConfigResult_InternalFields.encode(message.internalFields, writer.uint32(130).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configId = reader.string();
                    break;
                case 2:
                    message.value = main_Value.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.targetingExpression = main_ClientTargetingExpression.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.ttlSeconds = main_config_result_longToNumber(reader.int64());
                    break;
                case 5:
                    message.configRuleUuidBytes = reader.bytes();
                    break;
                case 6:
                    message.priority = reader.int32();
                    break;
                case 7:
                    message.namespace = reader.int32();
                    break;
                case 8:
                    message.studyName = reader.string();
                    break;
                case 9:
                    message.experimentId = reader.int32();
                    break;
                case 10:
                    message.delete = reader.bool();
                    break;
                case 11:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.servePlatforms.push(reader.int32());
                        }
                    }
                    else {
                        message.servePlatforms.push(reader.int32());
                    }
                    break;
                case 12:
                    message.sequenceId = reader.int32();
                    break;
                case 13:
                    message.ruidType = reader.int32();
                    break;
                case 14:
                    message.segmentOrdinal = reader.int32();
                    break;
                case 15:
                    message.generatedFromAbAllowlists = reader.bool();
                    break;
                case 16:
                    message.internalFields = main_ConfigResult_InternalFields.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = main_createBaseConfigResult();
        message.configId = (_a = object.configId) !== null && _a !== void 0 ? _a : "";
        message.value = object.value !== undefined && object.value !== null ? main_Value.fromPartial(object.value) : undefined;
        message.targetingExpression =
            object.targetingExpression !== undefined && object.targetingExpression !== null
                ? main_ClientTargetingExpression.fromPartial(object.targetingExpression)
                : undefined;
        message.ttlSeconds = (_b = object.ttlSeconds) !== null && _b !== void 0 ? _b : 0;
        message.configRuleUuidBytes = (_c = object.configRuleUuidBytes) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.priority = (_d = object.priority) !== null && _d !== void 0 ? _d : 0;
        message.namespace = (_e = object.namespace) !== null && _e !== void 0 ? _e : 0;
        message.studyName = (_f = object.studyName) !== null && _f !== void 0 ? _f : "";
        message.experimentId = (_g = object.experimentId) !== null && _g !== void 0 ? _g : 0;
        message.delete = (_h = object.delete) !== null && _h !== void 0 ? _h : false;
        message.servePlatforms = ((_j = object.servePlatforms) === null || _j === void 0 ? void 0 : _j.map((e) => e)) || [];
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.ruidType = (_l = object.ruidType) !== null && _l !== void 0 ? _l : 0;
        message.segmentOrdinal = (_m = object.segmentOrdinal) !== null && _m !== void 0 ? _m : 0;
        message.generatedFromAbAllowlists = (_o = object.generatedFromAbAllowlists) !== null && _o !== void 0 ? _o : false;
        message.internalFields =
            object.internalFields !== undefined && object.internalFields !== null
                ? main_ConfigResult_InternalFields.fromPartial(object.internalFields)
                : undefined;
        return message;
    },
};
function main_createBaseConfigResult_InternalFields() {
    return {
        configBitmapIndex: 0,
        configResultBitmapIndex: 0,
        hasServerPropertiesOnly: false,
        globalPriority: 0,
        sequenceIds: [],
        studySegmentOrdinal: 0,
        experimentGuid: 0,
        isAbStudyStatusCompleted: false,
    };
}
const main_ConfigResult_InternalFields = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configBitmapIndex !== 0) {
            writer.uint32(8).int32(message.configBitmapIndex);
        }
        if (message.configResultBitmapIndex !== 0) {
            writer.uint32(16).int32(message.configResultBitmapIndex);
        }
        if (message.hasServerPropertiesOnly === true) {
            writer.uint32(24).bool(message.hasServerPropertiesOnly);
        }
        if (message.globalPriority !== 0) {
            writer.uint32(32).int32(message.globalPriority);
        }
        for (const v of message.sequenceIds) {
            main_ConfigResult_InternalFields_SequenceIdCandidate.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.studySegmentOrdinal !== 0) {
            writer.uint32(48).int32(message.studySegmentOrdinal);
        }
        if (message.experimentGuid !== 0) {
            writer.uint32(56).uint64(message.experimentGuid);
        }
        if (message.isAbStudyStatusCompleted === true) {
            writer.uint32(64).bool(message.isAbStudyStatusCompleted);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigResult_InternalFields();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configBitmapIndex = reader.int32();
                    break;
                case 2:
                    message.configResultBitmapIndex = reader.int32();
                    break;
                case 3:
                    message.hasServerPropertiesOnly = reader.bool();
                    break;
                case 4:
                    message.globalPriority = reader.int32();
                    break;
                case 5:
                    message.sequenceIds.push(main_ConfigResult_InternalFields_SequenceIdCandidate.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.studySegmentOrdinal = reader.int32();
                    break;
                case 7:
                    message.experimentGuid = main_config_result_longToNumber(reader.uint64());
                    break;
                case 8:
                    message.isAbStudyStatusCompleted = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = main_createBaseConfigResult_InternalFields();
        message.configBitmapIndex = (_a = object.configBitmapIndex) !== null && _a !== void 0 ? _a : 0;
        message.configResultBitmapIndex = (_b = object.configResultBitmapIndex) !== null && _b !== void 0 ? _b : 0;
        message.hasServerPropertiesOnly = (_c = object.hasServerPropertiesOnly) !== null && _c !== void 0 ? _c : false;
        message.globalPriority = (_d = object.globalPriority) !== null && _d !== void 0 ? _d : 0;
        message.sequenceIds =
            ((_e = object.sequenceIds) === null || _e === void 0 ? void 0 : _e.map((e) => main_ConfigResult_InternalFields_SequenceIdCandidate.fromPartial(e))) || [];
        message.studySegmentOrdinal = (_f = object.studySegmentOrdinal) !== null && _f !== void 0 ? _f : 0;
        message.experimentGuid = (_g = object.experimentGuid) !== null && _g !== void 0 ? _g : 0;
        message.isAbStudyStatusCompleted = (_h = object.isAbStudyStatusCompleted) !== null && _h !== void 0 ? _h : false;
        return message;
    },
};
function main_createBaseConfigResult_InternalFields_SequenceIdCandidate() {
    return { targetingExpression: undefined, sequenceId: 0 };
}
const main_ConfigResult_InternalFields_SequenceIdCandidate = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.targetingExpression !== undefined) {
            main_ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(10).fork()).ldelim();
        }
        if (message.sequenceId !== 0) {
            writer.uint32(16).int32(message.sequenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigResult_InternalFields_SequenceIdCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingExpression = main_ClientTargetingExpression.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.sequenceId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseConfigResult_InternalFields_SequenceIdCandidate();
        message.targetingExpression =
            object.targetingExpression !== undefined && object.targetingExpression !== null
                ? main_ClientTargetingExpression.fromPartial(object.targetingExpression)
                : undefined;
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseConfigResultBundle() {
    return { etag: "", configResults: [] };
}
const main_ConfigResultBundle = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.etag !== "") {
            writer.uint32(10).string(message.etag);
        }
        for (const v of message.configResults) {
            main_ConfigResult.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigResultBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.etag = reader.string();
                    break;
                case 2:
                    message.configResults.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseConfigResultBundle();
        message.etag = (_a = object.etag) !== null && _a !== void 0 ? _a : "";
        message.configResults = ((_b = object.configResults) === null || _b === void 0 ? void 0 : _b.map((e) => main_ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseSequenceIdCandidate() {
    return { targetingExpression: undefined, sequenceId: 0 };
}
const main_SequenceIdCandidate = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.targetingExpression !== undefined) {
            main_ClientTargetingExpression.encode(message.targetingExpression, writer.uint32(10).fork()).ldelim();
        }
        if (message.sequenceId !== 0) {
            writer.uint32(16).int32(message.sequenceId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSequenceIdCandidate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingExpression = main_ClientTargetingExpression.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.sequenceId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseSequenceIdCandidate();
        message.targetingExpression =
            object.targetingExpression !== undefined && object.targetingExpression !== null
                ? main_ClientTargetingExpression.fromPartial(object.targetingExpression)
                : undefined;
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function main_createBaseClientTargetingExpression() {
    return {
        operator: 0,
        children: [],
        property: 0,
        predicateOperator: 0,
        value: undefined,
        propertyMetadata: undefined,
    };
}
const main_ClientTargetingExpression = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.operator !== 0) {
            writer.uint32(8).int32(message.operator);
        }
        for (const v of message.children) {
            main_ClientTargetingExpression.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.property !== 0) {
            writer.uint32(24).int32(message.property);
        }
        if (message.predicateOperator !== 0) {
            writer.uint32(32).int32(message.predicateOperator);
        }
        if (message.value !== undefined) {
            main_Value.encode(message.value, writer.uint32(42).fork()).ldelim();
        }
        if (message.propertyMetadata !== undefined) {
            main_ClientTargetingExpression_PropertyMetadata.encode(message.propertyMetadata, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseClientTargetingExpression();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.operator = reader.int32();
                    break;
                case 2:
                    message.children.push(main_ClientTargetingExpression.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.property = reader.int32();
                    break;
                case 4:
                    message.predicateOperator = reader.int32();
                    break;
                case 5:
                    message.value = main_Value.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.propertyMetadata = main_ClientTargetingExpression_PropertyMetadata.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseClientTargetingExpression();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : 0;
        message.children = ((_b = object.children) === null || _b === void 0 ? void 0 : _b.map((e) => main_ClientTargetingExpression.fromPartial(e))) || [];
        message.property = (_c = object.property) !== null && _c !== void 0 ? _c : 0;
        message.predicateOperator = (_d = object.predicateOperator) !== null && _d !== void 0 ? _d : 0;
        message.value = object.value !== undefined && object.value !== null ? main_Value.fromPartial(object.value) : undefined;
        message.propertyMetadata =
            object.propertyMetadata !== undefined && object.propertyMetadata !== null
                ? main_ClientTargetingExpression_PropertyMetadata.fromPartial(object.propertyMetadata)
                : undefined;
        return message;
    },
};
function main_createBaseClientTargetingExpression_PropertyMetadata() {
    return {
        itemId: 0,
        signalToHash: 0,
        abNamespaceForHashing: "",
        abSeedForHashing: "",
        ruidType: undefined,
        cofRolloutSeedForHashing: "",
    };
}
const main_ClientTargetingExpression_PropertyMetadata = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.itemId !== 0) {
            writer.uint32(8).int32(message.itemId);
        }
        if (message.signalToHash !== 0) {
            writer.uint32(16).int32(message.signalToHash);
        }
        if (message.abNamespaceForHashing !== "") {
            writer.uint32(26).string(message.abNamespaceForHashing);
        }
        if (message.abSeedForHashing !== "") {
            writer.uint32(34).string(message.abSeedForHashing);
        }
        if (message.ruidType !== undefined) {
            writer.uint32(40).int32(message.ruidType);
        }
        if (message.cofRolloutSeedForHashing !== "") {
            writer.uint32(50).string(message.cofRolloutSeedForHashing);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseClientTargetingExpression_PropertyMetadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.itemId = reader.int32();
                    break;
                case 2:
                    message.signalToHash = reader.int32();
                    break;
                case 3:
                    message.abNamespaceForHashing = reader.string();
                    break;
                case 4:
                    message.abSeedForHashing = reader.string();
                    break;
                case 5:
                    message.ruidType = reader.int32();
                    break;
                case 6:
                    message.cofRolloutSeedForHashing = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBaseClientTargetingExpression_PropertyMetadata();
        message.itemId = (_a = object.itemId) !== null && _a !== void 0 ? _a : 0;
        message.signalToHash = (_b = object.signalToHash) !== null && _b !== void 0 ? _b : 0;
        message.abNamespaceForHashing = (_c = object.abNamespaceForHashing) !== null && _c !== void 0 ? _c : "";
        message.abSeedForHashing = (_d = object.abSeedForHashing) !== null && _d !== void 0 ? _d : "";
        message.ruidType = (_e = object.ruidType) !== null && _e !== void 0 ? _e : undefined;
        message.cofRolloutSeedForHashing = (_f = object.cofRolloutSeedForHashing) !== null && _f !== void 0 ? _f : "";
        return message;
    },
};
var main_config_result_globalThis = (() => {
    if (typeof main_config_result_globalThis !== "undefined")
        return main_config_result_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_config_result_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_config_result_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=config_result.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/config_response.js




const main_config_response_protobufPackage = "snapchat.cdp.cof";
function main_createBaseConfigTargetingResponseDebugData() {
    return { abResultChecksumInput: "" };
}
const main_ConfigTargetingResponseDebugData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.abResultChecksumInput !== "") {
            writer.uint32(10).string(message.abResultChecksumInput);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigTargetingResponseDebugData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.abResultChecksumInput = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseConfigTargetingResponseDebugData();
        message.abResultChecksumInput = (_a = object.abResultChecksumInput) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseConfigTargetingResponse() {
    return {
        configResults: [],
        configResultsEtag: "",
        benchmarkRequest: undefined,
        fullResults: false,
        abResultChecksum: 0,
        iso3166Alpha2CountryCodeFromRequestIp: "",
        debugData: undefined,
    };
}
const main_ConfigTargetingResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            main_ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.configResultsEtag !== "") {
            writer.uint32(18).string(message.configResultsEtag);
        }
        if (message.benchmarkRequest !== undefined) {
            main_BenchmarkRequest.encode(message.benchmarkRequest, writer.uint32(26).fork()).ldelim();
        }
        if (message.fullResults === true) {
            writer.uint32(32).bool(message.fullResults);
        }
        if (message.abResultChecksum !== 0) {
            writer.uint32(40).int32(message.abResultChecksum);
        }
        if (message.iso3166Alpha2CountryCodeFromRequestIp !== "") {
            writer.uint32(50).string(message.iso3166Alpha2CountryCodeFromRequestIp);
        }
        if (message.debugData !== undefined) {
            main_ConfigTargetingResponseDebugData.encode(message.debugData, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.configResultsEtag = reader.string();
                    break;
                case 3:
                    message.benchmarkRequest = main_BenchmarkRequest.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.fullResults = reader.bool();
                    break;
                case 5:
                    message.abResultChecksum = reader.int32();
                    break;
                case 6:
                    message.iso3166Alpha2CountryCodeFromRequestIp = reader.string();
                    break;
                case 7:
                    message.debugData = main_ConfigTargetingResponseDebugData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseConfigTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResult.fromPartial(e))) || [];
        message.configResultsEtag = (_b = object.configResultsEtag) !== null && _b !== void 0 ? _b : "";
        message.benchmarkRequest =
            object.benchmarkRequest !== undefined && object.benchmarkRequest !== null
                ? main_BenchmarkRequest.fromPartial(object.benchmarkRequest)
                : undefined;
        message.fullResults = (_c = object.fullResults) !== null && _c !== void 0 ? _c : false;
        message.abResultChecksum = (_d = object.abResultChecksum) !== null && _d !== void 0 ? _d : 0;
        message.iso3166Alpha2CountryCodeFromRequestIp = (_e = object.iso3166Alpha2CountryCodeFromRequestIp) !== null && _e !== void 0 ? _e : "";
        message.debugData =
            object.debugData !== undefined && object.debugData !== null
                ? main_ConfigTargetingResponseDebugData.fromPartial(object.debugData)
                : undefined;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=config_response.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/debug_info.js


const main_debug_info_protobufPackage = "snapchat.cdp.cof";
var main_AbStep;
(function (AbStep) {
    AbStep[AbStep["USER_WHITELISTED"] = 0] = "USER_WHITELISTED";
    AbStep[AbStep["USER_GROUP_WHITELISTED"] = 1] = "USER_GROUP_WHITELISTED";
    AbStep[AbStep["FILTER_CONDITIONS"] = 2] = "FILTER_CONDITIONS";
    AbStep[AbStep["SLICE_RANGE"] = 3] = "SLICE_RANGE";
    AbStep[AbStep["TRAFFIC_ALLOCATED"] = 4] = "TRAFFIC_ALLOCATED";
    AbStep[AbStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_AbStep || (main_AbStep = {}));
var main_CofStep;
(function (CofStep) {
    CofStep[CofStep["VALIDATE_REQUEST"] = 0] = "VALIDATE_REQUEST";
    CofStep[CofStep["REQUEST_ATLAS"] = 1] = "REQUEST_ATLAS";
    CofStep[CofStep["BUILD_TARGETING_INFO"] = 2] = "BUILD_TARGETING_INFO";
    CofStep[CofStep["QUERY_INDEX"] = 3] = "QUERY_INDEX";
    CofStep[CofStep["REQUEST_AB"] = 4] = "REQUEST_AB";
    CofStep[CofStep["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CofStep || (main_CofStep = {}));
function main_createBaseAbStepInfo() {
    return { abStep: 0, info: "" };
}
const main_AbStepInfo = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.abStep !== 0) {
            writer.uint32(8).int32(message.abStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseAbStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.abStep = reader.int32();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseAbStepInfo();
        message.abStep = (_a = object.abStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseCofStepInfo() {
    return { cofStep: 0, info: "" };
}
const main_CofStepInfo = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.cofStep !== 0) {
            writer.uint32(8).int32(message.cofStep);
        }
        if (message.info !== "") {
            writer.uint32(18).string(message.info);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseCofStepInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cofStep = reader.int32();
                    break;
                case 2:
                    message.info = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseCofStepInfo();
        message.cofStep = (_a = object.cofStep) !== null && _a !== void 0 ? _a : 0;
        message.info = (_b = object.info) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseDebugTrace() {
    return { lastCofStep: undefined, lastAbStep: undefined, budgetGroupId: 0 };
}
const main_DebugTrace = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.lastCofStep !== undefined) {
            main_CofStepInfo.encode(message.lastCofStep, writer.uint32(10).fork()).ldelim();
        }
        if (message.lastAbStep !== undefined) {
            main_AbStepInfo.encode(message.lastAbStep, writer.uint32(18).fork()).ldelim();
        }
        if (message.budgetGroupId !== 0) {
            writer.uint32(24).uint32(message.budgetGroupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseDebugTrace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lastCofStep = main_CofStepInfo.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lastAbStep = main_AbStepInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.budgetGroupId = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseDebugTrace();
        message.lastCofStep =
            object.lastCofStep !== undefined && object.lastCofStep !== null
                ? main_CofStepInfo.fromPartial(object.lastCofStep)
                : undefined;
        message.lastAbStep =
            object.lastAbStep !== undefined && object.lastAbStep !== null
                ? main_AbStepInfo.fromPartial(object.lastAbStep)
                : undefined;
        message.budgetGroupId = (_a = object.budgetGroupId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=debug_info.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/cdp/cof/circumstance_service.js









const main_circumstance_service_protobufPackage = "snapchat.cdp.cof";
function main_createBaseGetAbConfigValuesRequest() {
    return {
        configNames: [],
        namespaces: [],
        cofConfigNames: [],
        includeAllConfigs: false,
        disableExposureLogging: false,
        enableDebug: false,
    };
}
const main_GetAbConfigValuesRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configNames) {
            writer.uint32(10).string(v);
        }
        writer.uint32(18).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        for (const v of message.cofConfigNames) {
            writer.uint32(26).string(v);
        }
        if (message.includeAllConfigs === true) {
            writer.uint32(32).bool(message.includeAllConfigs);
        }
        if (message.disableExposureLogging === true) {
            writer.uint32(40).bool(message.disableExposureLogging);
        }
        if (message.enableDebug === true) {
            writer.uint32(104).bool(message.enableDebug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetAbConfigValuesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configNames.push(reader.string());
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 3:
                    message.cofConfigNames.push(reader.string());
                    break;
                case 4:
                    message.includeAllConfigs = reader.bool();
                    break;
                case 5:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 13:
                    message.enableDebug = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBaseGetAbConfigValuesRequest();
        message.configNames = ((_a = object.configNames) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.namespaces = ((_b = object.namespaces) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.cofConfigNames = ((_c = object.cofConfigNames) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.includeAllConfigs = (_d = object.includeAllConfigs) !== null && _d !== void 0 ? _d : false;
        message.disableExposureLogging = (_e = object.disableExposureLogging) !== null && _e !== void 0 ? _e : false;
        message.enableDebug = (_f = object.enableDebug) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function main_createBaseGetAbConfigValuesResponse() {
    return { configResults: [], debugTrace: undefined };
}
const main_GetAbConfigValuesResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            main_ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.debugTrace !== undefined) {
            main_DebugTrace.encode(message.debugTrace, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetAbConfigValuesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.debugTrace = main_DebugTrace.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetAbConfigValuesResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResult.fromPartial(e))) || [];
        message.debugTrace =
            object.debugTrace !== undefined && object.debugTrace !== null
                ? main_DebugTrace.fromPartial(object.debugTrace)
                : undefined;
        return message;
    },
};
function main_createBaseConfigSetGenerationRequest() {
    return { targetingParameters: undefined, overrides: [] };
}
const main_ConfigSetGenerationRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.targetingParameters !== undefined) {
            main_ConfigTargetingRequest.encode(message.targetingParameters, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.overrides) {
            main_ConfigResult.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigSetGenerationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingParameters = main_ConfigTargetingRequest.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.overrides.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseConfigSetGenerationRequest();
        message.targetingParameters =
            object.targetingParameters !== undefined && object.targetingParameters !== null
                ? main_ConfigTargetingRequest.fromPartial(object.targetingParameters)
                : undefined;
        message.overrides = ((_a = object.overrides) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseConfigSetGenerationResponse() {
    return { targetingResponse: undefined };
}
const main_ConfigSetGenerationResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.targetingResponse !== undefined) {
            main_ConfigTargetingResponse.encode(message.targetingResponse, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigSetGenerationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.targetingResponse = main_ConfigTargetingResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = main_createBaseConfigSetGenerationResponse();
        message.targetingResponse =
            object.targetingResponse !== undefined && object.targetingResponse !== null
                ? main_ConfigTargetingResponse.fromPartial(object.targetingResponse)
                : undefined;
        return message;
    },
};
function main_createBasePinConfigRequest() {
    return { configSetToken: "", userId: "", ttlSeconds: 0 };
}
const main_PinConfigRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        if (message.ttlSeconds !== 0) {
            writer.uint32(24).int32(message.ttlSeconds);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configSetToken = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                case 3:
                    message.ttlSeconds = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBasePinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        message.ttlSeconds = (_c = object.ttlSeconds) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function main_createBasePinConfigResponse() {
    return { debug: "" };
}
const main_PinConfigResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.debug = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBasePinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseUnpinConfigRequest() {
    return { configSetToken: "", userId: "" };
}
const main_UnpinConfigRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configSetToken !== "") {
            writer.uint32(10).string(message.configSetToken);
        }
        if (message.userId !== "") {
            writer.uint32(18).string(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUnpinConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configSetToken = reader.string();
                    break;
                case 2:
                    message.userId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseUnpinConfigRequest();
        message.configSetToken = (_a = object.configSetToken) !== null && _a !== void 0 ? _a : "";
        message.userId = (_b = object.userId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseUnpinConfigResponse() {
    return { debug: "" };
}
const main_UnpinConfigResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.debug !== "") {
            writer.uint32(10).string(message.debug);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUnpinConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.debug = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseUnpinConfigResponse();
        message.debug = (_a = object.debug) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseConfigWithNamespace() {
    return { configName: "", namespace: 0 };
}
const main_ConfigWithNamespace = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.configName !== "") {
            writer.uint32(10).string(message.configName);
        }
        if (message.namespace !== 0) {
            writer.uint32(16).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigWithNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configName = reader.string();
                    break;
                case 2:
                    message.namespace = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseConfigWithNamespace();
        message.configName = (_a = object.configName) !== null && _a !== void 0 ? _a : "";
        message.namespace = (_b = object.namespace) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function main_createBaseGetConfigValuesByTokenRequest() {
    return { token: "", configNames: [], namespaces: [], disableExposureLogging: false, getAllConfigs: false };
}
const main_GetConfigValuesByTokenRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        for (const v of message.configNames) {
            main_ConfigWithNamespace.encode(v, writer.uint32(18).fork()).ldelim();
        }
        writer.uint32(26).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.disableExposureLogging === true) {
            writer.uint32(32).bool(message.disableExposureLogging);
        }
        if (message.getAllConfigs === true) {
            writer.uint32(40).bool(message.getAllConfigs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetConfigValuesByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.configNames.push(main_ConfigWithNamespace.decode(reader, reader.uint32()));
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 4:
                    message.disableExposureLogging = reader.bool();
                    break;
                case 5:
                    message.getAllConfigs = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseGetConfigValuesByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.configNames = ((_b = object.configNames) === null || _b === void 0 ? void 0 : _b.map((e) => main_ConfigWithNamespace.fromPartial(e))) || [];
        message.namespaces = ((_c = object.namespaces) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.disableExposureLogging = (_d = object.disableExposureLogging) !== null && _d !== void 0 ? _d : false;
        message.getAllConfigs = (_e = object.getAllConfigs) !== null && _e !== void 0 ? _e : false;
        return message;
    },
};
function main_createBaseGetConfigValuesByTokenResponse() {
    return { configResults: [] };
}
const main_GetConfigValuesByTokenResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            main_ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetConfigValuesByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetConfigValuesByTokenResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseGetCachedConfigResultSequenceIdsRequest() {
    return {};
}
const main_GetCachedConfigResultSequenceIdsRequest = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetCachedConfigResultSequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = main_createBaseGetCachedConfigResultSequenceIdsRequest();
        return message;
    },
};
function main_createBaseGetCachedConfigResultSequenceIdsResponse() {
    return { serializedBitmap: new Uint8Array() };
}
const main_GetCachedConfigResultSequenceIdsResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.serializedBitmap.length !== 0) {
            writer.uint32(10).bytes(message.serializedBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetCachedConfigResultSequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.serializedBitmap = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetCachedConfigResultSequenceIdsResponse();
        message.serializedBitmap = (_a = object.serializedBitmap) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function main_createBaseGetConfigResultsBySequenceIdsRequest() {
    return { sequenceIds: [] };
}
const main_GetConfigResultsBySequenceIdsRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.sequenceIds) {
            writer.int32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetConfigResultsBySequenceIdsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.sequenceIds.push(reader.int32());
                        }
                    }
                    else {
                        message.sequenceIds.push(reader.int32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetConfigResultsBySequenceIdsRequest();
        message.sequenceIds = ((_a = object.sequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function main_createBaseConfigResultWithSequenceId() {
    return { sequenceId: 0, configResult: undefined };
}
const main_ConfigResultWithSequenceId = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.sequenceId !== 0) {
            writer.uint32(8).int32(message.sequenceId);
        }
        if (message.configResult !== undefined) {
            main_ConfigResult.encode(message.configResult, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseConfigResultWithSequenceId();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequenceId = reader.int32();
                    break;
                case 2:
                    message.configResult = main_ConfigResult.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseConfigResultWithSequenceId();
        message.sequenceId = (_a = object.sequenceId) !== null && _a !== void 0 ? _a : 0;
        message.configResult =
            object.configResult !== undefined && object.configResult !== null
                ? main_ConfigResult.fromPartial(object.configResult)
                : undefined;
        return message;
    },
};
function main_createBaseGetConfigResultsBySequenceIdsResponse() {
    return { configResultWithSequenceIds: [] };
}
const main_GetConfigResultsBySequenceIdsResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configResultWithSequenceIds) {
            main_ConfigResultWithSequenceId.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetConfigResultsBySequenceIdsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResultWithSequenceIds.push(main_ConfigResultWithSequenceId.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetConfigResultsBySequenceIdsResponse();
        message.configResultWithSequenceIds =
            ((_a = object.configResultWithSequenceIds) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResultWithSequenceId.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseGetBitmapByTokenRequest() {
    return { token: "" };
}
const main_GetBitmapByTokenRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetBitmapByTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetBitmapByTokenRequest();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseGetBitmapByTokenResponse() {
    return { idBitmap: new Uint8Array() };
}
const main_GetBitmapByTokenResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.idBitmap.length !== 0) {
            writer.uint32(10).bytes(message.idBitmap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetBitmapByTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.idBitmap = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetBitmapByTokenResponse();
        message.idBitmap = (_a = object.idBitmap) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function main_createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest() {
    return { namespaces: [], edgeConfigClientVersion: "" };
}
const main_GetUnevaluatedConfigResultsWithAbTargetingRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.namespaces) {
            writer.int32(v);
        }
        writer.ldelim();
        if (message.edgeConfigClientVersion !== "") {
            writer.uint32(18).string(message.edgeConfigClientVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.namespaces.push(reader.int32());
                        }
                    }
                    else {
                        message.namespaces.push(reader.int32());
                    }
                    break;
                case 2:
                    message.edgeConfigClientVersion = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseGetUnevaluatedConfigResultsWithAbTargetingRequest();
        message.namespaces = ((_a = object.namespaces) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.edgeConfigClientVersion = (_b = object.edgeConfigClientVersion) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse() {
    return { configResults: [] };
}
const main_GetUnevaluatedConfigResultsWithAbTargetingResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.configResults) {
            main_ConfigResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.configResults.push(main_ConfigResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetUnevaluatedConfigResultsWithAbTargetingResponse();
        message.configResults = ((_a = object.configResults) === null || _a === void 0 ? void 0 : _a.map((e) => main_ConfigResult.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseAddRuidsForDebuggingRequest() {
    return { ruids: [], configNames: [], maxSnapshots: 0 };
}
const main_AddRuidsForDebuggingRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.ruids) {
            main_Ruid.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.configNames) {
            writer.uint32(18).string(v);
        }
        if (message.maxSnapshots !== 0) {
            writer.uint32(24).int32(message.maxSnapshots);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseAddRuidsForDebuggingRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ruids.push(main_Ruid.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.configNames.push(reader.string());
                    break;
                case 3:
                    message.maxSnapshots = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseAddRuidsForDebuggingRequest();
        message.ruids = ((_a = object.ruids) === null || _a === void 0 ? void 0 : _a.map((e) => main_Ruid.fromPartial(e))) || [];
        message.configNames = ((_b = object.configNames) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.maxSnapshots = (_c = object.maxSnapshots) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function main_createBaseAddRuidsForDebuggingResponse() {
    return {};
}
const main_AddRuidsForDebuggingResponse = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseAddRuidsForDebuggingResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = main_createBaseAddRuidsForDebuggingResponse();
        return message;
    },
};
class main_CircumstancesServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.targetingQuery = this.targetingQuery.bind(this);
        this.getAbConfigValues = this.getAbConfigValues.bind(this);
        this.getConfigValuesByToken = this.getConfigValuesByToken.bind(this);
        this.getConfigResultsBySequenceIds = this.getConfigResultsBySequenceIds.bind(this);
        this.getCachedConfigResultSequenceIds = this.getCachedConfigResultSequenceIds.bind(this);
        this.getBitmapByToken = this.getBitmapByToken.bind(this);
        this.generateConfigSet = this.generateConfigSet.bind(this);
        this.pinConfigSet = this.pinConfigSet.bind(this);
        this.unpinConfigSet = this.unpinConfigSet.bind(this);
        this.getUnevaluatedConfigResultsWithAbTargeting = this.getUnevaluatedConfigResultsWithAbTargeting.bind(this);
        this.addRuidsForDebugging = this.addRuidsForDebugging.bind(this);
    }
    targetingQuery(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicetargetingQueryDesc, main_ConfigTargetingRequest.fromPartial(request), metadata);
    }
    getAbConfigValues(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetAbConfigValuesDesc, main_GetAbConfigValuesRequest.fromPartial(request), metadata);
    }
    getConfigValuesByToken(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetConfigValuesByTokenDesc, main_GetConfigValuesByTokenRequest.fromPartial(request), metadata);
    }
    getConfigResultsBySequenceIds(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetConfigResultsBySequenceIdsDesc, main_GetConfigResultsBySequenceIdsRequest.fromPartial(request), metadata);
    }
    getCachedConfigResultSequenceIds(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetCachedConfigResultSequenceIdsDesc, main_GetCachedConfigResultSequenceIdsRequest.fromPartial(request), metadata);
    }
    getBitmapByToken(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetBitmapByTokenDesc, main_GetBitmapByTokenRequest.fromPartial(request), metadata);
    }
    generateConfigSet(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegenerateConfigSetDesc, main_ConfigSetGenerationRequest.fromPartial(request), metadata);
    }
    pinConfigSet(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicepinConfigSetDesc, main_PinConfigRequest.fromPartial(request), metadata);
    }
    unpinConfigSet(request, metadata) {
        return this.rpc.unary(main_CircumstancesServiceunpinConfigSetDesc, main_UnpinConfigRequest.fromPartial(request), metadata);
    }
    getUnevaluatedConfigResultsWithAbTargeting(request, metadata) {
        return this.rpc.unary(main_CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc, main_GetUnevaluatedConfigResultsWithAbTargetingRequest.fromPartial(request), metadata);
    }
    addRuidsForDebugging(request, metadata) {
        return this.rpc.unary(main_CircumstancesServiceaddRuidsForDebuggingDesc, main_AddRuidsForDebuggingRequest.fromPartial(request), metadata);
    }
}
const main_CircumstancesServiceDesc = {
    serviceName: "snapchat.cdp.cof.CircumstancesService",
};
const main_CircumstancesServicetargetingQueryDesc = {
    methodName: "targetingQuery",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_ConfigTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_ConfigTargetingResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetAbConfigValuesDesc = {
    methodName: "getAbConfigValues",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetAbConfigValuesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetAbConfigValuesResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetConfigValuesByTokenDesc = {
    methodName: "getConfigValuesByToken",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetConfigValuesByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetConfigValuesByTokenResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetConfigResultsBySequenceIdsDesc = {
    methodName: "getConfigResultsBySequenceIds",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetConfigResultsBySequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetConfigResultsBySequenceIdsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetCachedConfigResultSequenceIdsDesc = {
    methodName: "getCachedConfigResultSequenceIds",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetCachedConfigResultSequenceIdsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetCachedConfigResultSequenceIdsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetBitmapByTokenDesc = {
    methodName: "getBitmapByToken",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetBitmapByTokenRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetBitmapByTokenResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegenerateConfigSetDesc = {
    methodName: "generateConfigSet",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_ConfigSetGenerationRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_ConfigSetGenerationResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicepinConfigSetDesc = {
    methodName: "pinConfigSet",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_PinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_PinConfigResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServiceunpinConfigSetDesc = {
    methodName: "unpinConfigSet",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_UnpinConfigRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_UnpinConfigResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServicegetUnevaluatedConfigResultsWithAbTargetingDesc = {
    methodName: "getUnevaluatedConfigResultsWithAbTargeting",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_GetUnevaluatedConfigResultsWithAbTargetingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_GetUnevaluatedConfigResultsWithAbTargetingResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
const main_CircumstancesServiceaddRuidsForDebuggingDesc = {
    methodName: "addRuidsForDebugging",
    service: main_CircumstancesServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return main_AddRuidsForDebuggingRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, main_AddRuidsForDebuggingResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class main_GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new main_browser_headers_umd.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            main_grpc_web_client_umd.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === main_grpc_web_client_umd.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=circumstance_service.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/responseCachingHandler.js




const main_responseCachingHandler_logger = main_getLogger("responseCachingHandler");
const main_notFound = (key) => main_cacheKeyNotFoundError(`Response for key ${key} not found in cache.`);
const main_strategyFailed = (key, cause) => new Error(`Network request and cache lookup for key ${key} both failed.`, { cause });
/**
 * Create a CachingStrategy that first makes a request to the network, falling back to cache if the network request
 * fails. If the network request fails and a prior response has not been cached, an error is returned to the caller.
 */
const main_staleIfErrorStrategy = () => (key, cache, network) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const response = yield network();
        cache.store(key, response).catch((error) => {
            main_responseCachingHandler_logger.warn(`staleIfErrorStrategy failed to store key ${key}.`, error);
        });
        return response;
    }
    catch (networkError) {
        try {
            const cachedResponse = yield cache.retrieve(key);
            if (!cachedResponse)
                throw main_notFound(key);
            main_responseCachingHandler_logger.debug(`staleIfErrorStrategy successfully fell back to cache for key ${key} after network error.`, networkError);
            return cachedResponse;
        }
        catch (cacheError) {
            const error = ensureError(cacheError);
            error.cause = networkError;
            throw main_strategyFailed(key, error);
        }
    }
});
/**
 * Create a CachingStrategy that first does a cache lookup – if the response is found in cache, it is returned and the
 * entry is updated with a request to the network in the background. If no cached response is found, the network request
 * is made, the result cached and returned to the caller.
 */
const main_staleWhileRevalidateStrategy = (options) => (key, cache, network) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    try {
        const cachedResponse = yield cache.retrieve(key);
        if (!cachedResponse)
            throw main_notFound(key);
        // By specifying isSideEffect: true, the handler chain allows the network handler to run to completion,
        // even though we return an immediate response from the cache. In the typical use-case, once a response has
        // resolved, any ongoing handlers are aborted because the handler chain knows their result will not be
        // used -- but here, the network handler is run as a side-effect to update the cache after the cached
        // response has been resolved.
        network({ isSideEffect: true })
            .then((response) => cache.store(key, response))
            .catch((error) => {
            main_responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to retrieve and store key ${key}.`, error);
        });
        return cachedResponse;
    }
    catch (cacheError) {
        options === null || options === void 0 ? void 0 : options.reporter.count("cache_miss", 1, new Map([["request_type", options.requestType]]));
        try {
            const response = yield network();
            cache.store(key, response).catch((error) => {
                main_responseCachingHandler_logger.warn(`staleWhileRevalidateStrategy failed to store key ${key}.`, error);
            });
            main_responseCachingHandler_logger.debug(`staleWhileRevalidateStrategy successfully fell back to network for key ${key} after cache error.`, cacheError);
            return response;
        }
        catch (networkError) {
            const error = main_errorHelpers_ensureError(networkError);
            error.cause = cacheError;
            throw main_strategyFailed(key, error);
        }
    }
});
/**
 * Create a Handler capable of caching responses using various caching strategies.
 *
 * More than one caching strategy can be provided, and they will be composed into a single strategy. For example, an
 * expiringStrategy could be composed with a staleIfErrorStrategy so that responses
 *
 * @param cache A Persistence instance capable of storing responses.
 * @param resolveKey This function is called once for each request, and must return a valid persistence key
 * corresponding uniquely to that request.
 * @param strategy A CachingStrategy used to determine when to retrieve from cache vs. request from the network.
 * @returns
 */
const main_createResponseCachingHandler = (cache, resolveKey, strategy) => {
    return (next) => (request, metadata) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        const network = (additionalMetadata = {}) => {
            const m = Object.assign(Object.assign({}, metadata), additionalMetadata);
            return next(request, m);
        };
        let key;
        try {
            key = resolveKey(request, metadata);
        }
        catch (error) {
            main_responseCachingHandler_logger.warn("Cache lookup failed because the cache key could not be resolved.", error);
            return network();
        }
        return strategy(key, cache, network);
    });
};
//# sourceMappingURL=responseCachingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/persistence/Persistence.js
const main_isValidKey = (key) => typeof key === "string" || typeof key === "number";
/**
 * The abstract Persistence class defines an async interface for interacting with persistent client-side storage. This
 * is modeled as a simple key/value store.
 *
 * Subclasses may be implemented to support a variety of persistence mechanisms – e.g. localStorage, IndexedDB, etc.
 */
class main_Persistence {
}
//# sourceMappingURL=Persistence.js.map
;// ./node_modules/@snap/camera-kit/lib/persistence/IndexedDBPersistence.js


function main_wrapRequest(request) {
    const p = new Promise((resolve, reject) => {
        request.onsuccess = () => resolve(request.result);
        request.onerror = () => reject(request.error);
    });
    p.request = request;
    return p;
}
/**
 * IndexedDB cursor requests are unique, in that their `onsuccess` handler may be called multiple times. To support
 * this, and allow for an easier-to-use Promise-based API, we wrap the cursor request to support usage like:
 * ```ts
 * let request = await wrapCursorRequest(store.openCursor())
 * while (request.cursor) {
 *   console.log(request.cursor.key, request.cursor.value)
 *   request = await request.continue()
 * }
 * ```
 */
function main_wrapCursorRequest(request) {
    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            const cursor = request.result;
            if (!cursor)
                resolve({ cursor: null, continue: () => Promise.reject() });
            else
                resolve({
                    cursor,
                    continue: () => {
                        cursor.continue();
                        return main_wrapCursorRequest(request);
                    },
                });
        };
        request.onerror = () => reject(request.error);
    });
}
/**
 * A simple key/value persistence using an IndexedDB storage backend.
 *
 * See [Using IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB) for an
 * introduction to how IndexedDB works, its APIs, and how to use it.
 *
 * Note: Currently there is no support for database upgrades. Each instance of this class uses a single IDBObjectStore
 * object set at instantiation time, and there are no hooks for performing migrations between versions. This may be
 * added in the future if such functionality is needed.
 */
class main_IndexedDBPersistence {
    /**
     * Construct an {@link IndexedDBPersistence} instance corresponding to a given IndexedDB database version.
     *
     * Throws `ConstraintError` if the version number is invalid (e.g. NaN, or less than 1).
     */
    constructor(options) {
        var _a;
        // We'll namespace our DB names to A) avoid collisions with host applications and B) be transparent about who
        // is using persistence.
        this.databaseName = `Snap.CameraKit.${options.databaseName}`;
        this.databaseVersion = options.databaseVersion;
        this.objectStore = (_a = options.objectStore) !== null && _a !== void 0 ? _a : options.databaseName;
        // `open()` will throw if the version is invalid -- this is desirable vs. rejecting the `db` promise, since then
        // the error is only reported when callers try to perform some operation. Instead, we want the instantiating
        // code to see the error.
        this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
        this.size = 0;
    }
    retrieve(key) {
        return this.simpleTransaction("readonly", (store) => store.get(key));
    }
    retrieveAll() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = [];
            const { store, done } = yield this.transaction("readonly");
            let request = yield main_wrapCursorRequest(store.openCursor());
            while (request.cursor) {
                results.push([request.cursor.primaryKey, request.cursor.value]);
                request = yield request.continue();
            }
            yield done;
            return results;
        });
    }
    remove(key) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.simpleTransaction("readwrite", (store) => store.delete(key));
            this.size--;
        });
    }
    removeAll() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = [];
            const { store, done } = yield this.transaction("readwrite");
            let request = yield main_wrapCursorRequest(store.openCursor());
            const deleteRequests = [];
            while (request.cursor) {
                results.push(request.cursor.value);
                // If any of the deletes fail (e.g. if the user deletes the object store during the transaction), it will
                // fail the whole transaction. Since the primary expected cause of this failure mode is that the entire
                // object store no longer exists, it's unlikely this will result in unbounded DB growth. That said, callers
                // may want to attempt to retry the removal, or raise an alarm if the persistence size grows unexpectedly.
                deleteRequests.push(main_wrapRequest(store.delete(request.cursor.key)));
                request = yield request.continue();
            }
            yield Promise.all(deleteRequests.concat(done));
            this.size = 0;
            return results;
        });
    }
    store(keyOrValue, maybeValue) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
            // The key must be ValidKey | undefined.
            if (!main_isValidKey(key) && typeof key !== "undefined")
                throw new TypeError(`IndexedDBPersistence failed to ` + `store a value. Invalid key type: ${typeof key}`);
            const storedKey = yield this.simpleTransaction("readwrite", (store) => store.put(value, key));
            this.size++;
            // Type safety: we already assert any given key is valid, and if the key is undefined IndexedDB will generate
            // a numeric key (https://w3c.github.io/IndexedDB/#key-generator).
            return storedKey;
        });
    }
    openDatabase(request) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            // The `open()` call will throw if databaseVersion is invalid (e.g. < 1).
            const dbPromise = main_wrapRequest(request);
            dbPromise.request.onupgradeneeded = () => {
                try {
                    // The following DOMExceptions may be thrown by `createObjectStore()` – they should all be logically
                    // impossible. We handle the one recoverable exception which could occur below.
                    //
                    // TransactionInactiveError: the database does not exist.
                    // InvalidStateError: `createObjectStore` was called outside a `versionchange` transaction.
                    // InvalidAccessError: `autoIncrement` is true and `keyPath` contains an empty string.
                    dbPromise.request.result.createObjectStore(this.objectStore, { autoIncrement: true });
                }
                catch (error) {
                    // ConstraintError is thrown if the object store already exists. Could happen if multiple tabs to the
                    // same domain are opened and race to create the object store. In this case we can safely ignore the
                    // error and continue.
                    if (error instanceof DOMException && error.name === "ConstraintError")
                        return;
                    throw error;
                }
            };
            const db = yield dbPromise;
            db.onclose = () => {
                // The 'close` event fires when the DB is unexpectedly closed (e.g. user clears application data). We'll
                // attempt to re-open it (which may fail, in which case no further attempts will be made, and all future
                // transactions will fail).
                this.db = this.openDatabase(indexedDB.open(this.databaseName, this.databaseVersion));
            };
            return db;
        });
    }
    simpleTransaction(mode, operation) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { store, done } = yield this.transaction(mode);
            const [result] = yield Promise.all([main_wrapRequest(operation(store)), done]);
            return result;
        });
    }
    transaction(mode) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const db = yield this.db;
            // The following DOMExceptions may be thrown – they should all be logically impossible, or could be
            // triggered by the user deleting or modifying the database (e.g. via DevTools) at the right time. We won't
            // attempt to recover from them now, but may decide to do so in the future (if we see them in the wild).
            //
            // InvalidStateError: `close()` has previously been called on the IDBDatabase
            // NotFoundError: the object store does not exist.
            // TypeError: the `mode` parameter is invalid.
            // InvalidAccessError: the function was called with an empty list of object stores.
            const tx = db.transaction(this.objectStore, mode);
            // Similarly, the following DOMExceptions may be thrown by `objectStore()`:
            //
            // InvalidStateError: the transaction has already completed.
            // NotFoundError: the object store is not in the transaction's scope.
            const store = tx.objectStore(this.objectStore);
            const done = new Promise((resolve, reject) => {
                tx.oncomplete = () => resolve();
                tx.onerror = () => reject(tx.error);
                tx.onabort = () => reject(new DOMException("The transaction was aborted", "AbortError"));
            });
            return { tx, store, done };
        });
    }
}
//# sourceMappingURL=IndexedDBPersistence.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/mappingHandler.js

/**
 * Map from one request type to another, potentially asynchronously.
 *
 * **NOTE:** If `maxMapConcurrency` is set to some finite number, and more requests are handled than are allowed to
 * be concurrently mapped, the waiting requests will be placed into a unbounded buffer. If, for example, requests are
 * handled with high frequency, `maxMapConcurrency` is low, and the `map` function returns a long-running Promise, this
 * buffer could use a large amount of memory. Keep this in mind when using this handler.
 *
 * @param map Transform each request, may be sync or async.
 * @param pageVisibility Determines whether to flush buffered requests when the page becomes hidden.
 * `false` value indicates that page visibility handling is avoided, while
 * a {@link PageVisibility} instance is used to subscribe to page visibility change events.
 * @param maxMapConcurrency If the `map` function is async, it will be invoked at most this number of times
 * concurrently. Setting this to 1 could be useful if it's important for `map` to be called in serial.
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createMappingHandler = (map, pageVisibility, maxMapConcurrency = Number.POSITIVE_INFINITY) => {
    const buffer = [];
    let mapConcurrency = 0;
    const processRequest = (request) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            mapConcurrency++;
            const mapped = request.map();
            // We want to make sure that if the mapping operation is not async, we don't introduce asynchronicity here
            // (which unfortunately happens even if you `await` a non-Promise value). This is important so that e.g.
            // handlers which run when the page is terminated can send requests synchronously, since the browser may
            // not pick up any async handlers registered to run on the following event loop.
            if (mapped instanceof Promise)
                request.next(yield mapped);
            else if (mapped)
                request.next(mapped);
        }
        catch (error) {
            request.reject(error);
        }
        finally {
            mapConcurrency--;
        }
        while (buffer.length > 0 && mapConcurrency < maxMapConcurrency) {
            // Safety: we just checked for `buffer.length > 0`, so the shifted value will never be undefined.
            processRequest(buffer.shift());
        }
    });
    // This may indicate that the page is being unloaded, in which case we may want to flush any buffered requests
    // regardless of our max concurrency – otherwise those requests will be lost when the page terminates.
    if (pageVisibility) {
        pageVisibility.onPageHidden(() => {
            while (buffer.length > 0)
                processRequest(buffer.shift());
        });
    }
    return (next) => (request, metadata) => {
        return new Promise((resolve, reject) => {
            const mappableRequest = {
                map: () => map(request),
                next: (mappedRequest) => next(mappedRequest, metadata).then(resolve).catch(reject),
                reject,
            };
            if (mapConcurrency < maxMapConcurrency)
                processRequest(mappableRequest);
            else
                buffer.push(mappableRequest);
        });
    };
};
//# sourceMappingURL=mappingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/batchingHandler.js


/**
 * Accumulate requests into batches, which are then sent to the next handler in the chain. Batches are sent when either:
 * - the given `isBatchComplete` function returns true, closing the current batch and sending it down the chain.
 * - an optional `maxBatchAge` time has elapsed since the first request in the batch was received.
 * - the page terminates.
 *
 * When handling a request, the Promise returned will resolve when that request has been successfully added to the
 * current batch – **NOT** when that batch has been successfully processed by the rest of the handler chain.
 *
 * The `next` handler in the chain will receive the batch and should handle any errors arising from further processing
 * on the batch (e.g. sending it to a server).
 *
 * **Note:** This handler does not support aborting handled requests via AbortSignal.
 *
 * @param options
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createBatchingHandler = ({ batchReduce, isBatchComplete, maxBatchAge, pageVisibility, }) => {
    // TODO: this should just be `number`, but we're picking up NodeJS types (@types/node) when building, so setTimeout
    // gets a different return type than what it should have in the browser. We should build without NodeJS types, but
    // that will require some fixes across the codebase.
    let batchTimeout;
    let currentBatch = undefined;
    let clearOnHidden = () => { };
    const reducingHandler = main_createMappingHandler((request) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        currentBatch = yield batchReduce(currentBatch, request);
        return currentBatch;
    }), pageVisibility, 1);
    const batchAndSend = (next, request, metadata) => {
        const batch = request ? batchReduce(currentBatch, request) : currentBatch;
        if (!batch)
            return;
        // `next` should handle its own errors – that is, the batchingHandler is meant to be placed in a handler chain
        // prior to any error logging, retrying, etc. handlers.
        const complete = batch instanceof Promise
            ? batch.then((b) => next(b, metadata)).catch(() => { })
            : next(batch, metadata).catch(() => { });
        currentBatch = undefined;
        clearTimeout(batchTimeout);
        clearOnHidden();
        return complete;
    };
    return (next) => (request, metadata) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        // Requests may be made while the page is transitioning to hidden – for example, the page is being unloaded and
        // we're reporting final metrics. In this case, we need to skip batching and synchronously call `next` so that
        // the request is not lost.
        if (pageVisibility && pageVisibility.isDuringVisibilityTransition("hidden")) {
            yield batchAndSend(next, request, metadata);
            return;
        }
        // If this is the first request in a batch, we need to set up some callbacks to flush the batch when certain
        // events occur:
        //
        // - maxBatchAge time passes.
        // - page visibility transitions to hidden (which could indicate the page is being unloaded).
        //
        if (currentBatch === undefined) {
            const sendBatch = () => batchAndSend(next, undefined, metadata);
            if (maxBatchAge !== undefined)
                batchTimeout = setTimeout(sendBatch, maxBatchAge);
            if (pageVisibility)
                clearOnHidden = pageVisibility.onPageHidden(sendBatch);
        }
        const handle = reducingHandler(() => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (!currentBatch)
                return;
            if (!isBatchComplete(currentBatch))
                return;
            yield batchAndSend(next, undefined, metadata);
        }));
        return handle(request, metadata);
    });
};
//# sourceMappingURL=batchingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/ranking.js


const main_ranking_protobufPackage = "com.snap.camerakit.v3";
var main_RankingData_OSType;
(function (RankingData_OSType) {
    RankingData_OSType[RankingData_OSType["OS_TYPE_UNSET"] = 0] = "OS_TYPE_UNSET";
    RankingData_OSType[RankingData_OSType["OS_TYPE_ANDROID"] = 1] = "OS_TYPE_ANDROID";
    RankingData_OSType[RankingData_OSType["OS_TYPE_IOS"] = 2] = "OS_TYPE_IOS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_IPAD_OS"] = 3] = "OS_TYPE_IPAD_OS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_MAC_OS"] = 4] = "OS_TYPE_MAC_OS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_WINDOWS"] = 5] = "OS_TYPE_WINDOWS";
    RankingData_OSType[RankingData_OSType["OS_TYPE_LINUX"] = 6] = "OS_TYPE_LINUX";
    RankingData_OSType[RankingData_OSType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_RankingData_OSType || (main_RankingData_OSType = {}));
function main_rankingData_OSTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "OS_TYPE_UNSET":
            return main_RankingData_OSType.OS_TYPE_UNSET;
        case 1:
        case "OS_TYPE_ANDROID":
            return main_RankingData_OSType.OS_TYPE_ANDROID;
        case 2:
        case "OS_TYPE_IOS":
            return main_RankingData_OSType.OS_TYPE_IOS;
        case 3:
        case "OS_TYPE_IPAD_OS":
            return main_RankingData_OSType.OS_TYPE_IPAD_OS;
        case 4:
        case "OS_TYPE_MAC_OS":
            return main_RankingData_OSType.OS_TYPE_MAC_OS;
        case 5:
        case "OS_TYPE_WINDOWS":
            return main_RankingData_OSType.OS_TYPE_WINDOWS;
        case 6:
        case "OS_TYPE_LINUX":
            return main_RankingData_OSType.OS_TYPE_LINUX;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_RankingData_OSType.UNRECOGNIZED;
    }
}
function main_rankingData_OSTypeToJSON(object) {
    switch (object) {
        case main_RankingData_OSType.OS_TYPE_UNSET:
            return "OS_TYPE_UNSET";
        case main_RankingData_OSType.OS_TYPE_ANDROID:
            return "OS_TYPE_ANDROID";
        case main_RankingData_OSType.OS_TYPE_IOS:
            return "OS_TYPE_IOS";
        case main_RankingData_OSType.OS_TYPE_IPAD_OS:
            return "OS_TYPE_IPAD_OS";
        case main_RankingData_OSType.OS_TYPE_MAC_OS:
            return "OS_TYPE_MAC_OS";
        case main_RankingData_OSType.OS_TYPE_WINDOWS:
            return "OS_TYPE_WINDOWS";
        case main_RankingData_OSType.OS_TYPE_LINUX:
            return "OS_TYPE_LINUX";
        default:
            return "UNKNOWN";
    }
}
var main_RankingData_ConnectivityType;
(function (RankingData_ConnectivityType) {
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNSET"] = 0] = "CONNECTIVITY_TYPE_UNSET";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_WIFI"] = 1] = "CONNECTIVITY_TYPE_WIFI";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_MOBILE"] = 2] = "CONNECTIVITY_TYPE_MOBILE";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CONNECTIVITY_TYPE_UNREACHABLE";
    RankingData_ConnectivityType[RankingData_ConnectivityType["CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CONNECTIVITY_TYPE_BLUETOOTH";
    RankingData_ConnectivityType[RankingData_ConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_RankingData_ConnectivityType || (main_RankingData_ConnectivityType = {}));
function main_rankingData_ConnectivityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CONNECTIVITY_TYPE_UNSET":
            return main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET;
        case 1:
        case "CONNECTIVITY_TYPE_WIFI":
            return main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI;
        case 2:
        case "CONNECTIVITY_TYPE_MOBILE":
            return main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE;
        case 3:
        case "CONNECTIVITY_TYPE_UNREACHABLE":
            return main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE;
        case 4:
        case "CONNECTIVITY_TYPE_BLUETOOTH":
            return main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_RankingData_ConnectivityType.UNRECOGNIZED;
    }
}
function main_rankingData_ConnectivityTypeToJSON(object) {
    switch (object) {
        case main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNSET:
            return "CONNECTIVITY_TYPE_UNSET";
        case main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_WIFI:
            return "CONNECTIVITY_TYPE_WIFI";
        case main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_MOBILE:
            return "CONNECTIVITY_TYPE_MOBILE";
        case main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_UNREACHABLE:
            return "CONNECTIVITY_TYPE_UNREACHABLE";
        case main_RankingData_ConnectivityType.CONNECTIVITY_TYPE_BLUETOOTH:
            return "CONNECTIVITY_TYPE_BLUETOOTH";
        default:
            return "UNKNOWN";
    }
}
function main_createBaseRankingData() {
    return { sessionId: "", locale: "", osType: 0, connectivityType: 0 };
}
const main_RankingData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.osType !== 0) {
            writer.uint32(24).int32(message.osType);
        }
        if (message.connectivityType !== 0) {
            writer.uint32(32).int32(message.connectivityType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseRankingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.osType = reader.int32();
                    break;
                case 4:
                    message.connectivityType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            sessionId: main_ranking_isSet(object.sessionId) ? String(object.sessionId) : "",
            locale: main_ranking_isSet(object.locale) ? String(object.locale) : "",
            osType: main_ranking_isSet(object.osType) ? main_rankingData_OSTypeFromJSON(object.osType) : 0,
            connectivityType: main_ranking_isSet(object.connectivityType)
                ? main_rankingData_ConnectivityTypeFromJSON(object.connectivityType)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.sessionId !== undefined && (obj.sessionId = message.sessionId);
        message.locale !== undefined && (obj.locale = message.locale);
        message.osType !== undefined && (obj.osType = main_rankingData_OSTypeToJSON(message.osType));
        message.connectivityType !== undefined &&
            (obj.connectivityType = main_rankingData_ConnectivityTypeToJSON(message.connectivityType));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseRankingData();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.osType = (_c = object.osType) !== null && _c !== void 0 ? _c : 0;
        message.connectivityType = (_d = object.connectivityType) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_ranking_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=ranking.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/legal_prompt.js



const main_legal_prompt_protobufPackage = "com.snap.camerakit.v3";
var main_LegalDocument_Type;
(function (LegalDocument_Type) {
    LegalDocument_Type[LegalDocument_Type["UNSET"] = 0] = "UNSET";
    LegalDocument_Type[LegalDocument_Type["TERMS_OF_SERVICE"] = 1] = "TERMS_OF_SERVICE";
    LegalDocument_Type[LegalDocument_Type["PRIVACY_POLICY"] = 2] = "PRIVACY_POLICY";
    LegalDocument_Type[LegalDocument_Type["LEARN_MORE"] = 3] = "LEARN_MORE";
    LegalDocument_Type[LegalDocument_Type["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_LegalDocument_Type || (main_LegalDocument_Type = {}));
function main_legalDocument_TypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return main_LegalDocument_Type.UNSET;
        case 1:
        case "TERMS_OF_SERVICE":
            return main_LegalDocument_Type.TERMS_OF_SERVICE;
        case 2:
        case "PRIVACY_POLICY":
            return main_LegalDocument_Type.PRIVACY_POLICY;
        case 3:
        case "LEARN_MORE":
            return main_LegalDocument_Type.LEARN_MORE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LegalDocument_Type.UNRECOGNIZED;
    }
}
function main_legalDocument_TypeToJSON(object) {
    switch (object) {
        case main_LegalDocument_Type.UNSET:
            return "UNSET";
        case main_LegalDocument_Type.TERMS_OF_SERVICE:
            return "TERMS_OF_SERVICE";
        case main_LegalDocument_Type.PRIVACY_POLICY:
            return "PRIVACY_POLICY";
        case main_LegalDocument_Type.LEARN_MORE:
            return "LEARN_MORE";
        default:
            return "UNKNOWN";
    }
}
function main_createBaseLegalPrompt() {
    return { documents: [], disabled: false };
}
const main_LegalPrompt = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.documents) {
            main_LegalDocument.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.disabled === true) {
            writer.uint32(16).bool(message.disabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLegalPrompt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.documents.push(main_LegalDocument.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.disabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            documents: Array.isArray(object === null || object === void 0 ? void 0 : object.documents) ? object.documents.map((e) => main_LegalDocument.fromJSON(e)) : [],
            disabled: main_legal_prompt_isSet(object.disabled) ? Boolean(object.disabled) : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.documents) {
            obj.documents = message.documents.map((e) => (e ? main_LegalDocument.toJSON(e) : undefined));
        }
        else {
            obj.documents = [];
        }
        message.disabled !== undefined && (obj.disabled = message.disabled);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseLegalPrompt();
        message.documents = ((_a = object.documents) === null || _a === void 0 ? void 0 : _a.map((e) => main_LegalDocument.fromPartial(e))) || [];
        message.disabled = (_b = object.disabled) !== null && _b !== void 0 ? _b : false;
        return message;
    },
};
function main_createBaseLegalDocument() {
    return { type: 0, webUrl: "", version: "", timestamp: undefined };
}
const main_LegalDocument = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.webUrl !== "") {
            writer.uint32(18).string(message.webUrl);
        }
        if (message.version !== "") {
            writer.uint32(26).string(message.version);
        }
        if (message.timestamp !== undefined) {
            main_Timestamp.encode(main_legal_prompt_toTimestamp(message.timestamp), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLegalDocument();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.type = reader.int32();
                    break;
                case 2:
                    message.webUrl = reader.string();
                    break;
                case 3:
                    message.version = reader.string();
                    break;
                case 4:
                    message.timestamp = main_legal_prompt_fromTimestamp(main_Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            type: main_legal_prompt_isSet(object.type) ? main_legalDocument_TypeFromJSON(object.type) : 0,
            webUrl: main_legal_prompt_isSet(object.webUrl) ? String(object.webUrl) : "",
            version: main_legal_prompt_isSet(object.version) ? String(object.version) : "",
            timestamp: main_legal_prompt_isSet(object.timestamp) ? main_fromJsonTimestamp(object.timestamp) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.type !== undefined && (obj.type = main_legalDocument_TypeToJSON(message.type));
        message.webUrl !== undefined && (obj.webUrl = message.webUrl);
        message.version !== undefined && (obj.version = message.version);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseLegalDocument();
        message.type = (_a = object.type) !== null && _a !== void 0 ? _a : 0;
        message.webUrl = (_b = object.webUrl) !== null && _b !== void 0 ? _b : "";
        message.version = (_c = object.version) !== null && _c !== void 0 ? _c : "";
        message.timestamp = (_d = object.timestamp) !== null && _d !== void 0 ? _d : undefined;
        return message;
    },
};
function main_legal_prompt_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function main_legal_prompt_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function main_fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return main_legal_prompt_fromTimestamp(main_Timestamp.fromJSON(o));
    }
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_legal_prompt_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=legal_prompt.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/operational_metrics.js



const main_operational_metrics_protobufPackage = "com.snap.camerakit.v3";
function main_createBaseOperationalMetric() {
    return { name: "", timestamp: undefined, metric: undefined };
}
const main_OperationalMetric = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        var _a, _b, _c;
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.timestamp !== undefined) {
            main_Timestamp.encode(main_operational_metrics_toTimestamp(message.timestamp), writer.uint32(18).fork()).ldelim();
        }
        if (((_a = message.metric) === null || _a === void 0 ? void 0 : _a.$case) === "count") {
            writer.uint32(24).uint64(message.metric.count);
        }
        if (((_b = message.metric) === null || _b === void 0 ? void 0 : _b.$case) === "latencyMillis") {
            writer.uint32(32).uint64(message.metric.latencyMillis);
        }
        if (((_c = message.metric) === null || _c === void 0 ? void 0 : _c.$case) === "histogram") {
            writer.uint32(40).int64(message.metric.histogram);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseOperationalMetric();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.timestamp = main_operational_metrics_fromTimestamp(main_Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.metric = { $case: "count", count: main_operational_metrics_longToNumber(reader.uint64()) };
                    break;
                case 4:
                    message.metric = { $case: "latencyMillis", latencyMillis: main_operational_metrics_longToNumber(reader.uint64()) };
                    break;
                case 5:
                    message.metric = { $case: "histogram", histogram: main_operational_metrics_longToNumber(reader.int64()) };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: main_operational_metrics_isSet(object.name) ? String(object.name) : "",
            timestamp: main_operational_metrics_isSet(object.timestamp) ? main_operational_metrics_fromJsonTimestamp(object.timestamp) : undefined,
            metric: main_operational_metrics_isSet(object.count)
                ? { $case: "count", count: Number(object.count) }
                : main_operational_metrics_isSet(object.latencyMillis)
                    ? { $case: "latencyMillis", latencyMillis: Number(object.latencyMillis) }
                    : main_operational_metrics_isSet(object.histogram)
                        ? { $case: "histogram", histogram: Number(object.histogram) }
                        : undefined,
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f;
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.timestamp !== undefined && (obj.timestamp = message.timestamp.toISOString());
        ((_a = message.metric) === null || _a === void 0 ? void 0 : _a.$case) === "count" && (obj.count = Math.round((_b = message.metric) === null || _b === void 0 ? void 0 : _b.count));
        ((_c = message.metric) === null || _c === void 0 ? void 0 : _c.$case) === "latencyMillis" && (obj.latencyMillis = Math.round((_d = message.metric) === null || _d === void 0 ? void 0 : _d.latencyMillis));
        ((_e = message.metric) === null || _e === void 0 ? void 0 : _e.$case) === "histogram" && (obj.histogram = Math.round((_f = message.metric) === null || _f === void 0 ? void 0 : _f.histogram));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = main_createBaseOperationalMetric();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.timestamp = (_b = object.timestamp) !== null && _b !== void 0 ? _b : undefined;
        if (((_c = object.metric) === null || _c === void 0 ? void 0 : _c.$case) === "count" && ((_d = object.metric) === null || _d === void 0 ? void 0 : _d.count) !== undefined && ((_e = object.metric) === null || _e === void 0 ? void 0 : _e.count) !== null) {
            message.metric = { $case: "count", count: object.metric.count };
        }
        if (((_f = object.metric) === null || _f === void 0 ? void 0 : _f.$case) === "latencyMillis" &&
            ((_g = object.metric) === null || _g === void 0 ? void 0 : _g.latencyMillis) !== undefined &&
            ((_h = object.metric) === null || _h === void 0 ? void 0 : _h.latencyMillis) !== null) {
            message.metric = { $case: "latencyMillis", latencyMillis: object.metric.latencyMillis };
        }
        if (((_j = object.metric) === null || _j === void 0 ? void 0 : _j.$case) === "histogram" &&
            ((_k = object.metric) === null || _k === void 0 ? void 0 : _k.histogram) !== undefined &&
            ((_l = object.metric) === null || _l === void 0 ? void 0 : _l.histogram) !== null) {
            message.metric = { $case: "histogram", histogram: object.metric.histogram };
        }
        return message;
    },
};
function main_createBaseOperationalMetricsBundle() {
    return { metrics: [] };
}
const main_OperationalMetricsBundle = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.metrics) {
            main_OperationalMetric.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseOperationalMetricsBundle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics.push(main_OperationalMetric.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: Array.isArray(object === null || object === void 0 ? void 0 : object.metrics) ? object.metrics.map((e) => main_OperationalMetric.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.metrics) {
            obj.metrics = message.metrics.map((e) => (e ? main_OperationalMetric.toJSON(e) : undefined));
        }
        else {
            obj.metrics = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseOperationalMetricsBundle();
        message.metrics = ((_a = object.metrics) === null || _a === void 0 ? void 0 : _a.map((e) => main_OperationalMetric.fromPartial(e))) || [];
        return message;
    },
};
var main_operational_metrics_globalThis = (() => {
    if (typeof main_operational_metrics_globalThis !== "undefined")
        return main_operational_metrics_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_operational_metrics_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function main_operational_metrics_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function main_operational_metrics_fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return main_operational_metrics_fromTimestamp(main_Timestamp.fromJSON(o));
    }
}
function main_operational_metrics_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_operational_metrics_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_operational_metrics_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=operational_metrics.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/business_events.js


const main_business_events_protobufPackage = "com.snap.camerakit.v3";
var main_CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNSET"] = 0] = "CAMERA_KIT_FLAVOR_UNSET";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CameraKitFlavor || (main_CameraKitFlavor = {}));
function main_cameraKitFlavorFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_KIT_FLAVOR_UNSET":
            return main_CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET;
        case 1:
        case "CAMERA_KIT_FLAVOR_DEBUG":
            return main_CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG;
        case 2:
        case "CAMERA_KIT_FLAVOR_RELEASE":
            return main_CameraKitFlavor.CAMERA_KIT_FLAVOR_RELEASE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_CameraKitFlavor.UNRECOGNIZED;
    }
}
function main_cameraKitFlavorToJSON(object) {
    switch (object) {
        case main_CameraKitFlavor.CAMERA_KIT_FLAVOR_UNSET:
            return "CAMERA_KIT_FLAVOR_UNSET";
        case main_CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG:
            return "CAMERA_KIT_FLAVOR_DEBUG";
        case main_CameraKitFlavor.CAMERA_KIT_FLAVOR_RELEASE:
            return "CAMERA_KIT_FLAVOR_RELEASE";
        default:
            return "UNKNOWN";
    }
}
var main_CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNSET"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CameraKitConnectivityType || (main_CameraKitConnectivityType = {}));
function main_cameraKitConnectivityTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET":
            return main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET;
        case 1:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI":
            return main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI;
        case 2:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE":
            return main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE;
        case 3:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE":
            return main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE;
        case 4:
        case "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH":
            return main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_CameraKitConnectivityType.UNRECOGNIZED;
    }
}
function main_cameraKitConnectivityTypeToJSON(object) {
    switch (object) {
        case main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNSET:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_UNSET";
        case main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
        case main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
        case main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
        case main_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH:
            return "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
        default:
            return "UNKNOWN";
    }
}
var main_CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNSET"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNSET";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CameraKitEnvironment || (main_CameraKitEnvironment = {}));
function main_cameraKitEnvironmentFromJSON(object) {
    switch (object) {
        case 0:
        case "CAMERA_KIT_ENVIRONMENT_UNSET":
            return main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_UNSET;
        case 1:
        case "CAMERA_KIT_ENVIRONMENT_STAGING":
            return main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_STAGING;
        case 2:
        case "CAMERA_KIT_ENVIRONMENT_PRODUCTION":
            return main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_PRODUCTION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_CameraKitEnvironment.UNRECOGNIZED;
    }
}
function main_cameraKitEnvironmentToJSON(object) {
    switch (object) {
        case main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_UNSET:
            return "CAMERA_KIT_ENVIRONMENT_UNSET";
        case main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_STAGING:
            return "CAMERA_KIT_ENVIRONMENT_STAGING";
        case main_CameraKitEnvironment.CAMERA_KIT_ENVIRONMENT_PRODUCTION:
            return "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
        default:
            return "UNKNOWN";
    }
}
function main_createBaseExtensionEventBase() {
    return {
        extensionName: "",
        extensionVersion: "",
        deviceCluster: 0,
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        cameraKitEnvironment: 0,
    };
}
const main_ExtensionEventBase = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.extensionName !== "") {
            writer.uint32(10).string(message.extensionName);
        }
        if (message.extensionVersion !== "") {
            writer.uint32(18).string(message.extensionVersion);
        }
        if (message.deviceCluster !== 0) {
            writer.uint32(24).int64(message.deviceCluster);
        }
        if (message.cameraKitVersion !== "") {
            writer.uint32(34).string(message.cameraKitVersion);
        }
        if (message.lensCoreVersion !== "") {
            writer.uint32(42).string(message.lensCoreVersion);
        }
        if (message.deviceModel !== "") {
            writer.uint32(50).string(message.deviceModel);
        }
        if (message.cameraKitFlavor !== 0) {
            writer.uint32(56).int32(message.cameraKitFlavor);
        }
        if (message.appId !== "") {
            writer.uint32(66).string(message.appId);
        }
        if (message.deviceConnectivity !== 0) {
            writer.uint32(72).int32(message.deviceConnectivity);
        }
        if (message.sessionId !== "") {
            writer.uint32(82).string(message.sessionId);
        }
        if (message.cameraKitEnvironment !== 0) {
            writer.uint32(88).int32(message.cameraKitEnvironment);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExtensionEventBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.extensionName = reader.string();
                    break;
                case 2:
                    message.extensionVersion = reader.string();
                    break;
                case 3:
                    message.deviceCluster = main_business_events_longToNumber(reader.int64());
                    break;
                case 4:
                    message.cameraKitVersion = reader.string();
                    break;
                case 5:
                    message.lensCoreVersion = reader.string();
                    break;
                case 6:
                    message.deviceModel = reader.string();
                    break;
                case 7:
                    message.cameraKitFlavor = reader.int32();
                    break;
                case 8:
                    message.appId = reader.string();
                    break;
                case 9:
                    message.deviceConnectivity = reader.int32();
                    break;
                case 10:
                    message.sessionId = reader.string();
                    break;
                case 11:
                    message.cameraKitEnvironment = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            extensionName: main_business_events_isSet(object.extensionName) ? String(object.extensionName) : "",
            extensionVersion: main_business_events_isSet(object.extensionVersion) ? String(object.extensionVersion) : "",
            deviceCluster: main_business_events_isSet(object.deviceCluster) ? Number(object.deviceCluster) : 0,
            cameraKitVersion: main_business_events_isSet(object.cameraKitVersion) ? String(object.cameraKitVersion) : "",
            lensCoreVersion: main_business_events_isSet(object.lensCoreVersion) ? String(object.lensCoreVersion) : "",
            deviceModel: main_business_events_isSet(object.deviceModel) ? String(object.deviceModel) : "",
            cameraKitFlavor: main_business_events_isSet(object.cameraKitFlavor) ? main_cameraKitFlavorFromJSON(object.cameraKitFlavor) : 0,
            appId: main_business_events_isSet(object.appId) ? String(object.appId) : "",
            deviceConnectivity: main_business_events_isSet(object.deviceConnectivity)
                ? main_cameraKitConnectivityTypeFromJSON(object.deviceConnectivity)
                : 0,
            sessionId: main_business_events_isSet(object.sessionId) ? String(object.sessionId) : "",
            cameraKitEnvironment: main_business_events_isSet(object.cameraKitEnvironment)
                ? main_cameraKitEnvironmentFromJSON(object.cameraKitEnvironment)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.extensionName !== undefined && (obj.extensionName = message.extensionName);
        message.extensionVersion !== undefined && (obj.extensionVersion = message.extensionVersion);
        message.deviceCluster !== undefined && (obj.deviceCluster = Math.round(message.deviceCluster));
        message.cameraKitVersion !== undefined && (obj.cameraKitVersion = message.cameraKitVersion);
        message.lensCoreVersion !== undefined && (obj.lensCoreVersion = message.lensCoreVersion);
        message.deviceModel !== undefined && (obj.deviceModel = message.deviceModel);
        message.cameraKitFlavor !== undefined && (obj.cameraKitFlavor = main_cameraKitFlavorToJSON(message.cameraKitFlavor));
        message.appId !== undefined && (obj.appId = message.appId);
        message.deviceConnectivity !== undefined &&
            (obj.deviceConnectivity = main_cameraKitConnectivityTypeToJSON(message.deviceConnectivity));
        message.sessionId !== undefined && (obj.sessionId = message.sessionId);
        message.cameraKitEnvironment !== undefined &&
            (obj.cameraKitEnvironment = main_cameraKitEnvironmentToJSON(message.cameraKitEnvironment));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = main_createBaseExtensionEventBase();
        message.extensionName = (_a = object.extensionName) !== null && _a !== void 0 ? _a : "";
        message.extensionVersion = (_b = object.extensionVersion) !== null && _b !== void 0 ? _b : "";
        message.deviceCluster = (_c = object.deviceCluster) !== null && _c !== void 0 ? _c : 0;
        message.cameraKitVersion = (_d = object.cameraKitVersion) !== null && _d !== void 0 ? _d : "";
        message.lensCoreVersion = (_e = object.lensCoreVersion) !== null && _e !== void 0 ? _e : "";
        message.deviceModel = (_f = object.deviceModel) !== null && _f !== void 0 ? _f : "";
        message.cameraKitFlavor = (_g = object.cameraKitFlavor) !== null && _g !== void 0 ? _g : 0;
        message.appId = (_h = object.appId) !== null && _h !== void 0 ? _h : "";
        message.deviceConnectivity = (_j = object.deviceConnectivity) !== null && _j !== void 0 ? _j : 0;
        message.sessionId = (_k = object.sessionId) !== null && _k !== void 0 ? _k : "";
        message.cameraKitEnvironment = (_l = object.cameraKitEnvironment) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
var main_business_events_globalThis = (() => {
    if (typeof main_business_events_globalThis !== "undefined")
        return main_business_events_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_business_events_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_business_events_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_business_events_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=business_events.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/service.js








const main_service_protobufPackage = "com.snap.camerakit.v3";
function main_createBaseGetGroupRequest() {
    return { id: "", rankingData: undefined };
}
const main_GetGroupRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.rankingData !== undefined) {
            main_RankingData.encode(message.rankingData, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetGroupRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.rankingData = main_RankingData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: main_service_isSet(object.id) ? String(object.id) : "",
            rankingData: main_service_isSet(object.rankingData) ? main_RankingData.fromJSON(object.rankingData) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.rankingData !== undefined &&
            (obj.rankingData = message.rankingData ? main_RankingData.toJSON(message.rankingData) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetGroupRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.rankingData =
            object.rankingData !== undefined && object.rankingData !== null
                ? main_RankingData.fromPartial(object.rankingData)
                : undefined;
        return message;
    },
};
function main_createBaseGetGroupResponse() {
    return { id: "", lenses: [] };
}
const main_GetGroupResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        for (const v of message.lenses) {
            main_Lens.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetGroupResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.lenses.push(main_Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: main_service_isSet(object.id) ? String(object.id) : "",
            lenses: Array.isArray(object === null || object === void 0 ? void 0 : object.lenses) ? object.lenses.map((e) => main_Lens.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        if (message.lenses) {
            obj.lenses = message.lenses.map((e) => (e ? main_Lens.toJSON(e) : undefined));
        }
        else {
            obj.lenses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseGetGroupResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.lenses = ((_b = object.lenses) === null || _b === void 0 ? void 0 : _b.map((e) => main_Lens.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseGetGroupLensRequest() {
    return { lensId: "", groupId: "" };
}
const main_GetGroupLensRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.lensId !== "") {
            writer.uint32(10).string(message.lensId);
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = reader.string();
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lensId: main_service_isSet(object.lensId) ? String(object.lensId) : "",
            groupId: main_service_isSet(object.groupId) ? String(object.groupId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lensId !== undefined && (obj.lensId = message.lensId);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseGetGroupLensRequest();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.groupId = (_b = object.groupId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseGetGroupLensResponse() {
    return { lens: undefined, groupId: "" };
}
const main_GetGroupLensResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.lens !== undefined) {
            main_Lens.encode(message.lens, writer.uint32(10).fork()).ldelim();
        }
        if (message.groupId !== "") {
            writer.uint32(18).string(message.groupId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lens = main_Lens.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.groupId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            lens: main_service_isSet(object.lens) ? main_Lens.fromJSON(object.lens) : undefined,
            groupId: main_service_isSet(object.groupId) ? String(object.groupId) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.lens !== undefined && (obj.lens = message.lens ? main_Lens.toJSON(message.lens) : undefined);
        message.groupId !== undefined && (obj.groupId = message.groupId);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetGroupLensResponse();
        message.lens = object.lens !== undefined && object.lens !== null ? main_Lens.fromPartial(object.lens) : undefined;
        message.groupId = (_a = object.groupId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseBatchGetGroupLensRequest() {
    return { getRequests: [] };
}
const main_BatchGetGroupLensRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.getRequests) {
            main_GetGroupLensRequest.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBatchGetGroupLensRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getRequests.push(main_GetGroupLensRequest.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            getRequests: Array.isArray(object === null || object === void 0 ? void 0 : object.getRequests)
                ? object.getRequests.map((e) => main_GetGroupLensRequest.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.getRequests) {
            obj.getRequests = message.getRequests.map((e) => (e ? main_GetGroupLensRequest.toJSON(e) : undefined));
        }
        else {
            obj.getRequests = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseBatchGetGroupLensRequest();
        message.getRequests = ((_a = object.getRequests) === null || _a === void 0 ? void 0 : _a.map((e) => main_GetGroupLensRequest.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseBatchGetGroupLensResponse() {
    return { getResponses: [] };
}
const main_BatchGetGroupLensResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.getResponses) {
            main_GetGroupLensResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBatchGetGroupLensResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.getResponses.push(main_GetGroupLensResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            getResponses: Array.isArray(object === null || object === void 0 ? void 0 : object.getResponses)
                ? object.getResponses.map((e) => main_GetGroupLensResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.getResponses) {
            obj.getResponses = message.getResponses.map((e) => (e ? main_GetGroupLensResponse.toJSON(e) : undefined));
        }
        else {
            obj.getResponses = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseBatchGetGroupLensResponse();
        message.getResponses = ((_a = object.getResponses) === null || _a === void 0 ? void 0 : _a.map((e) => main_GetGroupLensResponse.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseGetPlaceholderConfigRequest() {
    return {};
}
const main_GetPlaceholderConfigRequest = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetPlaceholderConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = main_createBaseGetPlaceholderConfigRequest();
        return message;
    },
};
function main_createBaseGetPlaceholderConfigResponse() {
    return { configs: {} };
}
const main_GetPlaceholderConfigResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        Object.entries(message.configs).forEach(([key, value]) => {
            main_GetPlaceholderConfigResponse_ConfigsEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetPlaceholderConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = main_GetPlaceholderConfigResponse_ConfigsEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.configs[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            configs: main_service_isObject(object.configs)
                ? Object.entries(object.configs).reduce((acc, [key, value]) => {
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        obj.configs = {};
        if (message.configs) {
            Object.entries(message.configs).forEach(([k, v]) => {
                obj.configs[k] = v;
            });
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetPlaceholderConfigResponse();
        message.configs = Object.entries((_a = object.configs) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function main_createBaseGetPlaceholderConfigResponse_ConfigsEntry() {
    return { key: "", value: "" };
}
const main_GetPlaceholderConfigResponse_ConfigsEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: main_service_isSet(object.key) ? String(object.key) : "",
            value: main_service_isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseGetPlaceholderConfigResponse_ConfigsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseGetInitializationConfigRequest() {
    return {};
}
const main_GetInitializationConfigRequest = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetInitializationConfigRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = main_createBaseGetInitializationConfigRequest();
        return message;
    },
};
function main_createBaseGetInitializationConfigResponse() {
    return {
        appVendorUuidOptIn: false,
        watermarkEnabled: false,
        childrenProtectionActRestricted: false,
        legalPrompt: undefined,
    };
}
const main_GetInitializationConfigResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.appVendorUuidOptIn === true) {
            writer.uint32(8).bool(message.appVendorUuidOptIn);
        }
        if (message.watermarkEnabled === true) {
            writer.uint32(16).bool(message.watermarkEnabled);
        }
        if (message.childrenProtectionActRestricted === true) {
            writer.uint32(24).bool(message.childrenProtectionActRestricted);
        }
        if (message.legalPrompt !== undefined) {
            main_LegalPrompt.encode(message.legalPrompt, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetInitializationConfigResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appVendorUuidOptIn = reader.bool();
                    break;
                case 2:
                    message.watermarkEnabled = reader.bool();
                    break;
                case 3:
                    message.childrenProtectionActRestricted = reader.bool();
                    break;
                case 4:
                    message.legalPrompt = main_LegalPrompt.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            appVendorUuidOptIn: main_service_isSet(object.appVendorUuidOptIn) ? Boolean(object.appVendorUuidOptIn) : false,
            watermarkEnabled: main_service_isSet(object.watermarkEnabled) ? Boolean(object.watermarkEnabled) : false,
            childrenProtectionActRestricted: main_service_isSet(object.childrenProtectionActRestricted)
                ? Boolean(object.childrenProtectionActRestricted)
                : false,
            legalPrompt: main_service_isSet(object.legalPrompt) ? main_LegalPrompt.fromJSON(object.legalPrompt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.appVendorUuidOptIn !== undefined && (obj.appVendorUuidOptIn = message.appVendorUuidOptIn);
        message.watermarkEnabled !== undefined && (obj.watermarkEnabled = message.watermarkEnabled);
        message.childrenProtectionActRestricted !== undefined &&
            (obj.childrenProtectionActRestricted = message.childrenProtectionActRestricted);
        message.legalPrompt !== undefined &&
            (obj.legalPrompt = message.legalPrompt ? main_LegalPrompt.toJSON(message.legalPrompt) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseGetInitializationConfigResponse();
        message.appVendorUuidOptIn = (_a = object.appVendorUuidOptIn) !== null && _a !== void 0 ? _a : false;
        message.watermarkEnabled = (_b = object.watermarkEnabled) !== null && _b !== void 0 ? _b : false;
        message.childrenProtectionActRestricted = (_c = object.childrenProtectionActRestricted) !== null && _c !== void 0 ? _c : false;
        message.legalPrompt =
            object.legalPrompt !== undefined && object.legalPrompt !== null
                ? main_LegalPrompt.fromPartial(object.legalPrompt)
                : undefined;
        return message;
    },
};
function main_createBaseSetOperationalMetricsRequest() {
    return { metrics: undefined };
}
const main_SetOperationalMetricsRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.metrics !== undefined) {
            main_OperationalMetricsBundle.encode(message.metrics, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetOperationalMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics = main_OperationalMetricsBundle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: main_service_isSet(object.metrics) ? main_OperationalMetricsBundle.fromJSON(object.metrics) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.metrics !== undefined &&
            (obj.metrics = message.metrics ? main_OperationalMetricsBundle.toJSON(message.metrics) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = main_createBaseSetOperationalMetricsRequest();
        message.metrics =
            object.metrics !== undefined && object.metrics !== null
                ? main_OperationalMetricsBundle.fromPartial(object.metrics)
                : undefined;
        return message;
    },
};
function main_createBaseSetOperationalMetricsResponse() {
    return {};
}
const main_SetOperationalMetricsResponse = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetOperationalMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = main_createBaseSetOperationalMetricsResponse();
        return message;
    },
};
function main_createBaseSetBusinessEventsRequest() {
    return { batchEvents: undefined };
}
const main_SetBusinessEventsRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.batchEvents !== undefined) {
            main_Any.encode(message.batchEvents, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.batchEvents = main_Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            batchEvents: main_service_isSet(object.batchEvents) ? main_Any.fromJSON(object.batchEvents) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.batchEvents !== undefined &&
            (obj.batchEvents = message.batchEvents ? main_Any.toJSON(message.batchEvents) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = main_createBaseSetBusinessEventsRequest();
        message.batchEvents =
            object.batchEvents !== undefined && object.batchEvents !== null ? main_Any.fromPartial(object.batchEvents) : undefined;
        return message;
    },
};
function main_createBaseSetBusinessEventsResponse() {
    return {};
}
const main_SetBusinessEventsResponse = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = main_createBaseSetBusinessEventsResponse();
        return message;
    },
};
function main_createBaseSetExtensionBusinessEventsRequest() {
    return { events: [], extensionEventBase: undefined };
}
const main_SetExtensionBusinessEventsRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.events) {
            main_Any.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.extensionEventBase !== undefined) {
            main_ExtensionEventBase.encode(message.extensionEventBase, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetExtensionBusinessEventsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.events.push(main_Any.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.extensionEventBase = main_ExtensionEventBase.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            events: Array.isArray(object === null || object === void 0 ? void 0 : object.events) ? object.events.map((e) => main_Any.fromJSON(e)) : [],
            extensionEventBase: main_service_isSet(object.extensionEventBase)
                ? main_ExtensionEventBase.fromJSON(object.extensionEventBase)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.events) {
            obj.events = message.events.map((e) => (e ? main_Any.toJSON(e) : undefined));
        }
        else {
            obj.events = [];
        }
        message.extensionEventBase !== undefined &&
            (obj.extensionEventBase = message.extensionEventBase
                ? main_ExtensionEventBase.toJSON(message.extensionEventBase)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseSetExtensionBusinessEventsRequest();
        message.events = ((_a = object.events) === null || _a === void 0 ? void 0 : _a.map((e) => main_Any.fromPartial(e))) || [];
        message.extensionEventBase =
            object.extensionEventBase !== undefined && object.extensionEventBase !== null
                ? main_ExtensionEventBase.fromPartial(object.extensionEventBase)
                : undefined;
        return message;
    },
};
function main_createBaseSetExtensionBusinessEventsResponse() {
    return {};
}
const main_SetExtensionBusinessEventsResponse = {
    encode(_, writer = main_minimal_default().Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSetExtensionBusinessEventsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = main_createBaseSetExtensionBusinessEventsResponse();
        return message;
    },
};
const main_LensesDefinition = {
    name: "Lenses",
    fullName: "com.snap.camerakit.v3.Lenses",
    methods: {
        getGroup: {
            name: "GetGroup",
            requestType: main_GetGroupRequest,
            requestStream: false,
            responseType: main_GetGroupResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        getGroupLens: {
            name: "GetGroupLens",
            requestType: main_GetGroupLensRequest,
            requestStream: false,
            responseType: main_GetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        batchGetGroupLens: {
            name: "BatchGetGroupLens",
            requestType: main_BatchGetGroupLensRequest,
            requestStream: false,
            responseType: main_BatchGetGroupLensResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
        getPlaceholderConfig: {
            name: "GetPlaceholderConfig",
            requestType: main_GetPlaceholderConfigRequest,
            requestStream: false,
            responseType: main_GetPlaceholderConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
    },
};
const main_MetricsDefinition = {
    name: "Metrics",
    fullName: "com.snap.camerakit.v3.Metrics",
    methods: {
        setOperationalMetrics: {
            name: "SetOperationalMetrics",
            requestType: main_SetOperationalMetricsRequest,
            requestStream: false,
            responseType: main_SetOperationalMetricsResponse,
            responseStream: false,
            options: {},
        },
        setBusinessEvents: {
            name: "SetBusinessEvents",
            requestType: main_SetBusinessEventsRequest,
            requestStream: false,
            responseType: main_SetBusinessEventsResponse,
            responseStream: false,
            options: {},
        },
        setExtensionBusinessEvents: {
            name: "SetExtensionBusinessEvents",
            requestType: main_SetExtensionBusinessEventsRequest,
            requestStream: false,
            responseType: main_SetExtensionBusinessEventsResponse,
            responseStream: false,
            options: {},
        },
        getInitializationConfig: {
            name: "GetInitializationConfig",
            requestType: main_GetInitializationConfigRequest,
            requestStream: false,
            responseType: main_GetInitializationConfigResponse,
            responseStream: false,
            options: {
                idempotencyLevel: "NO_SIDE_EFFECTS",
            },
        },
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
function main_service_isObject(value) {
    return typeof value === "object" && value !== null;
}
function main_service_isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=service.js.map
;// ./node_modules/@snap/camera-kit/lib/common/pageVisibility.js

class main_PageVisibility {
    constructor() {
        this.onHiddenHandlers = new Set();
        this.onVisibleHandlers = new Set();
        this.previousVisibilityState = document.visibilityState;
        this.visibilityTransition = false;
        this.onVisibilityChange = this.onVisibilityChange.bind(this);
        this.isDuringVisibilityTransition = this.isDuringVisibilityTransition.bind(this);
        this.onPageHidden = this.onPageHidden.bind(this);
        this.onPageVisible = this.onPageVisible.bind(this);
        this.destroy = this.destroy.bind(this);
        document.addEventListener("visibilitychange", this.onVisibilityChange);
    }
    isDuringVisibilityTransition(test) {
        return test === this.visibilityTransition;
    }
    /**
     * Run a function when the page is hidden. If this occurs due to tab / browser closure,
     * only synchronous functions will run to completion.
     *
     * If the given handler throws an error, it will be silently swallowed.
     *
     * @param handler
     * @returns A function which, when called, removes the function from the set of visibility change handlers.
     */
    onPageHidden(handler) {
        this.onHiddenHandlers.add(handler);
        return () => this.onHiddenHandlers.delete(handler);
    }
    /**
     * Run a function when the page is made visible.
     *
     * If the given handler throws an error, it will be silently swallowed.
     *
     * @param handler
     * @returns A function which, when called, removes the function from the set of visibility change handlers.
     */
    onPageVisible(handler) {
        this.onVisibleHandlers.add(handler);
        return () => this.onVisibleHandlers.delete(handler);
    }
    destroy() {
        document.removeEventListener("visibilitychange", this.onVisibilityChange);
        this.onHiddenHandlers.clear();
        this.onVisibleHandlers.clear();
    }
    onVisibilityChange() {
        const handlers = this.previousVisibilityState === "visible" && document.visibilityState === "hidden"
            ? this.onHiddenHandlers
            : this.previousVisibilityState === "hidden" && document.visibilityState === "visible"
                ? this.onVisibleHandlers
                : new Set();
        this.visibilityTransition = document.visibilityState;
        for (const handler of handlers) {
            try {
                handler();
            }
            catch (error) {
                // We'll do the same thing here that we would do if the handler was added directly as an event
                // listener and dispatch an error event if we can.
                if (typeof window !== "undefined")
                    window.dispatchEvent(new CustomEvent("error", { detail: error }));
            }
        }
        this.previousVisibilityState = this.visibilityTransition;
        this.visibilityTransition = false;
    }
}
const main_pageVisibilityFactory = main_Injectable("pageVisibility", () => new main_PageVisibility());
//# sourceMappingURL=pageVisibility.js.map
;// ./node_modules/@snap/camera-kit/lib/handlers/rateLimitingHandler.js


const main_delay = (duration) => new Promise((resolve) => setTimeout(resolve, duration));
/**
 * Limit the rate at which requests are passed to the next handler in the chain.
 *
 * During any page transitions to "hidden" – possibly indicating the page is about to terminate – requests will not be
 * rate limited, to ensure that they are not lost.
 *
 * TODO: If there are requests in the queue waiting to be sent when the page transitions to "hidden," these will not
 * be immediately sent. This means there still is an edge case in which a request may be lost on page termination. This
 * can be fixed with changes to `createMappingHandler`.
 *
 * **NOTE:** Under the hood, requests that come in faster than the set `duration` are placed in an unbounded buffer.
 * If many requests are made quickly and `duration` is long, this could result in high memory usage. Keep this in mind
 * when using this handler.
 *
 * @param duration In milliseconds. Requests will be passed to the next handler in the chain no faster than this. That
 * is, if `duration` is `1000`, the next handler will be called at most once per second.
 * @param pageVisibility Determines whether to flush buffered requests when the page becomes hidden.
 * `false` value indicates that page visibility handling is avoided, while
 * a {@link PageVisibility} instance is used to subscribe to page visibility change events.
 * @returns {@link ChainableHandler}, suitable for use in {@link HandlerChainBuilder.map}
 */
const main_createRateLimitingHandler = (duration, pageVisibility) => {
    let mostRecentSendTime = undefined;
    const mappingHandler = main_createMappingHandler((request) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (mostRecentSendTime !== undefined) {
            const millisUntilNextSend = duration - (Date.now() - mostRecentSendTime);
            if (millisUntilNextSend > 0)
                yield main_delay(millisUntilNextSend);
        }
        mostRecentSendTime = Date.now();
        return request;
    }), pageVisibility, 1);
    return (next) => (request, metadata) => {
        // Requests may be made while the page is transitioning to hidden – for example, the page is being unloaded and
        // we're reporting final metrics. In this case, we need to skip rate limiting and synchronously call `next`
        // so that the request is not lost.
        if (pageVisibility && pageVisibility.isDuringVisibilityTransition("hidden"))
            return next(request, metadata);
        return mappingHandler(next)(request, metadata);
    };
};
//# sourceMappingURL=rateLimitingHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/metricsHandler.js





const main_METRIC_REQUEST_RATE_LIMIT_MS = 1000; // send at most one metric request per second.
/**
 * @internal
 */
const main_metricsHandlerFactory = main_Injectable("metricsHandler", [main_cameraKitServiceFetchHandlerFactory.token, main_pageVisibilityFactory.token], (fetchHandler, pageVisibility) => {
    return new main_HandlerChainBuilder(fetchHandler).map(main_createRateLimitingHandler(main_METRIC_REQUEST_RATE_LIMIT_MS, pageVisibility)).handler;
});
//# sourceMappingURL=metricsHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/operational/operationalMetricsReporter.js









// CameraKit's prod metrics endpoint.
// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/c390b9c/proto/camera_kit/v3/service.proto#L126
const main_DIMENSION_DELIMITER = ".";
// These values are (currently) arbitrarily selected.
// TODO: Once we have gathered a sufficient quantity of metrics data, we should tune these numbers to ensure we're
// operating with the right cost vs. alarming SLA vs. IDB storage size tradeoffs.
const main_METRIC_BATCH_MAX_SIZE = 100;
const main_METRIC_BATCH_MAX_AGE_MS = 5000;
/**
 * Use this class to report operational metrics – these are metrics that describe aspects of the SDK's performance,
 * which may be used to assess and investigate operational issues.
 */
/** @internal */
class main_OperationalMetricsReporter {
    constructor(metricsHandler) {
        this.metricsHandler = metricsHandler;
    }
    /**
     * Record a count.
     *
     * @param name
     * @param count
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    count(name, count, dimensions) {
        return this.record(name, { $case: "count", count }, dimensions);
    }
    /**
     * Record a duration in milliseconds.
     *
     * @param name
     * @param latencyMillis
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    timer(name, latencyMillis, dimensions) {
        return this.record(name, { $case: "latencyMillis", latencyMillis }, dimensions);
    }
    /**
     * Record a histogram.
     *
     * @param name
     * @param histogram
     * @param dimensions An optional Map containing dimensions which describe the metric.
     * For example: `new Map([['status', '200']])`
     * @returns Promise which resolves when the metric has been handled.
     */
    histogram(name, histogram, dimensions) {
        return this.record(name, { $case: "histogram", histogram }, dimensions);
    }
    /**
     * TODO: This entire class in no longer necessary, since the new Timer/Count/Histogram classes offer a cleaner API
     * for recording metrics. Once we migrate all operational metrics to use those new APIs, this class can be removed
     * and call sites will just call the metrics handler directly.
     *
     * @param metric Any concrete Metric (e.g. Count, Timer, Histogram)
     * @returns
     */
    report(metric) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield Promise.all(metric.toOperationalMetric().map((metric) => this.metricsHandler(metric)));
        });
    }
    record(name, metric, dimensions) {
        // The naming convention (metricName.dimensionName.dimensionValue.dimensionName.dimensionValue...) is mentioned
        // the Graphene docs here https://wiki.sc-corp.net/display/METRICS/Graphene
        // TODO: find explicit documentation of the API, if it exists.
        const serializedDimensions = dimensions
            ? `.${Array.from(dimensions.entries())
                .map((d) => d.join(main_DIMENSION_DELIMITER))
                .join(main_DIMENSION_DELIMITER)}`
            : "";
        return this.metricsHandler({
            name: `${name}${serializedDimensions}`,
            timestamp: new Date(),
            metric,
        });
    }
}
/**
 * @internal
 */
const main_operationalMetricReporterFactory = main_Injectable("operationalMetricsReporter", [main_metricsHandlerFactory.token, main_pageVisibilityFactory.token, main_configurationToken], (metricsHandler, pageVisibility, configuration) => {
    const handler = new main_HandlerChainBuilder(metricsHandler)
        .map(main_createMappingHandler((metrics) => {
        const request = { metrics };
        return new Request(
        // eslint-disable-next-line max-len
        `https://${configuration.apiHostname}/com.snap.camerakit.v3.Metrics/metrics/operational_metrics`, {
            method: "POST",
            body: JSON.stringify(main_SetOperationalMetricsRequest.toJSON(request)),
            credentials: "include",
            // When this is true it makes fetch behave like `Navigator.sendBeacon` – that is, the
            // request will still be made even if the page terminates.
            // https://developer.mozilla.org/en-US/docs/Web/API/fetch
            keepalive: pageVisibility.isDuringVisibilityTransition("hidden"),
        });
    }, pageVisibility))
        .map(main_createBatchingHandler({
        // The batching logic here is very simple – it could be improved by e.g.
        // computing statistics to reduce overall data sent, etc. Right now this is
        // premature optimization, but could become a good idea in the future.
        batchReduce: (previousBundle, metric) => {
            var _a, _b;
            let metrics = [...((_a = previousBundle === null || previousBundle === void 0 ? void 0 : previousBundle.metrics) !== null && _a !== void 0 ? _a : [])];
            // For "count" metrics, it's straightforward to merge them into
            // a single metric with the same name.
            const existingCountIndex = ((_b = metric.metric) === null || _b === void 0 ? void 0 : _b.$case) === "count"
                ? metrics.findIndex((m) => { var _a; return metric.name === m.name && ((_a = m.metric) === null || _a === void 0 ? void 0 : _a.$case) === "count"; })
                : -1;
            if (existingCountIndex >= 0) {
                // Safety: Given the condition above, we can be sure that both the existing and new metrics
                // are of the "count" type.
                const existingValue = metrics[existingCountIndex].metric;
                const newValue = metric.metric;
                metrics.splice(existingCountIndex, 1, Object.assign(Object.assign({}, metric), { metric: {
                        $case: "count",
                        count: existingValue.count + newValue.count,
                    } }));
            }
            else {
                metrics.push(metric);
            }
            return { metrics };
        },
        isBatchComplete: (bundle) => bundle.metrics.length >= main_METRIC_BATCH_MAX_SIZE,
        maxBatchAge: main_METRIC_BATCH_MAX_AGE_MS,
        pageVisibility,
    })).handler;
    return new main_OperationalMetricsReporter(handler);
});
//# sourceMappingURL=operationalMetricsReporter.js.map
;// ./node_modules/@snap/camera-kit/lib/persistence/ExpiringPersistence.js


const main_ExpiringPersistence_logger = main_getLogger("ExpiringPersistence");
/**
 * Create a Persistence that will remove entries after they expire.
 *
 * An expiration function must be provided, which is called each time a value is stored. It must return the expiration
 * time for that value, given in seconds from now. For example, to expire a value 24 hours after it is stored, the
 * expiration function should return 86400 (the number of seconds in 24 hours).
 */
class main_ExpiringPersistence {
    constructor(expiration, persistence) {
        this.expiration = expiration;
        this.persistence = persistence;
        this.removeExpired().catch((error) => {
            main_ExpiringPersistence_logger.warn("Failed to cleanup expired entries on startup.", error);
        });
    }
    get size() {
        return this.persistence.size;
    }
    retrieve(key) {
        var _a;
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const [expiry, value] = (_a = (yield this.persistence.retrieve(key))) !== null && _a !== void 0 ? _a : [];
            if (value === undefined || expiry === undefined)
                return undefined;
            if (Date.now() > expiry) {
                yield this.persistence.remove(key).catch((error) => {
                    main_ExpiringPersistence_logger.warn(`Key ${key} is expired, but removing it from persistence failed.`, error);
                });
                return undefined;
            }
            return value;
        });
    }
    retrieveAll() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            return (yield this.persistence.retrieveAll()).filter(([, [expiry]]) => expiry >= now).map(([, v]) => v);
        });
    }
    remove(key) {
        return this.persistence.remove(key);
    }
    removeAll() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const results = yield this.persistence.removeAll();
            return results.map(([, v]) => v);
        });
    }
    removeExpired() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            for (const [key, [expiry]] of yield this.persistence.retrieveAll()) {
                if (Date.now() >= expiry) {
                    yield this.persistence
                        .remove(key)
                        .catch((error) => main_ExpiringPersistence_logger.warn(`Failed to remove expired key ${key}.`, error));
                }
            }
        });
    }
    store(keyOrValue, maybeValue) {
        const [key, value] = maybeValue === undefined ? [undefined, keyOrValue] : [keyOrValue, maybeValue];
        const expiry = Date.now() + this.expiration(value) * 1000;
        return key === undefined
            ? this.persistence.store([expiry, value])
            : this.persistence.store(key, [expiry, value]);
    }
}
//# sourceMappingURL=ExpiringPersistence.js.map
;// ./node_modules/@snap/camera-kit/lib/remote-configuration/cofHandler.js

/* eslint-disable max-len */

















const main_COF_REQUEST_TYPE = "cof";
const main_cofHandler_logger = main_getLogger("cofHandler");
/**
 * Handler chain used to make COF requests. Uses the COF client to perform the
 * requests, with retries, timeout, and caching.
 *
 * The handler will first attempt to retrieve the COF response from cache. If it is found, the result is returned
 * immediately and the cache is updated in the background. If no response is found, a COF request is made. This request
 * will retry (with exponential backoff + jitter) for 5 seconds before returning an error to the caller.
 */
const main_cofHandlerFactory = main_Injectable("cofHandler", [main_configurationToken, main_requestStateEventTargetFactory.token, main_operationalMetricReporterFactory.token], (config, requestStateEventTarget, reporter) => {
    const cofCache = new main_ExpiringPersistence(() => main_convertDaysToSeconds(365), new main_IndexedDBPersistence({ databaseName: "COFCache" }));
    const getCacheKey = (r) => JSON.stringify(r);
    // We need to wrap `targetingQuery` to create a usable Handler – the main issue is that HandlerChainBuilder
    // always adds a `signal` property to the metadata argument (second argument of the Handler), but
    // `targetingQuery` expects the second argument to only contain headers.
    return (new main_HandlerChainBuilder((request, _a) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var { signal, isSideEffect: _ } = _a, metadata = main_rest(_a, ["signal", "isSideEffect"]);
        const rpc = new main_GrpcWebImpl(`https://${config.apiHostname}`, {});
        const client = new main_CircumstancesServiceClientImpl(rpc);
        return new Promise((resolve, reject) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            var _b;
            if (signal) {
                signal.addEventListener("abort", () => reject(new Error("COF request aborted by handler chain.")));
            }
            const cachedResponse = yield cofCache.retrieve(getCacheKey(request)).catch((e) => {
                main_cofHandler_logger.warn("Unable to get COF response from cache.", e);
                return {
                    configResultsEtag: undefined,
                    configResults: [],
                };
            });
            const dimensions = {
                requestType: main_COF_REQUEST_TYPE,
                delta: `${!!(cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag)}`,
            };
            const { requestId } = main_dispatchRequestStarted(requestStateEventTarget, { dimensions });
            try {
                const response = yield client.targetingQuery(Object.assign(Object.assign({}, request), { configResultsEtag: cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag, deltaSync: !!(cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResultsEtag) }), new main_browser_headers_umd.BrowserHeaders(Object.assign({ authorization: `Bearer ${config.apiToken}`, "x-snap-client-user-agent": main_getCameraKitUserAgent() }, metadata)));
                // NOTE: in order for cache persistance to work, we need to make the
                // object cloneable i.e. with no methods (it appears targetingQuery()
                // attaches toObject() to response object). Safety: We have to cast response
                // object to a type that has toObject defined, because that is indeed
                // what generated code has:
                // eslint-disable-next-line max-len
                // https://github.sc-corp.net/Snapchat/camera-kit-web-sdk/blob/8d6b4e8bfa3717b376ab197a49972a1e410851f7/packages/web-sdk/src/generated-proto/pb_schema/cdp/cof/circumstance_service.ts#L1459
                delete response.toObject;
                // Merge the cached configs into the just-returned configs, making sure to remove any configs that are marked as deleted -- this will then get cached by
                // the responseCachingHandler as we return up the handler chain.
                const configResults = main_unionBy("configId", (_b = cachedResponse === null || cachedResponse === void 0 ? void 0 : cachedResponse.configResults) !== null && _b !== void 0 ? _b : [], response.configResults).filter((config) => !config.delete);
                // TODO: We hardcode status code and sizeByte values because we do not have access to
                // underlying transport of configs-web.
                // When this ticket is done https://jira.sc-corp.net/browse/CAMKIT-2840,
                // we will remove this handler and benefit from existing ones.
                const status = 200;
                let sizeByte = 0;
                try {
                    sizeByte = new TextEncoder().encode(JSON.stringify(response)).byteLength;
                }
                finally {
                    main_dispatchRequestCompleted(requestStateEventTarget, {
                        requestId,
                        dimensions,
                        status,
                        sizeByte,
                    });
                }
                resolve(Object.assign(Object.assign({}, response), { configResults }));
            }
            catch (error) {
                main_dispatchRequestErrored(requestStateEventTarget, {
                    requestId,
                    dimensions,
                    error: main_errorHelpers_ensureError(error),
                });
                reject(error);
            }
        }));
    }))
        // targetingQuery() always converts failed responses into errors (unlike fetch()), so we need a custom
        // retryPredicate that retries all errors. We'll keep retrying (with backoff) for 20 seconds total
        // elapsed time before we return an error back up the chain.
        .map(main_createRetryingHandler({ retryPredicate: (r) => r instanceof Error }))
        // API gateway has 15 seconds timeout, so we rely on that first
        .map(main_createTimeoutHandler({ timeout: 20 * 1000 }))
        .map(main_createResponseCachingHandler(cofCache, getCacheKey, 
    // If we have a matching response already in cache,
    // we'll return it immediately and then update the cache in the background.
    main_staleWhileRevalidateStrategy({
        requestType: "cof",
        reporter,
    }))).handler);
});
//# sourceMappingURL=cofHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/remote-configuration/remoteConfiguration.js






const main_defaultTargetingRequest = {
    namespaces: [main_Namespace.LENS_CORE, main_Namespace.CAMERA_KIT_CORE, main_Namespace.LENS_CORE_CONFIG],
};
const main_initializeConfigRelativePath = "/com.snap.camerakit.v3.Metrics/metrics/initialization_config";
class main_RemoteConfiguration {
    constructor(lensPerformance, apiHostname, cofHandler, fetchHandler) {
        const lensCluster = Promise.resolve(lensPerformance).then((lensPerformance) => {
            // `0` means no cluster could be determined. For COF, we'll omit a value in that case.
            return (lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster) === 0 ? undefined : lensPerformance === null || lensPerformance === void 0 ? void 0 : lensPerformance.cluster;
        });
        this.configById = main_from_from(lensCluster).pipe(
        // Note: we don't catch errors here, purposefully letting them propagate to subscribers outside this class.
        // Subscribers, having more context about the config use-case, will know better how to handle an error than
        // we do here (e.g. their logging / reporting will have more context, and they can use the error they get
        // from this Observable as a cause).
        main_mergeMap((lensClusterOrig4) => main_from_from(cofHandler(Object.assign(Object.assign({}, main_defaultTargetingRequest), { lensClusterOrig4 })))), main_map((result) => {
            const configById = new Map();
            result.configResults.forEach((config) => {
                var _a;
                const configsWithId = (_a = configById.get(config.configId)) !== null && _a !== void 0 ? _a : [];
                configsWithId.push(config);
                configById.set(config.configId, configsWithId);
            });
            return configById;
        }), main_shareReplay(1));
        this.initializationConfig = new main_Observable_Observable((observer) => {
            fetchHandler(`https://${apiHostname}${main_initializeConfigRelativePath}`)
                .then((response) => response.json())
                .then((data) => {
                observer.next(data);
                observer.complete();
            })
                .catch((err) => observer.error(err));
        }).pipe(main_shareReplay(1));
    }
    /**
     * COF configuration.
     */
    get(configId) {
        return this.configById.pipe(main_map((config) => { var _a; return (_a = config.get(configId)) !== null && _a !== void 0 ? _a : []; }));
    }
    /**
     * Configuration that is provided by Camera Kit backend.
     */
    getInitializationConfig() {
        return this.initializationConfig;
    }
    getNamespace(namespace) {
        return this.configById.pipe(main_map((configs) => {
            const namespaceConfigs = Array.from(configs.values())
                .filter((values) => values.some((c) => c.namespace === namespace))
                .flatMap((results) => results);
            return namespaceConfigs;
        }));
    }
}
const main_remoteConfigurationFactory = main_Injectable("remoteConfiguration", [main_configurationToken, main_cofHandlerFactory.token, main_cameraKitServiceFetchHandlerFactory.token], (config, cofHandler, fetchHandler) => {
    const remoteConfig = new main_RemoteConfiguration(config.lensPerformance, config.apiHostname, cofHandler, fetchHandler);
    // We'll kick off remote configuration loading by subscribing (and then unsubscribing) to a dummy config value.
    // Subsequent requests for config will use the shared Observable, benefitting from this eager loading.
    remoteConfig.get("").pipe(main_take(1)).subscribe();
    return remoteConfig;
});
//# sourceMappingURL=remoteConfiguration.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/assets/deviceDependentAssetLoader.js








const main_hasStringValue = (value) => {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.stringValue);
};
const main_isAssetConfig = (value) => {
    return main_typeguards_isRecord(value) && main_typeguards_isString(value.url) && (value.checksum === undefined || main_typeguards_isString(value.checksum));
};
/**
 * @internal
 */
const main_deviceDependentAssetLoaderFactory = main_Injectable("deviceDependentAssetLoader", [main_defaultFetchHandlerFactory.token, main_remoteConfigurationFactory.token], (fetchHandler, remoteConfiguration) => {
    const assetHandler = new main_HandlerChainBuilder(fetchHandler).map(main_createArrayBufferParsingHandler()).handler;
    return function deviceDependentAssetLoader({ assetId }) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const loadingFailed = (reason, cause) => new Error(`Cannot load device-dependent asset ${assetId}. ${reason}`, { cause });
            return main_firstValueFrom(remoteConfiguration.get(assetId).pipe(main_catchError((error) => {
                throw loadingFailed("COF config failed to load.", error);
            }), main_map((configs) => {
                if (configs.length === 0) {
                    throw loadingFailed(`No COF config found corresponding to that assetId.`);
                }
                // All of the deviceDependent asset configs will only have one value, so we can safely use the
                // first (i.e. only) element in the configs list.
                const [{ value }] = configs;
                // Asset configurations are all JSON-encoded in the `stringValue` property. If it doesn't
                // exists, we can't fetch the asset.
                if (!main_hasStringValue(value))
                    throw loadingFailed("COF config malformed (missing stringValue)");
                let assetConfig;
                try {
                    assetConfig = JSON.parse(value.stringValue);
                }
                catch (parseError) {
                    throw loadingFailed("COF config malformed (JSON parse error)", parseError);
                }
                // Asset configurations have a `url` and `checksum` property. Otherwise we're dealing with some
                // other kind of configuration, and cannot fetch the asset.
                if (!main_isAssetConfig(assetConfig))
                    throw loadingFailed("COF config malformed (missing URL)");
                return assetConfig;
            }), main_mergeMap(({ url, checksum }) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
                const [data, response] = yield assetHandler(url, { cache: "force-cache" });
                if (!response.ok)
                    throw response;
                return { data, checksum };
            }))));
        });
    };
});
//# sourceMappingURL=deviceDependentAssetLoader.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/assets/remoteMediaAssetLoaderFactory.js





/**
 * @internal
 */
const main_remoteMediaAssetLoaderFactory = main_Injectable("remoteMediaAssetLoader", [main_defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new main_HandlerChainBuilder(fetchHandler).map(main_createArrayBufferParsingHandler()).handler;
    return function remoteMediaAssetLoader(asset) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            // as a default option assuming that RemoteMedia asset type contains asset url in assetId
            // this behaviour could be changed by providing own implementation for RemoteMedia asset loader
            //   const cameraKit = bootstrapCameraKit(config, container => {
            //     return container.provides(Injectable(
            //       remoteMediaAssetLoaderFactory.token, ...
            // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
            const [buffer, response] = yield handler(asset.assetId, { cache: "force-cache" });
            if (!response.ok)
                throw response;
            return buffer;
        });
    };
});
//# sourceMappingURL=remoteMediaAssetLoaderFactory.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/assets/staticAssetLoader.js





/**
 * @internal
 */
const main_staticAssetLoaderFactory = main_Injectable("staticAssetLoader", [main_defaultFetchHandlerFactory.token], (fetchHandler) => {
    const handler = new main_HandlerChainBuilder(fetchHandler).map(main_createArrayBufferParsingHandler()).handler;
    return (asset, _lens, assetManifest) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const assetUrl = (_a = assetManifest === null || assetManifest === void 0 ? void 0 : assetManifest.find((manifest) => manifest.id === asset.assetId)) === null || _a === void 0 ? void 0 : _a.assetUrl;
        if (!assetUrl) {
            throw new Error(`Cannot load lens asset ${asset.assetId}. Static asset URL could not be found.`);
        }
        // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
        const [buffer, response] = yield handler(assetUrl, { cache: "force-cache" });
        if (!response.ok)
            throw response;
        return buffer;
    });
});
//# sourceMappingURL=staticAssetLoader.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/assets/LensAssetRepository.js












const main_LensAssetRepository_logger = main_getLogger("LensAssetRepository");
/**
 * Computes cache key for asset ID and loader type pair.
 * @param asset Asset ID and loader type pair.
 * @returns Cache key.
 */
function main_getCacheKey(asset) {
    return `${asset.assetId}_${asset.assetType.value}`;
}
function main_mapManfiestItemToAssetType(lensCore, type) {
    switch (type) {
        case main_LensAssetManifestItem_Type.ASSET:
            return lensCore.AssetType.Static;
        case main_LensAssetManifestItem_Type.DEVICE_DEPENDENT_ASSET_UNSET:
        case main_LensAssetManifestItem_Type.UNRECOGNIZED:
            return lensCore.AssetType.DeviceDependent;
        default:
            return main_assertUnreachable(type);
    }
}
/**
 * Registers a remote asset provider function with a given instance of LensCore, and uses a provided mapping of asset
 * types to loading functions to acquire remote asset data and pass it to LensCore.
 *
 * *Note:* LensCoreModule.initialize must be called on the desired LensCoreModule instance **prior** to passing it
 * to the LensAssetProvider constructor. If this class is instantiated with a LensCoreModule that has not been
 * initialized, the registry of the asset provider function will fail silently and no remote assets will be loaded.
 */
class main_LensAssetRepository {
    constructor(lensCore, assetLoaders, metrics, requestStateEventTarget) {
        this.lensCore = lensCore;
        this.assetLoaders = assetLoaders;
        this.metrics = metrics;
        this.requestStateEventTarget = requestStateEventTarget;
        this.cachedAssetKeys = new Set();
    }
    /**
     * Caches lens assets defined in asset manifest.
     *
     * @param assetManifest Lens asset manifest.
     * @param lens Lens to cache assets of.
     * @param assetTimings Optionally specifies what assets to cache. By default, on-demand assets are not cached.
     * @returns Promise rejects if any required assets could not be loaded – if this occurs, it's very likely the Lens
     * with this manifest will not function.
     */
    cacheAssets(assetManifest, lens, assetTimings = [main_LensAssetManifestItem_RequestTiming.REQUIRED]) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const assetTimingsToPreload = new Set([
                // That is a bad naming, but PRELOAD_UNSET actually means
                // that an asset has to be preloaded
                main_LensAssetManifestItem_RequestTiming.PRELOAD_UNSET,
                ...assetTimings,
            ]);
            const assetDescriptors = assetManifest
                .filter((asset) => {
                return assetTimingsToPreload.has(asset.requestTiming);
            })
                .map(({ id, type }) => ({
                assetId: id,
                assetType: main_mapManfiestItemToAssetType(this.lensCore, type),
            }));
            if (assetDescriptors.length) {
                // When preloading, we *do* want load failures to reject Promise.all (assets listed in the manifest
                // are known to be hard requirements of the lens).
                return this.cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest);
            }
        });
    }
    /**
     * Calls the correct asset loader to fetch the asset's data,
     * depending on the requested asset's type and provides that to LensCore.
     */
    loadAsset(assetDescriptor, lens, assetManifest) {
        var _a, _b;
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { assetId, assetType } = assetDescriptor;
            const [assetTypeName, assetLoader] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
            const safeAssetTypeName = assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : "unknown";
            const dimensions = {
                requestType: "asset",
                assetId: assetId,
                assetType: safeAssetTypeName,
                lensId: (_b = lens === null || lens === void 0 ? void 0 : lens.id) !== null && _b !== void 0 ? _b : "unknown",
            };
            const { requestId } = main_dispatchRequestStarted(this.requestStateEventTarget, { dimensions });
            try {
                if (!assetLoader) {
                    throw new Error(`Cannot get asset ${assetId}. Asset type ${safeAssetTypeName} is not supported.`);
                }
                const assetResponse = yield assetLoader(assetDescriptor, lens, assetManifest);
                const assetBuffer = "data" in assetResponse ? assetResponse.data : assetResponse;
                const assetChecksum = "checksum" in assetResponse ? assetResponse.checksum : undefined;
                if (assetBuffer.byteLength === 0) {
                    throw new Error(`Got empty response for asset ${assetId} from ${safeAssetTypeName} loader.`);
                }
                main_dispatchRequestCompleted(this.requestStateEventTarget, {
                    requestId,
                    dimensions,
                    status: 200,
                    sizeByte: assetBuffer.byteLength,
                });
                this.lensCore.provideRemoteAssetsResponse({
                    assetId,
                    assetBuffer,
                    assetType,
                    assetChecksum,
                    onFailure: (lensCoreError) => {
                        if (/validation failed/.test(lensCoreError.message)) {
                            this.metrics.dispatchEvent(new main_TypedCustomEvent("assetValidationFailed", {
                                name: "assetValidationFailed",
                                assetId,
                            }));
                        }
                        main_LensAssetRepository_logger.warn(`Failed to provide lens asset ${assetId}.`, lensCoreError);
                    },
                });
            }
            catch (error) {
                const wrappedError = new Error(`Failed to load lens asset ${assetId}.`, { cause: error });
                main_dispatchRequestErrored(this.requestStateEventTarget, { requestId, dimensions, error: wrappedError });
                throw wrappedError;
            }
        });
    }
    /**
     * Downloads and caches assets if applicable. Does nothing for assets that are already in cache.
     * @param assetDescriptors Asset ID and type pairs.
     * @param lens Lens to load assets for.
     * @param assetManifest Lens asset manifest.
     */
    cacheAssetsByDescriptor(assetDescriptors, lens, assetManifest) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield Promise.all(assetDescriptors
                .filter((assetDescriptors) => !this.cachedAssetKeys.has(main_getCacheKey(assetDescriptors)))
                .map((assetDescriptor) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    // NOTE: we allow concurrent cache request to download the same asset more than once,
                    // because that is better than skipping second request when the firs one fails.
                    // In future we could improve concurretn logic with observables as part of
                    // https://jira.sc-corp.net/browse/CAMKIT-3931
                    yield this.loadAsset(assetDescriptor, lens, assetManifest);
                    this.cachedAssetKeys.add(main_getCacheKey(assetDescriptor));
                }
                catch (error) {
                    const { assetId, assetType } = assetDescriptor;
                    const [assetTypeName] = (_a = this.assetLoaders.get(assetType)) !== null && _a !== void 0 ? _a : [];
                    main_LensAssetRepository_logger.warn(`Failed to cache asset ${assetId} of type ${assetTypeName !== null && assetTypeName !== void 0 ? assetTypeName : assetType.value}.`, error);
                }
            })));
        });
    }
}
/**
 * @internal
 */
const main_lensAssetRepositoryFactory = main_Injectable("lensAssetRepository", [
    main_lensCoreFactory.token,
    main_deviceDependentAssetLoaderFactory.token,
    main_remoteMediaAssetLoaderFactory.token,
    main_staticAssetLoaderFactory.token,
    main_metricsEventTargetFactory.token,
    main_requestStateEventTargetFactory.token,
], (lensCore, deviceDependentAssetLoader, remoteMediaAssetLoader, staticAssetLoader, metrics, requestStateEventTarget) => new main_LensAssetRepository(lensCore, new Map([
    [lensCore.AssetType.DeviceDependent, ["DeviceDependent", deviceDependentAssetLoader]],
    [lensCore.AssetType.RemoteMediaByUrl, ["RemoteMediaByUrl", remoteMediaAssetLoader]],
    // URL type is deprecated and was introduced before RemoteMediaByURL
    // however, there are some lenses still using it so we need to support it
    [lensCore.AssetType.URL, ["URL", remoteMediaAssetLoader]],
    [lensCore.AssetType.Static, ["Static", staticAssetLoader]],
]), metrics, requestStateEventTarget));
//# sourceMappingURL=LensAssetRepository.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/export.js



const main_export_protobufPackage = "com.snap.camerakit.v3";
var main_ExportLensesByIdRequest_Context_Extension_Name;
(function (ExportLensesByIdRequest_Context_Extension_Name) {
    ExportLensesByIdRequest_Context_Extension_Name["UNSET"] = "UNSET";
    ExportLensesByIdRequest_Context_Extension_Name["SHOP_KIT"] = "SHOP_KIT";
    ExportLensesByIdRequest_Context_Extension_Name["LENS_WEB_BUILDER"] = "LENS_WEB_BUILDER";
    ExportLensesByIdRequest_Context_Extension_Name["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_ExportLensesByIdRequest_Context_Extension_Name || (main_ExportLensesByIdRequest_Context_Extension_Name = {}));
function main_exportLensesByIdRequest_Context_Extension_NameFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return main_ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        case 1:
        case "SHOP_KIT":
            return main_ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT;
        case 2:
        case "LENS_WEB_BUILDER":
            return main_ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_ExportLensesByIdRequest_Context_Extension_Name.UNRECOGNIZED;
    }
}
function main_exportLensesByIdRequest_Context_Extension_NameToNumber(object) {
    switch (object) {
        case main_ExportLensesByIdRequest_Context_Extension_Name.UNSET:
            return 0;
        case main_ExportLensesByIdRequest_Context_Extension_Name.SHOP_KIT:
            return 1;
        case main_ExportLensesByIdRequest_Context_Extension_Name.LENS_WEB_BUILDER:
            return 2;
        default:
            return 0;
    }
}
var main_ExportLensesByIdResponse_ExcludedLens_Code;
(function (ExportLensesByIdResponse_ExcludedLens_Code) {
    ExportLensesByIdResponse_ExcludedLens_Code["UNSET"] = "UNSET";
    ExportLensesByIdResponse_ExcludedLens_Code["UNKNOWN"] = "UNKNOWN";
    ExportLensesByIdResponse_ExcludedLens_Code["NOT_FOUND"] = "NOT_FOUND";
    ExportLensesByIdResponse_ExcludedLens_Code["INCOMPATIBLE_LENS_CORE_VERSION"] = "INCOMPATIBLE_LENS_CORE_VERSION";
    ExportLensesByIdResponse_ExcludedLens_Code["ARCHIVED_OR_INVISIBLE"] = "ARCHIVED_OR_INVISIBLE";
    ExportLensesByIdResponse_ExcludedLens_Code["CONTAINS_MUSIC"] = "CONTAINS_MUSIC";
    ExportLensesByIdResponse_ExcludedLens_Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_ExportLensesByIdResponse_ExcludedLens_Code || (main_ExportLensesByIdResponse_ExcludedLens_Code = {}));
function main_exportLensesByIdResponse_ExcludedLens_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSET":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        case 1:
        case "UNKNOWN":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN;
        case 2:
        case "NOT_FOUND":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND;
        case 3:
        case "INCOMPATIBLE_LENS_CORE_VERSION":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION;
        case 4:
        case "ARCHIVED_OR_INVISIBLE":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE;
        case 5:
        case "CONTAINS_MUSIC":
            return main_ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_ExportLensesByIdResponse_ExcludedLens_Code.UNRECOGNIZED;
    }
}
function main_exportLensesByIdResponse_ExcludedLens_CodeToNumber(object) {
    switch (object) {
        case main_ExportLensesByIdResponse_ExcludedLens_Code.UNSET:
            return 0;
        case main_ExportLensesByIdResponse_ExcludedLens_Code.UNKNOWN:
            return 1;
        case main_ExportLensesByIdResponse_ExcludedLens_Code.NOT_FOUND:
            return 2;
        case main_ExportLensesByIdResponse_ExcludedLens_Code.INCOMPATIBLE_LENS_CORE_VERSION:
            return 3;
        case main_ExportLensesByIdResponse_ExcludedLens_Code.ARCHIVED_OR_INVISIBLE:
            return 4;
        case main_ExportLensesByIdResponse_ExcludedLens_Code.CONTAINS_MUSIC:
            return 5;
        default:
            return 0;
    }
}
function main_createBaseExportLensesByIdRequest() {
    return { unlockableIds: [], context: undefined };
}
const main_ExportLensesByIdRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.unlockableIds) {
            writer.int64(v);
        }
        writer.ldelim();
        if (message.context !== undefined) {
            main_ExportLensesByIdRequest_Context.encode(message.context, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.unlockableIds.push(main_export_longToNumber(reader.int64()));
                        }
                    }
                    else {
                        message.unlockableIds.push(main_export_longToNumber(reader.int64()));
                    }
                    break;
                case 2:
                    message.context = main_ExportLensesByIdRequest_Context.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseExportLensesByIdRequest();
        message.unlockableIds = ((_a = object.unlockableIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.context =
            object.context !== undefined && object.context !== null
                ? main_ExportLensesByIdRequest_Context.fromPartial(object.context)
                : undefined;
        return message;
    },
};
function main_createBaseExportLensesByIdRequest_Context() {
    return {
        userAgent: "",
        locale: "",
        extention: undefined,
        extension: undefined,
        extensionRequestContext: new Uint8Array(),
    };
}
const main_ExportLensesByIdRequest_Context = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        if (message.extention !== undefined) {
            main_ExportLensesByIdRequest_Context_Extension.encode(message.extention, writer.uint32(26).fork()).ldelim();
        }
        if (message.extension !== undefined) {
            main_ExportLensesByIdRequest_Context_Extension.encode(message.extension, writer.uint32(34).fork()).ldelim();
        }
        if (message.extensionRequestContext.length !== 0) {
            writer.uint32(42).bytes(message.extensionRequestContext);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdRequest_Context();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                case 3:
                    message.extention = main_ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.extension = main_ExportLensesByIdRequest_Context_Extension.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.extensionRequestContext = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseExportLensesByIdRequest_Context();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.extention =
            object.extention !== undefined && object.extention !== null
                ? main_ExportLensesByIdRequest_Context_Extension.fromPartial(object.extention)
                : undefined;
        message.extension =
            object.extension !== undefined && object.extension !== null
                ? main_ExportLensesByIdRequest_Context_Extension.fromPartial(object.extension)
                : undefined;
        message.extensionRequestContext = (_c = object.extensionRequestContext) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function main_createBaseExportLensesByIdRequest_Context_Extension() {
    return { name: main_ExportLensesByIdRequest_Context_Extension_Name.UNSET, version: "" };
}
const main_ExportLensesByIdRequest_Context_Extension = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.name !== main_ExportLensesByIdRequest_Context_Extension_Name.UNSET) {
            writer.uint32(8).int32(main_exportLensesByIdRequest_Context_Extension_NameToNumber(message.name));
        }
        if (message.version !== "") {
            writer.uint32(18).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdRequest_Context_Extension();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = main_exportLensesByIdRequest_Context_Extension_NameFromJSON(reader.int32());
                    break;
                case 2:
                    message.version = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseExportLensesByIdRequest_Context_Extension();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : main_ExportLensesByIdRequest_Context_Extension_Name.UNSET;
        message.version = (_b = object.version) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseExportLensesByIdResponse() {
    return { lenses: {}, excludedLenses: [] };
}
const main_ExportLensesByIdResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        Object.entries(message.lenses).forEach(([key, value]) => {
            main_ExportLensesByIdResponse_LensesEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        for (const v of message.excludedLenses) {
            main_ExportLensesByIdResponse_ExcludedLens.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = main_ExportLensesByIdResponse_LensesEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.lenses[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.excludedLenses.push(main_ExportLensesByIdResponse_ExcludedLens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseExportLensesByIdResponse();
        message.lenses = Object.entries((_a = object.lenses) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[Number(key)] = value;
            }
            return acc;
        }, {});
        message.excludedLenses =
            ((_b = object.excludedLenses) === null || _b === void 0 ? void 0 : _b.map((e) => main_ExportLensesByIdResponse_ExcludedLens.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseExportLensesByIdResponse_LensesEntry() {
    return { key: 0, value: new Uint8Array() };
}
const main_ExportLensesByIdResponse_LensesEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== 0) {
            writer.uint32(8).int64(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdResponse_LensesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = main_export_longToNumber(reader.int64());
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseExportLensesByIdResponse_LensesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function main_createBaseExportLensesByIdResponse_ExcludedLens() {
    return { lensId: 0, code: main_ExportLensesByIdResponse_ExcludedLens_Code.UNSET, reason: "" };
}
const main_ExportLensesByIdResponse_ExcludedLens = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.lensId !== 0) {
            writer.uint32(8).int64(message.lensId);
        }
        if (message.code !== main_ExportLensesByIdResponse_ExcludedLens_Code.UNSET) {
            writer.uint32(16).int32(main_exportLensesByIdResponse_ExcludedLens_CodeToNumber(message.code));
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExportLensesByIdResponse_ExcludedLens();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lensId = main_export_longToNumber(reader.int64());
                    break;
                case 2:
                    message.code = main_exportLensesByIdResponse_ExcludedLens_CodeFromJSON(reader.int32());
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseExportLensesByIdResponse_ExcludedLens();
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : 0;
        message.code = (_b = object.code) !== null && _b !== void 0 ? _b : main_ExportLensesByIdResponse_ExcludedLens_Code.UNSET;
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function main_createBaseExtensionRequestContext() {
    return { userAgent: "", locale: "" };
}
const main_ExtensionRequestContext = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.userAgent !== "") {
            writer.uint32(10).string(message.userAgent);
        }
        if (message.locale !== "") {
            writer.uint32(18).string(message.locale);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseExtensionRequestContext();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userAgent = reader.string();
                    break;
                case 2:
                    message.locale = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseExtensionRequestContext();
        message.userAgent = (_a = object.userAgent) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseEnvelope() {
    return { lenses: [] };
}
const main_Envelope = {
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseEnvelope();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lenses.push(main_Lens.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseEnvelope();
        message.lenses = ((_a = object.lenses) === null || _a === void 0 ? void 0 : _a.map((e) => main_Lens.fromPartial(e))) || [];
        return message;
    },
};
var main_export_globalThis = (() => {
    if (typeof main_export_globalThis !== "undefined")
        return main_export_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_export_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_export_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=export.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/LensSource.js



/**
 * By default, no custom {@link LensSources} are provided to CameraKit. But to enable certain advanced use-cases,
 * applications may provide their own LensSources.
 *
 * Perhaps the most convenient way to do this is with {@link ConcatInjectable}, as shown here:
 *
 * @example
 * ```ts
 * import { bootstrapCameraKit, lensSourcesFactory, LensSource } from '@snap/camera-kit'
 *
 * const cameraKit = bootstrapCameraKit(config, (container) => {
 *   return container.provides(ConcatInjectable(
 *     lensSourcesFactory.token,
 *     (): LensSource => { return ... }
 *   ))
 * })
 * ```
 */
const main_lensSourcesFactory = main_Injectable("lensSources", () => []);
/**
 * Given a list of LensSources (like the one provided by CameraKit's DI container under the `'lensSources'` token), and
 * a groupId/lensId, return a list of lenses loaded by the first LensSource claiming ownership of the given groupId.
 *
 * @internal
 */
function main_loadLensesFromSources(sources, groupId, lensId) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        const source = sources.find((source) => source.isGroupOwner(groupId));
        if (!source) {
            throw new Error(`Cannot load lens ${lensId ? `${lensId} from ` : ""}group ${groupId}. No LensSource claimed ownership of` +
                `that lens group.`);
        }
        const envelope = lensId === undefined ? yield source.loadLensGroup(groupId) : yield source.loadLens(lensId, groupId);
        return envelope instanceof ArrayBuffer || ArrayBuffer.isView(envelope)
            ? main_Envelope.decode(envelope instanceof Uint8Array ? envelope : new Uint8Array(envelope)).lenses
            : [];
    });
}
//# sourceMappingURL=LensSource.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/LensRepository.js















const main_LensRepository_logger = main_getLogger("LensRepository");
const main_log = main_errorLoggingDecorator(main_LensRepository_logger);
const main_assetTimingMap = {
    required: main_LensAssetManifestItem_RequestTiming.REQUIRED,
    onDemand: main_LensAssetManifestItem_RequestTiming.ON_DEMAND,
};
function main_isAssetTiming(value) {
    return main_typeguards_isString(value) && main_assetTimingMap.hasOwnProperty(value);
}
function main_isOptionalAssetTimingArray(value) {
    return main_isUndefined(value) || main_isArrayOfType(main_isAssetTiming, value);
}
/**
 * The LensRepository is used to query for lenses from specific lens groups, or for a lens with a specific ID.
 *
 * Lens groups are configured in the CameraKit Portal -- that's where you'll find lens group IDs and lens IDs.
 *
 * Lenses must be loaded by the LensRepository before they can be applied to a {@link CameraKitSession}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(options)
 * const session = await cameraKit.createSession()
 * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
 * session.applyLens(lens)
 * ```
 *
 * @category Lenses
 */
class main_LensRepository {
    /** @internal */
    constructor(lensFetchHandler, lensSources, lensAssetRepository) {
        this.lensFetchHandler = lensFetchHandler;
        this.lensSources = lensSources;
        this.lensAssetRepository = lensAssetRepository;
        this.metadataCache = new Map();
        this.binariesCache = new Map();
    }
    /**
     * Retrieve a single Lens.
     *
     * @param lensId Desired Lens's unique ID. Can be found in the CameraKit Portal.
     * @param groupId The ID of a group containing the desired Lens. Can be found in the CameraKit Portal.
     * @returns Resolves with the desired Lens, or rejects if an error occurred (including a missing Lens).
     */
    loadLens(lensId, groupId) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const lens = (yield main_loadLensesFromSources(this.lensSources, groupId, lensId))[0];
            if (!lens) {
                throw new Error(`Cannot load lens. No lens with id ${lensId} was found in lens group ${groupId}.`);
            }
            const lensWithGroup = Object.assign(Object.assign({}, lens), { groupId });
            this.metadataCache.set(lens.id, lensWithGroup);
            return main_toPublicLens(lensWithGroup);
        });
    }
    /**
     * Retrieve the Lenses contained in a list of Lens Groups.
     *
     * This may result in multiple requests to retrieve Lens data (e.g. one per desired group). If any constituent
     * requests fail, those errors will be reported in the response – but the returned Promise will not be rejected. Any
     * Lenses which could be successfully retrieved will be available in the response.
     *
     * @param groupIds A list of Lens Group IDs. Can be found in the CameraKit Portal.
     * @returns Resolves with a flattened list of all lenses in the desired groups. If any errors occurred during the
     * query operation, these will be included in a separate list. If errors are present, the list of Lenses may not
     * contain all the Lenses from the desired groups.
     */
    loadLensGroups(groupIds) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const responses = yield Promise.all(groupIds.map((groupId) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                try {
                    return (yield main_loadLensesFromSources(this.lensSources, groupId)).map((lens) => {
                        const lensWithGroup = Object.assign(Object.assign({}, lens), { groupId });
                        this.metadataCache.set(lens.id, lensWithGroup);
                        return main_toPublicLens(lensWithGroup);
                    });
                }
                catch (e) {
                    const error = main_errorHelpers_ensureError(e);
                    main_LensRepository_logger.error(new Error(`Failed to load lens group ${groupId}.`, { cause: error }));
                    return error;
                }
            })));
            return responses.reduce((result, response) => {
                if (response instanceof Error)
                    result.errors.push(response);
                else
                    result.lenses.push(...response);
                return result;
            }, { errors: [], lenses: [] });
        });
    }
    /**
     * Loads and caches lens content and dependencies to reduce latency when {@link CameraKitSession.applyLens} is later
     * called to apply the lens. This is an in-memory cache, it will not be persisted across page loads.
     *
     * This may useful if the application A) knows which lenses will be applied and B) has some opportunity to call
     * this method before a lens is applied. For example, if the user must perform some other actions before lenses
     * become active, this might be a good opportunity to cache lenses to improve applyLens latency.
     *
     * @example
     * ```ts
     * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
     * await cameraKit.lensRepository.cacheLensContent([lens])
     *
     * // sometime later -- this call will use the cached lens content, making lens application faster.
     * await cameraKitSession.applyLens(lens)
     * ```
     *
     * @param lenses Array of lenses to cache in memory.
     * @param assetTimingsToCache Lenses specify certain required assets that are necessary for the lens to render, and
     * other assets which may be needed by the lens. By default this method will cache all of those assets, but this
     * behavior can be modified to only load the required assets, only the "onDemand" assets, or neither (by passing
     * an empty array).
     */
    cacheLensContent(lenses, assetTimingsToCache = ["required", "onDemand"]) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const assetTimingsToLoad = assetTimingsToCache.map((timing) => main_assetTimingMap[timing]);
            yield Promise.all(lenses.map((lens) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                try {
                    const { lensBuffer } = yield this.getLensContent(lens);
                    // Safety: getLensContent() call above ensures metadata to exist
                    const { content } = this.metadataCache.get(lens.id);
                    this.binariesCache.set(lens.id, lensBuffer);
                    yield this.lensAssetRepository.cacheAssets(content.assetManifest, lens, assetTimingsToLoad);
                }
                catch (error) {
                    main_LensRepository_logger.warn(`Failed to cache lens ${lens.id}.`, error);
                }
            })));
        });
    }
    /**
     * Returns loaded Lens metadata if available.
     */
    getLensMetadata(lensId) {
        return this.metadataCache.get(lensId);
    }
    /**
     * Removes Lens content from the in-memory cache.
     */
    removeCachedLenses(lenses) {
        lenses.forEach((lens) => this.binariesCache.delete(lens.id));
    }
    /**
     * Fetches lens content and assets. This may come from the cache, otherwise network requests will be made.
     *
     * @internal
     */
    getLensContent(lens) {
        var _a;
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const { content } = (_a = this.metadataCache.get(lens.id)) !== null && _a !== void 0 ? _a : {};
            if (!content) {
                throw new Error(`Cannot find metadata for lens ${lens.id}.`);
            }
            const cachedLensBuffer = this.binariesCache.get(lens.id);
            if (cachedLensBuffer) {
                return {
                    lensBuffer: cachedLensBuffer,
                    lensChecksum: content.lnsSha256,
                };
            }
            // Load required lens assets and the lens itself in parallel. We count both toward lens download time.
            const [lensBuffer] = yield this.lensFetchHandler([
                // TODO: remove force-cache once https://jira.sc-corp.net/browse/CAMKIT-3671 is addressed
                new Request(content.lnsUrlBolt, { cache: "force-cache" }),
                {
                    requestType: "lens_content",
                    lensId: lens.id,
                },
            ]);
            return { lensBuffer, lensChecksum: content.lnsSha256 };
        });
    }
}
main_decorate([
    main_validate_validate,
    main_log,
    main_param(0, main_guard(main_isSafeString)),
    main_param(1, main_guard(main_isSafeString)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [String, String]),
    main_metadata("design:returntype", Promise)
], main_LensRepository.prototype, "loadLens", null);
main_decorate([
    main_validate_validate,
    main_log,
    main_param(0, main_guard(main_isSafeStringArray)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Array]),
    main_metadata("design:returntype", Promise)
], main_LensRepository.prototype, "loadLensGroups", null);
main_decorate([
    main_validate_validate,
    main_log,
    main_param(0, main_guard(main_isLensArray)),
    main_param(1, main_guard(main_isOptionalAssetTimingArray)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Array, Array]),
    main_metadata("design:returntype", Promise)
], main_LensRepository.prototype, "cacheLensContent", null);
/**
 * @internal
 */
const main_lensRepositoryFactory = main_Injectable("LensRepository", [
    main_requestStateEventTargetFactory.token,
    main_defaultFetchHandlerFactory.token,
    main_lensSourcesFactory.token,
    main_lensAssetRepositoryFactory.token,
], (requestStateEventTarget, defaultFetchHandler, lensSources, lensAssetRepository) => {
    const lensFetchHandler = new main_HandlerChainBuilder(defaultFetchHandler)
        .map(main_createRequestStateEmittingHandler(requestStateEventTarget))
        .map(main_createArrayBufferParsingHandler()).handler;
    return new main_LensRepository(lensFetchHandler, lensSources, lensAssetRepository);
});
//# sourceMappingURL=LensRepository.js.map
;// ./node_modules/@snap/camera-kit/lib/dependency-injection/PartialContainer.js


/**
 * Similar to [Container], with the exception that Services may be provided to a PartialContainer which *does not*
 * contain all of that Services dependencies.
 *
 * For this to remain safe, Services can not be resolved by PartialContainer – it has no `get` method.
 *
 * Instead, the PartialContainer must be provided to a [Container] which *does* contain all the dependencies required
 * by all the Service in the PartialContainer. The resulting [Container] can then resolve these Services.
 *
 * PartialContainers are used to create a collection of Services which can then be provided via a simple one-line syntax
 * to an existing Container (which fulfills the collection's dependencies). It is an organizational tool, allowing
 * coherent groupings of Services to be defined in one place, then combined elsewhere to form a complete [Container].
 *
 * Here's an example of PartialContainer usage:
 * ```ts
 * // We can provide fooFactory, even though the PartialContainer doesn't fulfill the Bar dependency.
 * const fooFactory = Injectable('Foo', ['Bar'] as const, (bar: Bar) => new Foo(bar))
 * const partialContainer = new PartialContainer({}).provide(fooFactory)
 *
 * const barFactory = Injectable('Bar', () => new Bar())
 * const dependenciesContainer = Container.provides(barFactory)
 *
 * const combinedContainer = dependenciesContainer.provides(partialContainer)
 *
 * // We can resolve Foo, because the combined container includes Bar, so all of Foo's dependencies are now met.
 * const foo = combinedContainer.get('Foo')
 * ```
 */
/** @internal */
class main_PartialContainer_PartialContainer {
    constructor(injectables) {
        this.injectables = injectables;
    }
    /**
     * Create a new PartialContainer which provides a Service created by the given InjectableFunction.
     *
     * The InjectableFunction contains metadata specifying the Token by which the created Service will be known, as well
     * as an ordered list of Tokens to be resolved and provided to the InjectableFunction as arguments.
     *
     * This dependencies are allowed to be missing from the PartialContainer, but these dependencies are maintained as a
     * parameter of the returned PartialContainer. This allows `[Container.provides]` to type check the dependencies and
     * ensure they can be provided by the Container.
     *
     * @param fn A InjectableFunction, taking dependencies as arguments, which returns the Service.
     */
    provides(fn) {
        return new main_PartialContainer_PartialContainer(Object.assign(Object.assign({}, this.injectables), { [fn.token]: fn }));
    }
    /**
     * In order to create a [Container], the InjectableFunctions maintained by the PartialContainer must be memoized
     * into Factories that can resolve their dependencies and return the correct Service.
     *
     * In particular, this requires access to a "parent" Container to avoid infinite looping in cases where Service A
     * depends on Service A – this is allowed (as long as the parent container provides Service A), but requires access
     * to the parent Container to provide the parent implementation of Service A.
     *
     * This also means that Services provided by a PartialContainer to a Container via this function will always be
     * scoped to the Container. In other words, if a PartialContainer containing Service A is provided to both
     * Container X and Container Y, when Service A is resolved by Container X the InjectableFunction used to create
     * Service A will be invoked – and when Service A is resolved by Container Y, the InjectableFunction will be invoked
     * again.
     *
     * @param parent A [Container] which provides all the required Dependencies of this PartialContainer.
     */
    getFactories(parent) {
        return Object.fromEntries(main_entries(this.injectables).map(([token, fn]) => {
            return [
                token,
                main_memoize((c) => {
                    return fn(...fn.dependencies.map((t) => {
                        return t === token
                            ? parent.get(t)
                            : c.get(t);
                    }));
                }),
            ];
        }));
    }
    getTokens() {
        return Object.keys(this.injectables);
    }
}
//# sourceMappingURL=PartialContainer.js.map
;// ./node_modules/@snap/camera-kit/lib/dependency-injection/Container.js


const main_CONTAINER = "$container";
/**
 * A Container of values, indexed each by a unique token, which can be used throughout CameraKit. This is how CameraKit
 * implements simple dependency injection.
 *
 * Dependency injection is a way to decouple the *use* of a dependency from the *creation* of that dependency. This
 * improves modularity and re-usability, since components only care about the *interfaces* of dependencies (since that
 * determines their use) and not about their concrete creation. New implementations of a particular dependency may be
 * provided without the need to change any of the consumers of that dependency.
 *
 * There are a few commonly-used terms used when talking about dependency injection:
 *
 *   - Container (or Injector): Maintains a registry of all available Services and understands how to create them.
 *   - Service: Anything that can be provided by the Container is called a Service – this can be a value of any type.
 *   - Token: Each Service is associated with a unique name, or Token. In order to obtain a Service from the Container,
 *     the consumer must provide the Token corresponding to that Service.
 *   - InjectableFunction: Services are created by InjectableFunctions. When adding a Service to a Container, the
 *     Service provider gives the Container a InjectableFunction which, when called will return the Service. These
 *     InjectableFunctions may themselves use other Services, which will be passed to them as arguments.
 *
 * Services are, by default, singletons – that is, each call to `get()` a particular Service will return a reference
 * to the same value. In other words, InjectableFunctions are only invoked once. If multiple instances of a Service are
 * desired, a new Container can be created using the `copy([Token])` method – passing a Token to this method forces the
 * new Container to recreate the corresponding Service (the InjectableFunction will be invoked again). We say that the
 * Service is then "scoped" to the new Container.
 *
 *
 * One common downside of many dependency injection implementations is that the dependency graph formed by the various
 * Services can only be validated at runtime. That is, if a dependency is missing or a circular dependency is found, the
 * developer must wait until runtime to discover the error. These errors can often be confusing and hard to debug.
 *
 * This implementation eliminates this issue by moving these sorts of errors to compile time. If an unknown dependency
 * is used in a InjectableFunction, for example, the code simply won't compile.
 *
 * To achieve this, we do lose the ability to implicitly define the dependency graph, as is common with many dependency
 * injection frameworks that employ decorators to define Services and their dependencies. Instead, the dependency graph
 * must be constructed explicitly, step-by-step, via successive calls to the `provide()` method. This is a suitable
 * trade-off for CameraKit, as there are a relatively small number of Services.
 *
 * Here's a simple example of Container usage:
 * ```ts
 * const fooFactory = Injectable('Foo', () => new Foo())
 * const barFactory = Injectable('Bar', ['Foo'] as const, (foo: Foo) => new Bar(foo))
 * const container = Container.empy()
 *   .provide(fooFactory)
 *   .provide(barFactory)
 *
 * const bar: Bar = container.get('Bar')
 * ```
 */
/** @internal */
class main_Container {
    static provides(fnOrContainer) {
        // Although the `provides` method has overloads that match both members of the union type separately, it does
        // not match the union type itself, so the compiler forces us to branch and handle each type within the union
        // separately. (Maybe in the future the compiler will decide to infer this, but for now this is necessary.)
        if (fnOrContainer instanceof main_PartialContainer_PartialContainer)
            return new main_Container({}).provides(fnOrContainer);
        if (fnOrContainer instanceof main_Container)
            return new main_Container({}).provides(fnOrContainer);
        return new main_Container({}).provides(fnOrContainer);
    }
    constructor(factories) {
        this.factories = {};
        for (const k in factories) {
            const fn = factories[k];
            if (main_isMemoized(fn))
                this.factories[k] = fn;
            else
                this.factories[k] = main_memoize(fn);
        }
    }
    /**
     * Create a copy of this Container, optionally providing a list of Services which will be scoped to the copy.
     *
     * This can be useful, for example, if different parts of an application wish to use the same Service interface, but
     * do not want to share a reference to same Service instance.
     *
     * Say we have a Service which manages a list of Users. Our application wishes to display two lists of Users, which
     * may be edited independently. In this case it may be desirable to create a Container for each list component, with
     * the UserList Service scoped to those Containers – that way, each list component gets a unique copy of the
     * UserList Service that can be edited independently of the other.
     *
     * @param scopedServices A list of Tokens identifying Services which will be scoped to the new Container – that is,
     * if those Services had already been created by the source Container, they will be re-created by their Factory
     * functions when provided by the new Container.
     * @returns A new copy of this Container, sharing all of this Container's Services. Services corresponding to any
     * Tokens passed to this method will be re-created by the new Container (i.e. they become "scoped" to the new
     * Container).
     */
    copy(scopedServices) {
        const factories = Object.assign({}, this.factories);
        // We "un-memoize" scoped Service InjectableFunctions so they will create a new copy of their Service when
        // provided by the new Container – we re-memoize them so the new Container will itself only create one Service
        // instance.
        (scopedServices || []).forEach((token) => {
            factories[token] = this.factories[token].delegate;
        });
        return new main_Container(factories);
    }
    get(token) {
        if (token === main_CONTAINER)
            return this;
        const factory = this.factories[token];
        if (!factory) {
            throw new Error(`[Container::get] Could not find Service for Token "${String(token)}". This should've caused a ` +
                "compile-time error. If the Token is 'undefined', check all your calls to the Injectable " +
                "function. Make sure you define dependencies using string literals or string constants that are " +
                "definitely initialized before the call to Injectable.");
        }
        return factory(this);
    }
    run(fnOrContainer) {
        if (fnOrContainer instanceof main_PartialContainer_PartialContainer) {
            const runnableContainer = this.provides(fnOrContainer);
            for (const token of fnOrContainer.getTokens()) {
                runnableContainer.get(token);
            }
        }
        else {
            this.provides(fnOrContainer).get(fnOrContainer.token);
        }
        return this;
    }
    provides(fnOrContainer) {
        if (fnOrContainer instanceof main_PartialContainer_PartialContainer || fnOrContainer instanceof main_Container) {
            const factories = fnOrContainer instanceof main_PartialContainer_PartialContainer ? fnOrContainer.getFactories(this) : fnOrContainer.factories;
            // Safety: `this.factories` and `factories` are both properly type checked, so merging them produces
            // a Factories object with keys from both Services and AdditionalServices. The compiler is unable to
            // infer that Factories<A> & Factories<B> == Factories<A & B>, so the cast is required.
            return new main_Container(Object.assign(Object.assign({}, this.factories), factories));
        }
        return this.providesService(fnOrContainer);
    }
    providesService(fn) {
        const token = fn.token;
        const dependencies = fn.dependencies;
        const factory = main_memoize((container) => {
            return fn(...dependencies.map((t) => {
                // To support overwriting an already-existing service with a new implementation, it should be
                // possibleto do `provide(A, [A], a => createNewServiceFromOld(a))` – that is, inject a dependency
                // with the same token as this service's token.
                //
                // To avoid a circular dependency (in which the factory for service A depends on itself), we always
                // use the service defined in the *parent* container (i.e. this) when injecting a dependency with
                // the same token as the service we're providing. If we did not do this, calling `container.get(t)`
                // would result in an infinite loop.
                return t === token ? this.get(t) : container.get(t);
            }));
        });
        // Safety: `token` and `factory` are property type checked, so extending `this.factories` produces a
        // MaybeMemoizedFactories object with the expected set of services – but when using the spread operation to
        // merge two objects, the compiler widens the Token type to string. So we must re-narrow via casting.
        const factories = Object.assign(Object.assign({}, this.factories), { [token]: factory });
        return new main_Container(factories);
    }
}
//# sourceMappingURL=Container.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/filter.js


function main_filter(predicate, thisArg) {
    return main_operate(function (source, subscriber) {
        var index = 0;
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
    });
}
//# sourceMappingURL=filter.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/of.js


function main_of() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = main_args_popScheduler(args);
    return main_from_from(args, scheduler);
}
//# sourceMappingURL=of.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js




function main_takeUntil(notifier) {
    return main_operate(function (source, subscriber) {
        main_innerFrom_innerFrom(notifier).subscribe(main_createOperatorSubscriber(subscriber, function () { return subscriber.complete(); }, main_noop));
        !subscriber.closed && source.subscribe(subscriber);
    });
}
//# sourceMappingURL=takeUntil.js.map
;// ./node_modules/@snap/state-management/dist/types.js
// `Object.entries` does preserve key types.
const main_types_entries = (o) => Object.entries(o);
// `Object.fromEntries` does not preserve key types.
const main_types_fromEntries = (entries) => Object.fromEntries(entries);

;// ./node_modules/@snap/state-management/dist/actions.js


/**
 * Define an Action by providing a name and (optionally) the type of data the Action carries. Returns a function which
 * creates actions of that type.
 *
 * @param name The action's name, should be unique among all actions used by a single state machine.
 * @returns The function returned is used to specify the type of data the Action carries – it must be called to return
 * the actual action creator, which is then strongly typed.
 */
const main_defineAction = (name) => () => {
    const actionCreator = (data) => ({
        name,
        data,
    });
    Object.defineProperty(actionCreator, 'name', { value: name });
    // Safety: Object.defineProperty has added the `name` property, but the TS compiler doesn't know that.
    return actionCreator;
};
/**
 * Create an object from action creators, where each property is the name of the action.
 *
 * @param actions Pass one or more actions as arguments, using [[defineAction]] to create each action.
 * @returns
 */
const main_defineActions = (...actions) => {
    const entries = actions.map((s) => [s.name, s]);
    // Safety: TS isn't able to infer that keys are the action names, so we have to cast – but we're just extracting the
    // name property and using it as the key (we're doing no other manipulation), so we know we'll end up with the
    // correct ActionCreatorMap.
    return main_types_fromEntries(entries);
};
/**
 * Filter an `Observable<[Action, State]>` to only emit when the action matches one of the action names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   forActions('myFirstAction', 'mySecondAction'),
 * ).subscribe(doSomethingOnEitherAction)
 * ```
 *
 * @param actions Pass one or more action names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns
 */
function main_forActions(...actions) {
    return main_filter((v) => actions.some(action => v[0].name === action));
}
/**
 * Determine if a given action is of a specific type, given by an action name. This narrows the type of the action.
 *
 * @param action An action with a broad type (e.g. a union of many actions)
 * @param name The name of a specific action.
 * @returns Narrows the type of the action argument to that action which has the given name.
 */
function main_isAction(action, name) {
    return action.name === name;
}

;// ./node_modules/@snap/state-management/dist/states.js


/**
 * Define a State by providing a name and (optionally) the type of data the State carries. Returns a function which
 * creates states of that type.
 *
 * @param name The state's name, should be unique among all states used by a single state machine.
 * @returns The function returned is used to specify the type of data the State carries – it must be called to return
 * the actual state creator, which is then strongly typed.
 */
const main_defineState = (name) => () => main_defineAction(name)();
/**
 * Create an object from state creators, where each property is the name of the state.
 *
 * @param states Pass one or more states as arguments, using [[defineState]] to create each state.
 * @returns
 */
const main_defineStates = (...states) => main_defineActions(...states);
/**
 * Filter an `Observable<[Action, State]>` to only emit when the state matches one of the state names given as
 * arguments.
 * ```ts
 * myStateMachine.pipe(
 *   inStates('myFirstState', 'mySecondState'),
 * ).subscribe(doSomethingIfInEitherState)
 * ```
 *
 * @param states Pass one or more state names as arguments, used to filter an `Observable<[Action, State]>`
 * @returns An Observable which only emits when in one of the given states.
 */
function main_inStates(...states) {
    return main_filter((v) => states.some(state => v[1].name === state));
}
/**
 * Determine if a given state is of a specific type, given by an state name. This narrows the type of the state.
 *
 * @param state A state with a broad type (e.g. a union of many states)
 * @param name The name of a specific state.
 * @returns Narrows the type of the state argument to that state which has the given name.
 */
function main_isState(state, name) {
    return state.name === name;
}

;// ./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js


var main_BehaviorSubject = (function (_super) {
    main_extends(BehaviorSubject, _super);
    function BehaviorSubject(_value) {
        var _this = _super.call(this) || this;
        _this._value = _value;
        return _this;
    }
    Object.defineProperty(BehaviorSubject.prototype, "value", {
        get: function () {
            return this.getValue();
        },
        enumerable: false,
        configurable: true
    });
    BehaviorSubject.prototype._subscribe = function (subscriber) {
        var subscription = _super.prototype._subscribe.call(this, subscriber);
        !subscription.closed && subscriber.next(this._value);
        return subscription;
    };
    BehaviorSubject.prototype.getValue = function () {
        var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
        if (hasError) {
            throw thrownError;
        }
        this._throwIfClosed();
        return _value;
    };
    BehaviorSubject.prototype.next = function (value) {
        _super.prototype.next.call(this, (this._value = value));
    };
    return BehaviorSubject;
}(main_Subject));

//# sourceMappingURL=BehaviorSubject.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js







function main_withLatestFrom() {
    var inputs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        inputs[_i] = arguments[_i];
    }
    var project = main_args_popResultSelector(inputs);
    return main_operate(function (source, subscriber) {
        var len = inputs.length;
        var otherValues = new Array(len);
        var hasValue = inputs.map(function () { return false; });
        var ready = false;
        var _loop_1 = function (i) {
            main_innerFrom_innerFrom(inputs[i]).subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                otherValues[i] = value;
                if (!ready && !hasValue[i]) {
                    hasValue[i] = true;
                    (ready = hasValue.every(main_identity_identity)) && (hasValue = null);
                }
            }, main_noop));
        };
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
            if (ready) {
                var values = main_spreadArray([value], main_read(otherValues));
                subscriber.next(project ? project.apply(void 0, main_spreadArray([], main_read(values))) : values);
            }
        }));
    });
}
//# sourceMappingURL=withLatestFrom.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/never.js


var main_NEVER = new main_Observable_Observable(main_noop);
function main_never() {
    return main_NEVER;
}
//# sourceMappingURL=never.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/concatAll.js

function main_concatAll() {
    return main_mergeAll(1);
}
//# sourceMappingURL=concatAll.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/concat.js



function main_concat() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return main_concatAll()(main_from_from(args, main_args_popScheduler(args)));
}
//# sourceMappingURL=concat.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/startWith.js



function main_startWith() {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    var scheduler = main_args_popScheduler(values);
    return main_operate(function (source, subscriber) {
        (scheduler ? main_concat(values, source, scheduler) : main_concat(values, source)).subscribe(subscriber);
    });
}
//# sourceMappingURL=startWith.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/race.js




function main_race() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    sources = argsOrArgArray(sources);
    return sources.length === 1 ? innerFrom(sources[0]) : new Observable(main_raceInit(sources));
}
function main_raceInit(sources) {
    return function (subscriber) {
        var subscriptions = [];
        var _loop_1 = function (i) {
            subscriptions.push(main_innerFrom_innerFrom(sources[i]).subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                if (subscriptions) {
                    for (var s = 0; s < subscriptions.length; s++) {
                        s !== i && subscriptions[s].unsubscribe();
                    }
                    subscriptions = null;
                }
                subscriber.next(value);
            })));
        };
        for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
            _loop_1(i);
        }
    };
}
//# sourceMappingURL=race.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/raceWith.js




function main_raceWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return !otherSources.length
        ? main_identity_identity
        : main_operate(function (source, subscriber) {
            main_raceInit(main_spreadArray([source], main_read(otherSources)))(subscriber);
        });
}
//# sourceMappingURL=raceWith.js.map
;// ./node_modules/@snap/state-management/dist/state-machine.js

/**
 * A StateMachine takes a finite set of both Action and State types, represeting the allowed states of the machine and
 * the possible actions which may (or may not) cause a transition between states.
 *
 * The following algorithm is used to update state. For those who have used Redux, this will sound familiar:
 *
 * 1. The user of the state machine dispatches one of the allowed Actions.
 * 2. The [action, current state] pair is passed to each of the "reducers" configured for the state machine. These
 *    reducers must (synchronously) produce a new state, or do nothing.
 * 3. The state machine's internal state is updated to the new state (or remains in the old state if no reducer produced
 *    a new state).
 * 4. Notify all configured "effects" with the [action, new state] pair – effects are notified even if the state did not
 *    change. Effects may produce their own actions. This will feel familiar to users of redux-observable.
 *
 * We can visualize this with the following diagram:
 *
 * ```txt
 * dipatch Action
 *    |
 *    |
 * reducers run on [Action, Starting State] and return New State
 *    |
 *    |
 * the state machine's internal state is updated to New State
 *    |
 *    |
 * effects run on [Action, New State]
 * ```
 */
/** @internal */
class main_StateMachine {
    actions;
    states;
    /**
     * After an Action is dispatched, passed to the StateMachine's reducer to produce a new state (or stay in the same
     * state), a pair of [Action, State] is emitted on this Observable.
     *
     * This can be used to observe every action dispatched to the StateMachine, along with the state that it produced.
     *
     * The most common use of the `events` Observable is to implement side-effects. It's very common for side-effects
     * to dispatch actions back to the StateMachine.
     *
     * ```ts
     * stateMachine.events.pipe(
     *   inStates('idle'),
     *   forActions('makeRequest'),
     *   switchMap(([{data: request}]) => fromFetch(request)),
     *   tap(response => stateMachine.dispatch('requestComplete', response)),
     * ).subscribe()
     * ```
     */
    events;
    actionsSubject;
    eventsSubject;
    state;
    /**
     * Create a StateMachine with a defined set of Actions and States.
     *
     * The StateMachine begins in a given initial state with transitions to new states defined by a "reducer" function.
     *
     * Reducers are OperatorFunctions which map an Observable of `[Action, State]` pairs into an Observable of a new
     * state. They can be constructed using RxJS's `pipe` function. For example:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, pipe(
     *   inStates('someState'),
     *   forActions('someAction'),
     *   map(([a, s]) => computeNewState(a, s)),
     * ))
     * ```
     *
     * Often it will be useful to break the reducer into separate behaviors to handle different actions:
     *
     * ```ts
     * new StateMachine(actions, states, initialState, state => {
     *   return merge(
     *     state.pipe(inStates('someState'), forAction('someAction'), map(computeNextState)),
     *     state.pipe(inStates('otherState'), forAction('otherAction'), map(computeOtherNextState)),
     *     // ...
     *   )
     * })
     * ```
     *
     * Reducers must return an output Observable<State> which, when the input Observable<[Action, State]> emits, either:
     *
     * - synchronously emits a single new state.
     * - emits nothing.
     *
     * To enforce this, reducer Observables race with a sync Observable containing the current state. If the reducer
     * Observable does not emit a new state synchronously, the current state is used (i.e. the state does not change).
     *
     * @param initialState
     * @param reducer
     * @returns
     */
    constructor(actions, states, initialState, reducer) {
        this.actions = actions;
        this.states = states;
        this.actionsSubject = new main_Subject();
        this.eventsSubject = new main_Subject();
        this.events = this.eventsSubject.asObservable();
        this.state = new main_BehaviorSubject(initialState);
        this.actionsSubject
            .pipe(main_withLatestFrom(this.state), main_mergeMap(([a, s]) => 
        // `NEVER` + `startWith` is needed for `raceWith` to work properly. If we instead used the more
        // typical `of([a, s])` we would encounter the following problem:
        //
        // `of` emits its value and completes synchronously (i.e. both in the same "frame," if you think in
        // marble diagrams). Assuming `reducer` does nothing to modify the completion behavior of its source
        // Observable, the Observable returned by `reducer` will also complete immediately. If we were to
        // pass that Observable to `raceWith` – whose output mirrors whichever input Observable is first to
        // emit, error, *or complete* – it would always win, even if it never emitted anything (because it
        // would already be complete).
        //
        // So instead we need an Observable that does not complete. We achieve this by using `NEVER` and
        // then starting it with `[a, s]`. Note that it's important to then use `take(1)` after `raceWith`
        // so that we don't leak Observables which never complete.
        main_NEVER.pipe(main_startWith([a, s]), reducer, main_raceWith(main_of(s)), main_tap((newState) => {
            if (newState !== s)
                this.state.next(newState);
        }), main_map((newState) => [a, newState]), main_take(1))))
            .subscribe(this.eventsSubject);
    }
    dispatch(actionOrName, data) {
        const action = typeof actionOrName === 'string' ? { name: actionOrName, data } : actionOrName;
        this.actionsSubject.next(action);
    }
    /**
     * Returns the current state.
     */
    getState() {
        return this.state.getValue();
    }
}
/**
 * Transform a source Observable of Actions into an Observable of [Action, State] pairs by:
 * 1. Dispatching the source Actions to the given StateMachine.
 * 3. Return an Observable of that StateMachine's events.
 *
 * This allows callers to dispatch to a StateMachine when the output Observable is subscribed, and then be notified when
 * the StateMachine has produced a new state (which could be the same as the old state).
 *
 * The output Observable will remain subscribed to the StateMachine's events, emitting all subsequent `[Action, State]`
 * pairs. For that reason, it's important to ensure the output Observable is properly unsubscribed to avoid leaks. This
 * is commonly done using the `take`, `takeUntil`, `firstValueFrom`, etc. operators.
 *
 * @param stateMachine The source Observable's Actions will be dispatched to this StateMachine
 * @returns Operator function which transforms an Observable<Action> into an Observable<[Action, State]> by subscribing
 * to the given StateMachine's events and then dispatching source actions to it when they arrive.
 */
function main_dispatch(stateMachine) {
    return (source) => new main_Observable_Observable(subscriber => {
        const subscription = stateMachine.events.subscribe(subscriber);
        subscription.add(source.subscribe({
            next: (action) => stateMachine.dispatch(action),
            error: (error) => subscriber.error(error),
            // We purposely do not forward the `complete` notification. We want the subscriber to remain subscribed to
            // the stateMachine.events observable even if the source Observable<Actions> completes.
        }));
        return subscription;
    });
}

;// ./node_modules/@snap/camera-kit/lib/transforms/Transform2D.js
/**
 * Use this class to supply the CameraKitSession::setSourceTransform with the proper data
 * needed to apply transformations
 *
 * @category Rendering
 */
class main_Transform2D_Transform2D {
    /**
     * @param matrix A 3x3 matrix in column-major order, representing a 2D transform to be applied to the source media
     */
    constructor(matrix) {
        this.matrix = matrix;
    }
}
main_Transform2D_Transform2D.MirrorX = new main_Transform2D_Transform2D([-1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0]);
main_Transform2D_Transform2D.MirrorY = new main_Transform2D_Transform2D([1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 1.0, 1.0]);
main_Transform2D_Transform2D.Identity = new main_Transform2D_Transform2D([1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]);

//# sourceMappingURL=Transform2D.js.map
;// ./node_modules/@snap/camera-kit/lib/transforms/index.js

//# sourceMappingURL=index.js.map
;// ./node_modules/@snap/camera-kit/lib/media-sources/CameraKitSource.js
/* eslint-disable @typescript-eslint/member-ordering */




const main_defaultDeviceInfo = {
    cameraType: "user",
    fpsLimit: Number.POSITIVE_INFINITY,
};
const main_createNotAttachedError = (message) => new Error(`${message}. This CameraKitSource is not attached to a CameraKitSession.`);
/**
 * This general-purpose class represents a source of media for a {@link CameraKitSession}.
 *
 * When an instance is passed to {@link CameraKitSession.setSource | CameraKitSession.setSource}, it will be "attached"
 * to the session. Later it may be "detached" from the session.
 *
 * Passing a {@link CameraKitSourceSubscriber} to the constructor allows callers to specify behavior
 * that will occur when the source is attached and detached. This can be used to e.g. update the render size.
 *
 * @category Rendering
 */
class main_CameraKitSource_CameraKitSource {
    constructor(sourceInfo, subscriber = {}, deviceInfo = {}) {
        this.sourceInfo = sourceInfo;
        this.subscriber = subscriber;
        this.deviceInfo = Object.assign(Object.assign({}, main_defaultDeviceInfo), main_copyDefinedProperties(deviceInfo));
    }
    /**
     * Called by {@link CameraKitSession} when this source is set as that session's source.
     *
     * @param lensCore
     * @param reportError Calling this function will report an error back to the session.
     * @returns Rejects if any calls to LensCore or CameraKitSource.subscriber.onAttach fail.
     * @internal
     */
    attach(lensCore, reportError) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.lensCore) {
                throw new Error("Cannot attach. This CameraKitCustomSource has already been attached to " +
                    "a CameraKitSession. To re-attach, create a copy of this CameraKitCustomSource.");
            }
            this.lensCore = lensCore;
            yield lensCore.useMediaElement({
                autoplayNewMedia: false,
                autoplayPreviewCanvas: false,
                media: this.sourceInfo.media,
                pauseExistingMedia: false,
                replayTrackingData: this.sourceInfo.replayTrackingData,
                requestWebcam: false,
                startOnFrontCamera: ["user", "front"].includes(this.deviceInfo.cameraType),
                useManualFrameProcessing: this.sourceInfo.useManualFrameProcessing,
            });
            // LensCore uses 0 to remove the limit.
            const fps = this.deviceInfo.fpsLimit < Number.POSITIVE_INFINITY ? this.deviceInfo.fpsLimit : 0;
            yield lensCore.setFPSLimit({ fps });
            yield lensCore.setRenderSize({ mode: "matchInputResolution" });
            if (this.subscriber.onAttach)
                yield this.subscriber.onAttach(this, lensCore, reportError);
        });
    }
    copy(deviceInfo = {}) {
        return new main_CameraKitSource_CameraKitSource(this.sourceInfo, this.subscriber, Object.assign(Object.assign({}, this.deviceInfo), deviceInfo));
    }
    /**
     * Called by {@link CameraKitSession} when it must remove this source.
     *
     * @param reportError Calling this function will report an error back to the session.
     * @returns
     * @internal
     */
    detach(reportError) {
        if (!this.lensCore)
            return Promise.reject(main_createNotAttachedError("Cannot detach"));
        if (this.subscriber.onDetach)
            return this.subscriber.onDetach(reportError);
    }
    /**
     * Set the resolution used to render this source.
     *
     * If greater performance is required, a smaller render size may boost frame-rate. It does come at a cost, including
     * loss of accuracy in various tracking and computer-vision algorithms (since they'll be operating on fewer pixels).
     *
     * By default (i.e. if this method is never called), then the render size will match the size of the input media.
     * Best performance can be achieved by varying the size of the input media and allowing CameraKit to render at a
     * resolution that matches the input media -- this method should only be used if the input media resolution cannot
     * be changed to the desired size.
     *
     * It’s important to distinguish render size from display size. The size at which the output canvases are displayed
     * on a web page is determined by the CSS of the page. It is distinct from the size at which CameraKit renders
     * Lenses. Performance is dominated by render size, while any display scaling (using CSS) can most often be thought
     * of as free.
     *
     * The size of the Live and Capture {@link RenderTarget} is always the same.
     *
     * @todo Currently it's only valid to call `setRenderSize` after `CameraKitSession.play` has been called. This
     * constraint should be removed, so callers don't have to understand the underlying LensCore state machine.
     *
     * @param width pixels
     * @param height pixels
     * @returns Promise resolves when the render size has been successfully updated.
     */
    setRenderSize(width, height) {
        if (!this.lensCore)
            return Promise.reject(main_createNotAttachedError("Cannot setRenderSize"));
        const target = { width, height };
        return this.lensCore.setRenderSize({ mode: "explicit", target });
    }
    /**
     * Apply a 2D transformation to the source (e.g. translation, rotation, scale).
     *
     * @param transform Specifies the 3x3 matrix describing the transformation.
     */
    setTransform(transform) {
        if (!this.lensCore)
            return Promise.reject(main_createNotAttachedError("Cannot setTransform"));
        const matrix = new Float32Array(transform.matrix);
        return this.lensCore.setInputTransform({ matrix });
    }
}
main_decorate([
    main_validate_validate,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Number, Number]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSource_CameraKitSource.prototype, "setRenderSize", null);
main_decorate([
    main_validate_validate,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [main_Transform2D_Transform2D]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSource_CameraKitSource.prototype, "setTransform", null);
//# sourceMappingURL=CameraKitSource.js.map
;// ./node_modules/@snap/camera-kit/lib/media-sources/MediaStreamSource.js




const main_MediaStreamSource_defaultOptions = {
    transform: main_Transform2D_Transform2D.Identity,
    disableSourceAudio: false,
};
function main_closeWorklet(worklet) {
    if (!worklet)
        return;
    worklet.port.close();
    worklet.port.onmessage = null;
    worklet.disconnect();
}
function main_closeAudioContext(audioContext) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        if (!audioContext || audioContext.state === "closed")
            return;
        return audioContext.close();
    });
}
/**
 * Create a {@link CameraKitSource} from a user's media device -- this calls
 * [MediaDevices.getUserMedia](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia) to get a
 * MediaStream and then calls {@link createMediaStreamSource}.
 *
 * @param constraints Specify contraints used to get a MediaStream from a media device. By default we simply request
 * a video stream.
 * @param options
 * @param options.transform By default we horizontally mirror the video stream. The most common use-case is to obtain a
 * stream from a front-facing web cam, which requires mirroring to be viewed naturally.
 * @param options.cameraType By default we set this to 'front' to indicate a camera pointed at the user (e.g. a webcam).
 * @param options.fpsLimit By default we set no limit on FPS – if the source device has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 * @returns A Promise, resolving to {@link CameraKitSource}
 *
 * @category Rendering
 *
 * @deprecated The helper will be removed in one of the future releases.
 * Consumer apps are responsible for acquiring a media stream,
 * which can then be supplied to {@link createMediaStreamSource}.
 */
function main_createUserMediaSource(constraints = { video: true }, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const stream = yield navigator.mediaDevices.getUserMedia(constraints);
        return main_createMediaStreamSource(stream, Object.assign({ transform: Transform2D.MirrorX, cameraType: "front" }, options));
    });
}
/**
 * Create a {@link CameraKitSource} from any
 * [MediaStream](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream).
 *
 * @param stream Any MediaStream, such as obtained via `canvas.captureStream()` or `mediaDevices.getUserMedia()`.
 * @param options
 * @param options.transform We apply no transformation by default.
 * @param options.disableSourceAudio By default we pass audio to lens. Settings this to true will disable sending audio
 * to the lens.
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS – if the MediaStream has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 *
 * @category Rendering
 */
function main_createMediaStreamSource(stream, options = {}) {
    var _a;
    const { facingMode } = stream.getVideoTracks().length > 0 ? stream.getVideoTracks()[0].getSettings() : { facingMode: undefined };
    const detectedCameraType = facingMode === "user" || facingMode === "environment" ? facingMode : undefined;
    const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, main_MediaStreamSource_defaultOptions), options), { cameraType: (_a = options.cameraType) !== null && _a !== void 0 ? _a : detectedCameraType });
    const enableSourceAudio = stream.getAudioTracks().length > 0 && !optionsWithDefaults.disableSourceAudio;
    const simulateStereoAudio = true;
    const sampleRate = 44100;
    let audioContext = undefined;
    let audioSource = undefined;
    let worklet = undefined;
    let microphoneRecorderUrl;
    if (enableSourceAudio) {
        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_AudioWorklet
        const microphoneRecorderWorklet = `
        class MicrophoneWorkletProcessor extends AudioWorkletProcessor {
            process(inputs, outputs, parameters) {
                this.port.postMessage({
                    eventType: 'data',
                    buffer: inputs
                });
                return true;
            }
        }
        registerProcessor('microphone-worklet', MicrophoneWorkletProcessor);`;
        const microphoneRecorderBlob = new Blob([microphoneRecorderWorklet], {
            type: "application/javascript",
        });
        microphoneRecorderUrl = URL.createObjectURL(microphoneRecorderBlob);
    }
    return new main_CameraKitSource_CameraKitSource({ media: stream }, {
        onAttach: (source, lensCore, reportError) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield source.setTransform(optionsWithDefaults.transform);
            if (enableSourceAudio) {
                // Audio paramters set has to be called before lens is applied
                yield lensCore.setAudioParameters({
                    parameters: {
                        numChannels: simulateStereoAudio ? 2 : 1,
                        sampleRate,
                    },
                });
                try {
                    // There is a possibility of the onAttach method being called twice in a row due to a bug.
                    // To ensure there are not leaks, it is better to close any existing connections.
                    main_closeWorklet(worklet);
                    audioSource === null || audioSource === void 0 ? void 0 : audioSource.disconnect();
                    yield main_closeAudioContext(audioContext);
                }
                catch (error) {
                    // We still want to continue if anything above failed
                    reportError(main_errorHelpers_ensureError(error));
                }
                audioContext = new AudioContext();
                audioSource = audioContext.createMediaStreamSource(stream);
                const scopedAudioSource = audioSource;
                audioContext.audioWorklet
                    .addModule(microphoneRecorderUrl)
                    .then(() => {
                    if (audioContext) {
                        worklet = new AudioWorkletNode(audioContext, "microphone-worklet");
                        scopedAudioSource.connect(worklet);
                        worklet.connect(audioContext.destination);
                        // NOTE: We subscribe to messages here, and they will continue to arrive
                        // even after audioContext.close() is called. To disconnect the audio worklets
                        // created here, we need to track two variables - worklet and audioSource.
                        // By calling disconnect() on them, we can properly
                        // disconnect the audio worklets.
                        worklet.port.onmessage = (e) => {
                            if (e.data.eventType === "data") {
                                // developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/process
                                // inputs[n][m] is the list of samples in the n-th input at the m-th channel.
                                const leftSamples = e.data.buffer[0][0];
                                // Firefox might have leftSamples undefined:
                                // https://jira.sc-corp.net/browse/CAMKIT-5189
                                if (!leftSamples)
                                    return;
                                let inputBuffers = [leftSamples];
                                if (simulateStereoAudio) {
                                    const rightSamples = e.data.buffer[0].length > 1 ? e.data.buffer[0][1] : leftSamples.slice();
                                    inputBuffers.push(rightSamples);
                                }
                                lensCore.processAudioSampleBuffer({ input: inputBuffers }).catch(reportError);
                            }
                        };
                    }
                })
                    .catch((error) => {
                    reportError(error);
                });
            }
        }),
        onDetach: (reportError) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (worklet) {
                main_closeWorklet(worklet);
                worklet = undefined;
            }
            if (audioSource) {
                audioSource.disconnect();
                audioSource = undefined;
            }
            if (audioContext) {
                yield main_closeAudioContext(audioContext).catch(reportError);
                audioContext = undefined;
            }
        }),
    }, optionsWithDefaults);
}
//# sourceMappingURL=MediaStreamSource.js.map
;// ./node_modules/@snap/camera-kit/lib/media-sources/VideoSource.js

const main_VideoSource_defaultOptions = {
    trackingData: new ArrayBuffer(0),
};
/**
 * Create a {@link CameraKitSource} from an
 * [HTMLVideoElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement).
 *
 * @param video CameraKit performs best when the source video is 720p – arbitrary resolutions are supported, but very
 * high resolutions may not perform well.
 * @param options
 * @param options.trackingData If pre-computed tracking data exists for this video, it may be provided in order to boost
 * rendering performance (it is not typical or expected for this to be provided).
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS – if the video has a known FPS setting this limit
 * may prevent CameraKit from using more compute resources than strictly necessary.
 *
 * @category Rendering
 */
function main_createVideoSource(video, options = {}) {
    const { trackingData } = Object.assign(Object.assign({}, main_VideoSource_defaultOptions), options);
    const replayTrackingData = trackingData.byteLength > 0 ? { buffer: trackingData } : undefined;
    return new main_CameraKitSource_CameraKitSource({
        media: video,
        replayTrackingData,
    }, {}, options);
}
//# sourceMappingURL=VideoSource.js.map
;// ./node_modules/@snap/camera-kit/lib/logger/logEntries.js


/**
 * The factory creates new logEntries subject.
 *
 * NOTE: The factory calls `resetLogger()`, which overrides the global `logEntrySubject`.
 * This is currently necessary to avoid sharing the same subject between multiple `CameraKit` instances.
 * In the future, we may throw an error when bootstrapping more than a single `CameraKit`,
 * that will allow us to have a single log entry subject.
 *
 * @internal
 */
const main_logEntriesFactory = main_Injectable("logEntries", () => main_resetLogger().asObservable());
//# sourceMappingURL=logEntries.js.map
;// ./node_modules/@snap/camera-kit/lib/session/LensPerformanceMeasurement.js
const main_getDefaultFrameMetricsState = () => ({
    avgFps: 0,
    averageProcessingTime: 0,
    n: 0,
    processingTimeBuckets: new Uint32Array(main_frameProcessingTimeMedianMax + 1),
    procFrameCount: 0,
    procFrameMean: 0,
    procFrameD2: 0,
});
// This duration is chosen to be larger than we expect frame processing to reasonably take on any device, but smaller
// than the duration of a manual rendering pause (e.g. a user clicking a pause button followed by a play button).
//
// This also defines the min avgFps that will be reported – if we see avgFps at `1 / frameDurationThresholdSec`
// consistently, it's safe to assume actual fps is probably even lower.
const main_frameDurationThreshold = 1;
// When computing the median frame processing time, in order to save space, we'll record a maximum frame processing
// time median of 200ms -- that's already unnusably slow, and we don't really care if the true median is greater than
// 200ms.
const main_frameProcessingTimeMedianMax = 200;
/**
 * Represents an ongoing measurement of rendering metrics.
 *
 * An instance of this class is obtained by calling {@link LensPerformanceMetrics.beginMeasurement}. Then it may be
 * used to record rendering performance metrics, reset measurement, or end the measurement.
 *
 * @category Rendering
 * @category Metrics
 */
class main_LensPerformanceMeasurement {
    constructor(instances) {
        this.instances = instances;
        this.state = Object.assign({}, main_getDefaultFrameMetricsState());
        this.instances.add(this);
    }
    /** @internal */
    update(processingTimeMs) {
        this.computeRunningStats(processingTimeMs);
    }
    /**
     * Return a {@link ComputedFrameMetrics} object, containing lens performance metrics.
     *
     * This method may be called multiple times, each time reporting values computed since the time when this instance
     * was created.
     */
    measure() {
        // We count the number of frames in each per-millisecond bucket, stopping when we've counted half the frames --
        // that bucket contains the median.
        let median = 0;
        let count = 0;
        for (; median < this.state.processingTimeBuckets.length; median++) {
            count += this.state.processingTimeBuckets[median];
            if (count >= (this.state.n + 1) / 2)
                break;
        }
        return {
            avgFps: this.state.avgFps,
            lensFrameProcessingTimeMsAvg: this.state.procFrameMean,
            lensFrameProcessingTimeMsStd: Math.sqrt(this.state.procFrameD2 / this.state.procFrameCount),
            lensFrameProcessingTimeMsMedian: this.state.n > 0 ? median : 0,
            lensFrameProcessingN: this.state.n,
        };
    }
    /**
     * Reset the measured perforamance statistics (averages, std deviations). This is equivalent to using
     * {@link LensPerformanceMetrics.beginMeasurement} to create a new LensPerformanceMeasurement instance, but may be
     * more convenient.
     */
    reset() {
        this.state = Object.assign({}, main_getDefaultFrameMetricsState());
    }
    /**
     * Stop measuring performance statistics.
     *
     * This instance will not be garbage collected until this method is called. Therefore it is important to call this
     * method at the appropriate time to avoid leaking memory -- particularly if your application creates many
     * LensPerformanceMeasurement instances.
     */
    end() {
        this.instances.delete(this);
    }
    /**
     * In order to calculate the mean, variance, and standard deviation for the processing times
     *  we are using Welford's online algorithm.
     * https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
     *
     * @param processingTimeMs Processing time that is returned from registered callback
     */
    computeRunningStats(processingTimeMs) {
        // calculate mean and delta squared for variance and standard deviation
        const delta = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameCount += 1;
        this.state.procFrameMean += delta / this.state.procFrameCount;
        const delta2 = processingTimeMs - this.state.procFrameMean;
        this.state.procFrameD2 += delta * delta2;
        // Determine average fps
        if (this.priorFrameCompletedTime === undefined) {
            this.priorFrameCompletedTime = performance.now();
        }
        else {
            const frameDurationSec = (performance.now() - this.priorFrameCompletedTime) / 1000;
            if (frameDurationSec < main_frameDurationThreshold) {
                this.state.avgFps = (this.state.avgFps + 1 / frameDurationSec) / 2;
            }
            this.priorFrameCompletedTime = performance.now();
        }
        // To approximate the median, we put each processing time into a per-millisecond bucket, and then when we
        // compute a measurement, we can count how many frames fell into each bucket. We don't care about latencies
        // above 200ms, since that's already unusably slow (if we regress from 280ms to 320ms, we don't really care
        // since both are unnusable).
        this.state.n++;
        this.state.processingTimeBuckets[Math.min(Math.round(processingTimeMs), main_frameProcessingTimeMedianMax)]++;
    }
}
//# sourceMappingURL=LensPerformanceMeasurement.js.map
;// ./node_modules/@snap/camera-kit/lib/session/LensPerformanceMetrics.js




const main_LensPerformanceMetrics_logger = main_getLogger("RenderingMetrics");
const main_LensPerformanceMetrics_log = main_errorLoggingDecorator(main_LensPerformanceMetrics_logger);
/**
 * Use to measure lens rendering performance.
 *
 * The {@link LensPerformanceMetrics.beginMeasurement} method is used to start measuring rendering performance. After
 * a measurement has begun, performance metrics can be read using {@link LensPerformanceMeasurement}.
 *
 * @example
 * ```ts
 * const measurement = cameraKitSession.metrics.beginMeasurement()
 * // some time later
 * console.log(measurement.measure())
 * ```
 *
 * @category Rendering
 * @category Metrics
 */
class main_LensPerformanceMetrics {
    /** @internal */
    constructor(lensCore) {
        this.lensCore = lensCore;
        this.measurementInstances = new Set();
        this.lensCore
            .setOnFrameProcessedCallback({
            onFrameProcessed: ({ processingTimeMs }) => {
                try {
                    for (const measurement of this.measurementInstances.values()) {
                        measurement.update(processingTimeMs);
                    }
                }
                catch (error) {
                    main_LensPerformanceMetrics_logger.error(error);
                }
            },
        })
            .catch((error) => main_LensPerformanceMetrics_logger.error(`Failed registering setOnFrameProcessedCallback with error: ${error.message}`));
    }
    /**
     * Begin a measurement window, during which time rendering metrics will be gathered.
     *
     * @returns A {@link LensPerformanceMeasurement} representing an ongoing measurement of aggregated rendering
     * metrics, from which specific metrics can be obtained.
     */
    beginMeasurement() {
        return new main_LensPerformanceMeasurement(this.measurementInstances);
    }
}
main_decorate([
    main_LensPerformanceMetrics_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", []),
    main_metadata("design:returntype", main_LensPerformanceMeasurement)
], main_LensPerformanceMetrics.prototype, "beginMeasurement", null);
//# sourceMappingURL=LensPerformanceMetrics.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js




function main_exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return function (source) {
            return source.pipe(main_exhaustMap(function (a, i) { return main_innerFrom_innerFrom(project(a, i)).pipe(main_map(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
        };
    }
    return main_operate(function (source, subscriber) {
        var index = 0;
        var innerSub = null;
        var isComplete = false;
        source.subscribe(main_createOperatorSubscriber(subscriber, function (outerValue) {
            if (!innerSub) {
                innerSub = main_createOperatorSubscriber(subscriber, undefined, function () {
                    innerSub = null;
                    isComplete && subscriber.complete();
                });
                main_innerFrom_innerFrom(project(outerValue, index++)).subscribe(innerSub);
            }
        }, function () {
            isComplete = true;
            !innerSub && subscriber.complete();
        }));
    });
}
//# sourceMappingURL=exhaustMap.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js



function main_switchMap(project, resultSelector) {
    return main_operate(function (source, subscriber) {
        var innerSubscriber = null;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
            innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
            var innerIndex = 0;
            var outerIndex = index++;
            main_innerFrom_innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = main_createOperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                innerSubscriber = null;
                checkComplete();
            })));
        }, function () {
            isComplete = true;
            checkComplete();
        }));
    });
}
//# sourceMappingURL=switchMap.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/LensPersistenceStore.js






const main_LensPersistenceStore_logger = main_getLogger("LensPersistenceStore");
const main_lensPersistenceStoreFactory = main_Injectable("lensPersistenceStore", [main_lensCoreFactory.token], (lensCore) => {
    const db = new main_IndexedDBPersistence({ databaseName: "lensPersistenceStore" });
    lensCore.registerSavePersistentStoreCallback((id, data) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        try {
            yield db.store(id, data);
        }
        catch (error) {
            main_LensPersistenceStore_logger.error(main_persistentStoreError(`Error occurred while storing data for lens ${id}.`, error));
        }
    }));
    return db;
});
//# sourceMappingURL=LensPersistenceStore.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/snappable.js


const main_snappable_protobufPackage = "snapchat.lenses.snappable";
var main_EncryptionData_EncryptionScheme;
(function (EncryptionData_EncryptionScheme) {
    EncryptionData_EncryptionScheme["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    EncryptionData_EncryptionScheme["SPOOKEY"] = "SPOOKEY";
    EncryptionData_EncryptionScheme["REGISTRY"] = "REGISTRY";
    EncryptionData_EncryptionScheme["FIDELIUS"] = "FIDELIUS";
    EncryptionData_EncryptionScheme["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_EncryptionData_EncryptionScheme || (main_EncryptionData_EncryptionScheme = {}));
function main_encryptionData_EncryptionSchemeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return main_EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        case 1:
        case "SPOOKEY":
            return main_EncryptionData_EncryptionScheme.SPOOKEY;
        case 2:
        case "REGISTRY":
            return main_EncryptionData_EncryptionScheme.REGISTRY;
        case 3:
        case "FIDELIUS":
            return main_EncryptionData_EncryptionScheme.FIDELIUS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_EncryptionData_EncryptionScheme.UNRECOGNIZED;
    }
}
function main_encryptionData_EncryptionSchemeToNumber(object) {
    switch (object) {
        case main_EncryptionData_EncryptionScheme.NOT_APPLICABLE:
            return 0;
        case main_EncryptionData_EncryptionScheme.SPOOKEY:
            return 1;
        case main_EncryptionData_EncryptionScheme.REGISTRY:
            return 2;
        case main_EncryptionData_EncryptionScheme.FIDELIUS:
            return 3;
        default:
            return 0;
    }
}
var main_SnappableMessage_ReplyType;
(function (SnappableMessage_ReplyType) {
    SnappableMessage_ReplyType["NOT_APPLICABLE"] = "NOT_APPLICABLE";
    SnappableMessage_ReplyType["CONTEXT"] = "CONTEXT";
    SnappableMessage_ReplyType["INTERSTITIAL"] = "INTERSTITIAL";
    SnappableMessage_ReplyType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_SnappableMessage_ReplyType || (main_SnappableMessage_ReplyType = {}));
function main_snappableMessage_ReplyTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "NOT_APPLICABLE":
            return main_SnappableMessage_ReplyType.NOT_APPLICABLE;
        case 1:
        case "CONTEXT":
            return main_SnappableMessage_ReplyType.CONTEXT;
        case 2:
        case "INTERSTITIAL":
            return main_SnappableMessage_ReplyType.INTERSTITIAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_SnappableMessage_ReplyType.UNRECOGNIZED;
    }
}
function main_snappableMessage_ReplyTypeToNumber(object) {
    switch (object) {
        case main_SnappableMessage_ReplyType.NOT_APPLICABLE:
            return 0;
        case main_SnappableMessage_ReplyType.CONTEXT:
            return 1;
        case main_SnappableMessage_ReplyType.INTERSTITIAL:
            return 2;
        default:
            return 0;
    }
}
function main_createBaseEncryptionData() {
    return {
        key: new Uint8Array(),
        ivStore: {},
        isKeyServerEncrypted: false,
        isKeyE2eEncrypted: false,
        encryptionScheme: main_EncryptionData_EncryptionScheme.NOT_APPLICABLE,
    };
}
const main_EncryptionData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key.length !== 0) {
            writer.uint32(10).bytes(message.key);
        }
        Object.entries(message.ivStore).forEach(([key, value]) => {
            main_EncryptionData_IvStoreEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.isKeyServerEncrypted === true) {
            writer.uint32(24).bool(message.isKeyServerEncrypted);
        }
        if (message.isKeyE2eEncrypted === true) {
            writer.uint32(32).bool(message.isKeyE2eEncrypted);
        }
        if (message.encryptionScheme !== main_EncryptionData_EncryptionScheme.NOT_APPLICABLE) {
            writer.uint32(40).int32(main_encryptionData_EncryptionSchemeToNumber(message.encryptionScheme));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseEncryptionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.bytes();
                    break;
                case 2:
                    const entry2 = main_EncryptionData_IvStoreEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.ivStore[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.isKeyServerEncrypted = reader.bool();
                    break;
                case 4:
                    message.isKeyE2eEncrypted = reader.bool();
                    break;
                case 5:
                    message.encryptionScheme = main_encryptionData_EncryptionSchemeFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseEncryptionData();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.ivStore = Object.entries((_b = object.ivStore) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = value;
            }
            return acc;
        }, {});
        message.isKeyServerEncrypted = (_c = object.isKeyServerEncrypted) !== null && _c !== void 0 ? _c : false;
        message.isKeyE2eEncrypted = (_d = object.isKeyE2eEncrypted) !== null && _d !== void 0 ? _d : false;
        message.encryptionScheme = (_e = object.encryptionScheme) !== null && _e !== void 0 ? _e : main_EncryptionData_EncryptionScheme.NOT_APPLICABLE;
        return message;
    },
};
function main_createBaseEncryptionData_IvStoreEntry() {
    return { key: "", value: new Uint8Array() };
}
const main_EncryptionData_IvStoreEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value.length !== 0) {
            writer.uint32(18).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseEncryptionData_IvStoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseEncryptionData_IvStoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function main_createBasePlayerData() {
    return { store: {}, serializedStore: new Uint8Array() };
}
const main_PlayerData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        Object.entries(message.store).forEach(([key, value]) => {
            main_PlayerData_StoreEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        if (message.serializedStore.length !== 0) {
            writer.uint32(18).bytes(message.serializedStore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePlayerData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = main_PlayerData_StoreEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.store[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    message.serializedStore = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePlayerData();
        message.store = Object.entries((_a = object.store) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.serializedStore = (_b = object.serializedStore) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function main_createBasePlayerData_StoreEntry() {
    return { key: "", value: "" };
}
const main_PlayerData_StoreEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePlayerData_StoreEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePlayerData_StoreEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseSessionData() {
    return { playerData: {} };
}
const main_SessionData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        Object.entries(message.playerData).forEach(([key, value]) => {
            main_SessionData_PlayerDataEntry.encode({ key: key, value }, writer.uint32(10).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSessionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    const entry1 = main_SessionData_PlayerDataEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.playerData[entry1.key] = entry1.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseSessionData();
        message.playerData = Object.entries((_a = object.playerData) !== null && _a !== void 0 ? _a : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = main_PlayerData.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function main_createBaseSessionData_PlayerDataEntry() {
    return { key: "", value: undefined };
}
const main_SessionData_PlayerDataEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            main_PlayerData.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSessionData_PlayerDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = main_PlayerData.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseSessionData_PlayerDataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value =
            object.value !== undefined && object.value !== null ? main_PlayerData.fromPartial(object.value) : undefined;
        return message;
    },
};
function main_createBaseSnappableMedia() {
    return { sessionId: "", playerId: "", url: "", key: "", createdTime: 0 };
}
const main_SnappableMedia = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.sessionId !== "") {
            writer.uint32(10).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(18).string(message.playerId);
        }
        if (message.url !== "") {
            writer.uint32(26).string(message.url);
        }
        if (message.key !== "") {
            writer.uint32(34).string(message.key);
        }
        if (message.createdTime !== 0) {
            writer.uint32(40).int64(message.createdTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSnappableMedia();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sessionId = reader.string();
                    break;
                case 2:
                    message.playerId = reader.string();
                    break;
                case 3:
                    message.url = reader.string();
                    break;
                case 4:
                    message.key = reader.string();
                    break;
                case 5:
                    message.createdTime = main_snappable_longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseSnappableMedia();
        message.sessionId = (_a = object.sessionId) !== null && _a !== void 0 ? _a : "";
        message.playerId = (_b = object.playerId) !== null && _b !== void 0 ? _b : "";
        message.url = (_c = object.url) !== null && _c !== void 0 ? _c : "";
        message.key = (_d = object.key) !== null && _d !== void 0 ? _d : "";
        message.createdTime = (_e = object.createdTime) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function main_createBaseSnap3DData() {
    return { allowZippedMedia: false };
}
const main_Snap3DData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.allowZippedMedia === true) {
            writer.uint32(8).bool(message.allowZippedMedia);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSnap3DData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allowZippedMedia = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseSnap3DData();
        message.allowZippedMedia = (_a = object.allowZippedMedia) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function main_createBaseUsesCameraRoll() {
    return { usesCameraRoll: false };
}
const main_UsesCameraRoll = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.usesCameraRoll === true) {
            writer.uint32(8).bool(message.usesCameraRoll);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUsesCameraRoll();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.usesCameraRoll = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseUsesCameraRoll();
        message.usesCameraRoll = (_a = object.usesCameraRoll) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function main_createBaseSnappableMessage() {
    return {
        snappable: undefined,
        media: [],
        effectId: "",
        userIds: [],
        focusPointX: 0,
        focusPointY: 0,
        focusPointWidth: 0,
        replyType: main_SnappableMessage_ReplyType.NOT_APPLICABLE,
        snap3dData: undefined,
        usesCameraRollData: undefined,
        assetBatchId: "",
    };
}
const main_SnappableMessage = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            main_Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            main_SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.effectId !== "") {
            writer.uint32(26).string(message.effectId);
        }
        for (const v of message.userIds) {
            writer.uint32(34).string(v);
        }
        if (message.focusPointX !== 0) {
            writer.uint32(45).float(message.focusPointX);
        }
        if (message.focusPointY !== 0) {
            writer.uint32(53).float(message.focusPointY);
        }
        if (message.focusPointWidth !== 0) {
            writer.uint32(61).float(message.focusPointWidth);
        }
        if (message.replyType !== main_SnappableMessage_ReplyType.NOT_APPLICABLE) {
            writer.uint32(64).int32(main_snappableMessage_ReplyTypeToNumber(message.replyType));
        }
        if (message.snap3dData !== undefined) {
            main_Snap3DData.encode(message.snap3dData, writer.uint32(74).fork()).ldelim();
        }
        if (message.usesCameraRollData !== undefined) {
            main_UsesCameraRoll.encode(message.usesCameraRollData, writer.uint32(82).fork()).ldelim();
        }
        if (message.assetBatchId !== "") {
            writer.uint32(4002).string(message.assetBatchId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSnappableMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = main_Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(main_SnappableMedia.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.effectId = reader.string();
                    break;
                case 4:
                    message.userIds.push(reader.string());
                    break;
                case 5:
                    message.focusPointX = reader.float();
                    break;
                case 6:
                    message.focusPointY = reader.float();
                    break;
                case 7:
                    message.focusPointWidth = reader.float();
                    break;
                case 8:
                    message.replyType = main_snappableMessage_ReplyTypeFromJSON(reader.int32());
                    break;
                case 9:
                    message.snap3dData = main_Snap3DData.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.usesCameraRollData = main_UsesCameraRoll.decode(reader, reader.uint32());
                    break;
                case 500:
                    message.assetBatchId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = main_createBaseSnappableMessage();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? main_Snappable.fromPartial(object.snappable) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => main_SnappableMedia.fromPartial(e))) || [];
        message.effectId = (_b = object.effectId) !== null && _b !== void 0 ? _b : "";
        message.userIds = ((_c = object.userIds) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.focusPointX = (_d = object.focusPointX) !== null && _d !== void 0 ? _d : 0;
        message.focusPointY = (_e = object.focusPointY) !== null && _e !== void 0 ? _e : 0;
        message.focusPointWidth = (_f = object.focusPointWidth) !== null && _f !== void 0 ? _f : 0;
        message.replyType = (_g = object.replyType) !== null && _g !== void 0 ? _g : main_SnappableMessage_ReplyType.NOT_APPLICABLE;
        message.snap3dData =
            object.snap3dData !== undefined && object.snap3dData !== null
                ? main_Snap3DData.fromPartial(object.snap3dData)
                : undefined;
        message.usesCameraRollData =
            object.usesCameraRollData !== undefined && object.usesCameraRollData !== null
                ? main_UsesCameraRoll.fromPartial(object.usesCameraRollData)
                : undefined;
        message.assetBatchId = (_h = object.assetBatchId) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function main_createBaseSnappable() {
    return {
        id: "",
        sessionId: "",
        playerId: "",
        sessionData: undefined,
        createdTime: 0,
        expireTime: 0,
        version: 0,
        encryptionData: undefined,
        sessionDepth: 0,
    };
}
const main_Snappable = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.sessionId !== "") {
            writer.uint32(18).string(message.sessionId);
        }
        if (message.playerId !== "") {
            writer.uint32(26).string(message.playerId);
        }
        if (message.sessionData !== undefined) {
            main_SessionData.encode(message.sessionData, writer.uint32(34).fork()).ldelim();
        }
        if (message.createdTime !== 0) {
            writer.uint32(40).int64(message.createdTime);
        }
        if (message.expireTime !== 0) {
            writer.uint32(48).int64(message.expireTime);
        }
        if (message.version !== 0) {
            writer.uint32(56).int32(message.version);
        }
        if (message.encryptionData !== undefined) {
            main_EncryptionData.encode(message.encryptionData, writer.uint32(66).fork()).ldelim();
        }
        if (message.sessionDepth !== 0) {
            writer.uint32(72).int32(message.sessionDepth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSnappable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.sessionId = reader.string();
                    break;
                case 3:
                    message.playerId = reader.string();
                    break;
                case 4:
                    message.sessionData = main_SessionData.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.createdTime = main_snappable_longToNumber(reader.int64());
                    break;
                case 6:
                    message.expireTime = main_snappable_longToNumber(reader.int64());
                    break;
                case 7:
                    message.version = reader.int32();
                    break;
                case 8:
                    message.encryptionData = main_EncryptionData.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.sessionDepth = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = main_createBaseSnappable();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.sessionId = (_b = object.sessionId) !== null && _b !== void 0 ? _b : "";
        message.playerId = (_c = object.playerId) !== null && _c !== void 0 ? _c : "";
        message.sessionData =
            object.sessionData !== undefined && object.sessionData !== null
                ? main_SessionData.fromPartial(object.sessionData)
                : undefined;
        message.createdTime = (_d = object.createdTime) !== null && _d !== void 0 ? _d : 0;
        message.expireTime = (_e = object.expireTime) !== null && _e !== void 0 ? _e : 0;
        message.version = (_f = object.version) !== null && _f !== void 0 ? _f : 0;
        message.encryptionData =
            object.encryptionData !== undefined && object.encryptionData !== null
                ? main_EncryptionData.fromPartial(object.encryptionData)
                : undefined;
        message.sessionDepth = (_g = object.sessionDepth) !== null && _g !== void 0 ? _g : 0;
        return message;
    },
};
function main_createBasePutSnappableRequest() {
    return { snappable: undefined, media: [] };
}
const main_PutSnappableRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            main_Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            main_SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePutSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = main_Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(main_SnappableMedia.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBasePutSnappableRequest();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? main_Snappable.fromPartial(object.snappable) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => main_SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function main_createBasePutSnappableResponse() {
    return { id: "" };
}
const main_PutSnappableResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePutSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBasePutSnappableResponse();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseGetSnappableRequest() {
    return { id: "" };
}
const main_GetSnappableRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetSnappableRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetSnappableRequest();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseGetSnappableResponse() {
    return { data: undefined, media: [] };
}
const main_GetSnappableResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.data !== undefined) {
            main_Snappable.encode(message.data, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.media) {
            main_SnappableMedia.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetSnappableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = main_Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.media.push(main_SnappableMedia.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetSnappableResponse();
        message.data = object.data !== undefined && object.data !== null ? main_Snappable.fromPartial(object.data) : undefined;
        message.media = ((_a = object.media) === null || _a === void 0 ? void 0 : _a.map((e) => main_SnappableMedia.fromPartial(e))) || [];
        return message;
    },
};
function main_createBaseSnappableEncryptedKey() {
    return { encryptedKey: new Uint8Array(), encryptionKeyId: "", encryptionKeyIv: new Uint8Array() };
}
const main_SnappableEncryptedKey = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.encryptedKey.length !== 0) {
            writer.uint32(10).bytes(message.encryptedKey);
        }
        if (message.encryptionKeyId !== "") {
            writer.uint32(18).string(message.encryptionKeyId);
        }
        if (message.encryptionKeyIv.length !== 0) {
            writer.uint32(26).bytes(message.encryptionKeyIv);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseSnappableEncryptedKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.encryptedKey = reader.bytes();
                    break;
                case 2:
                    message.encryptionKeyId = reader.string();
                    break;
                case 3:
                    message.encryptionKeyIv = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseSnappableEncryptedKey();
        message.encryptedKey = (_a = object.encryptedKey) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.encryptionKeyId = (_b = object.encryptionKeyId) !== null && _b !== void 0 ? _b : "";
        message.encryptionKeyIv = (_c = object.encryptionKeyIv) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
var main_snappable_globalThis = (() => {
    if (typeof main_snappable_globalThis !== "undefined")
        return main_snappable_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_snappable_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_snappable_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=snappable.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/geopoint.js


const main_geopoint_protobufPackage = "snapchat.lenses";
function main_createBaseGeopoint() {
    return { latitude: 0, longitude: 0 };
}
const main_Geopoint = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.latitude !== 0) {
            writer.uint32(9).double(message.latitude);
        }
        if (message.longitude !== 0) {
            writer.uint32(17).double(message.longitude);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGeopoint();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.latitude = reader.double();
                    break;
                case 2:
                    message.longitude = reader.double();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseGeopoint();
        message.latitude = (_a = object.latitude) !== null && _a !== void 0 ? _a : 0;
        message.longitude = (_b = object.longitude) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=geopoint.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/geocircle.js



const main_geocircle_protobufPackage = "snapchat.lenses";
function main_createBaseGeocircle() {
    return { radius: 0, center: undefined };
}
const main_Geocircle = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.radius !== 0) {
            writer.uint32(9).double(message.radius);
        }
        if (message.center !== undefined) {
            main_Geopoint.encode(message.center, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGeocircle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.radius = reader.double();
                    break;
                case 2:
                    message.center = main_Geopoint.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGeocircle();
        message.radius = (_a = object.radius) !== null && _a !== void 0 ? _a : 0;
        message.center =
            object.center !== undefined && object.center !== null ? main_Geopoint.fromPartial(object.center) : undefined;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=geocircle.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/lures.js



const main_lures_protobufPackage = "snapchat.lenses";
function main_createBaseLures() {
    return { locations: [], activeLure: undefined, closestLure: undefined };
}
const main_Lures = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.locations) {
            main_Geocircle.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.activeLure !== undefined) {
            main_Geocircle.encode(message.activeLure, writer.uint32(18).fork()).ldelim();
        }
        if (message.closestLure !== undefined) {
            main_Geocircle.encode(message.closestLure, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLures();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.locations.push(main_Geocircle.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.activeLure = main_Geocircle.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.closestLure = main_Geocircle.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseLures();
        message.locations = ((_a = object.locations) === null || _a === void 0 ? void 0 : _a.map((e) => main_Geocircle.fromPartial(e))) || [];
        message.activeLure =
            object.activeLure !== undefined && object.activeLure !== null
                ? main_Geocircle.fromPartial(object.activeLure)
                : undefined;
        message.closestLure =
            object.closestLure !== undefined && object.closestLure !== null
                ? main_Geocircle.fromPartial(object.closestLure)
                : undefined;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=lures.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/user_data.js



const main_user_data_protobufPackage = "snapchat.lenses";
var main_UserData_Zodiac;
(function (UserData_Zodiac) {
    UserData_Zodiac["Invalid"] = "Invalid";
    UserData_Zodiac["Aquarius"] = "Aquarius";
    UserData_Zodiac["Aries"] = "Aries";
    UserData_Zodiac["Cancer"] = "Cancer";
    UserData_Zodiac["Capricorn"] = "Capricorn";
    UserData_Zodiac["Gemini"] = "Gemini";
    UserData_Zodiac["Leo"] = "Leo";
    UserData_Zodiac["Libra"] = "Libra";
    UserData_Zodiac["Pisces"] = "Pisces";
    UserData_Zodiac["Sagittarius"] = "Sagittarius";
    UserData_Zodiac["Scorpio"] = "Scorpio";
    UserData_Zodiac["Taurus"] = "Taurus";
    UserData_Zodiac["Virgo"] = "Virgo";
    UserData_Zodiac["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_UserData_Zodiac || (main_UserData_Zodiac = {}));
function main_userData_ZodiacFromJSON(object) {
    switch (object) {
        case 0:
        case "Invalid":
            return main_UserData_Zodiac.Invalid;
        case 1:
        case "Aquarius":
            return main_UserData_Zodiac.Aquarius;
        case 2:
        case "Aries":
            return main_UserData_Zodiac.Aries;
        case 3:
        case "Cancer":
            return main_UserData_Zodiac.Cancer;
        case 4:
        case "Capricorn":
            return main_UserData_Zodiac.Capricorn;
        case 5:
        case "Gemini":
            return main_UserData_Zodiac.Gemini;
        case 6:
        case "Leo":
            return main_UserData_Zodiac.Leo;
        case 7:
        case "Libra":
            return main_UserData_Zodiac.Libra;
        case 8:
        case "Pisces":
            return main_UserData_Zodiac.Pisces;
        case 9:
        case "Sagittarius":
            return main_UserData_Zodiac.Sagittarius;
        case 10:
        case "Scorpio":
            return main_UserData_Zodiac.Scorpio;
        case 11:
        case "Taurus":
            return main_UserData_Zodiac.Taurus;
        case 12:
        case "Virgo":
            return main_UserData_Zodiac.Virgo;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_UserData_Zodiac.UNRECOGNIZED;
    }
}
function main_userData_ZodiacToNumber(object) {
    switch (object) {
        case main_UserData_Zodiac.Invalid:
            return 0;
        case main_UserData_Zodiac.Aquarius:
            return 1;
        case main_UserData_Zodiac.Aries:
            return 2;
        case main_UserData_Zodiac.Cancer:
            return 3;
        case main_UserData_Zodiac.Capricorn:
            return 4;
        case main_UserData_Zodiac.Gemini:
            return 5;
        case main_UserData_Zodiac.Leo:
            return 6;
        case main_UserData_Zodiac.Libra:
            return 7;
        case main_UserData_Zodiac.Pisces:
            return 8;
        case main_UserData_Zodiac.Sagittarius:
            return 9;
        case main_UserData_Zodiac.Scorpio:
            return 10;
        case main_UserData_Zodiac.Taurus:
            return 11;
        case main_UserData_Zodiac.Virgo:
            return 12;
        default:
            return 0;
    }
}
function main_createBaseBitmojiUserInfo() {
    return { avatarId: "", selfieId: "" };
}
const main_BitmojiUserInfo = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.avatarId !== "") {
            writer.uint32(10).string(message.avatarId);
        }
        if (message.selfieId !== "") {
            writer.uint32(18).string(message.selfieId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseBitmojiUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.avatarId = reader.string();
                    break;
                case 2:
                    message.selfieId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseBitmojiUserInfo();
        message.avatarId = (_a = object.avatarId) !== null && _a !== void 0 ? _a : "";
        message.selfieId = (_b = object.selfieId) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseFriendUserInfo() {
    return { friendshipStart: undefined, lastInteraction: undefined, streak: 0 };
}
const main_FriendUserInfo = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.friendshipStart !== undefined) {
            main_Timestamp.encode(main_user_data_toTimestamp(message.friendshipStart), writer.uint32(10).fork()).ldelim();
        }
        if (message.lastInteraction !== undefined) {
            main_Timestamp.encode(main_user_data_toTimestamp(message.lastInteraction), writer.uint32(18).fork()).ldelim();
        }
        if (message.streak !== 0) {
            writer.uint32(24).uint32(message.streak);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseFriendUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.friendshipStart = main_user_data_fromTimestamp(main_Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.lastInteraction = main_user_data_fromTimestamp(main_Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.streak = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseFriendUserInfo();
        message.friendshipStart = (_a = object.friendshipStart) !== null && _a !== void 0 ? _a : undefined;
        message.lastInteraction = (_b = object.lastInteraction) !== null && _b !== void 0 ? _b : undefined;
        message.streak = (_c = object.streak) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function main_createBaseUserData() {
    return {
        userId: "",
        username: "",
        birthdate: "",
        displayName: "",
        countrycode: "",
        score: 0,
        bitmojiInfo: undefined,
        friendInfo: undefined,
        zodiac: main_UserData_Zodiac.Invalid,
    };
}
const main_UserData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.userId !== "") {
            writer.uint32(10).string(message.userId);
        }
        if (message.username !== "") {
            writer.uint32(18).string(message.username);
        }
        if (message.birthdate !== "") {
            writer.uint32(26).string(message.birthdate);
        }
        if (message.displayName !== "") {
            writer.uint32(34).string(message.displayName);
        }
        if (message.countrycode !== "") {
            writer.uint32(42).string(message.countrycode);
        }
        if (message.score !== 0) {
            writer.uint32(56).uint64(message.score);
        }
        if (message.bitmojiInfo !== undefined) {
            main_BitmojiUserInfo.encode(message.bitmojiInfo, writer.uint32(66).fork()).ldelim();
        }
        if (message.friendInfo !== undefined) {
            main_FriendUserInfo.encode(message.friendInfo, writer.uint32(74).fork()).ldelim();
        }
        if (message.zodiac !== main_UserData_Zodiac.Invalid) {
            writer.uint32(80).int32(main_userData_ZodiacToNumber(message.zodiac));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUserData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = reader.string();
                    break;
                case 2:
                    message.username = reader.string();
                    break;
                case 3:
                    message.birthdate = reader.string();
                    break;
                case 4:
                    message.displayName = reader.string();
                    break;
                case 5:
                    message.countrycode = reader.string();
                    break;
                case 7:
                    message.score = main_user_data_longToNumber(reader.uint64());
                    break;
                case 8:
                    message.bitmojiInfo = main_BitmojiUserInfo.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.friendInfo = main_FriendUserInfo.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.zodiac = main_userData_ZodiacFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = main_createBaseUserData();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.username = (_b = object.username) !== null && _b !== void 0 ? _b : "";
        message.birthdate = (_c = object.birthdate) !== null && _c !== void 0 ? _c : "";
        message.displayName = (_d = object.displayName) !== null && _d !== void 0 ? _d : "";
        message.countrycode = (_e = object.countrycode) !== null && _e !== void 0 ? _e : "";
        message.score = (_f = object.score) !== null && _f !== void 0 ? _f : 0;
        message.bitmojiInfo =
            object.bitmojiInfo !== undefined && object.bitmojiInfo !== null
                ? main_BitmojiUserInfo.fromPartial(object.bitmojiInfo)
                : undefined;
        message.friendInfo =
            object.friendInfo !== undefined && object.friendInfo !== null
                ? main_FriendUserInfo.fromPartial(object.friendInfo)
                : undefined;
        message.zodiac = (_g = object.zodiac) !== null && _g !== void 0 ? _g : main_UserData_Zodiac.Invalid;
        return message;
    },
};
function main_createBaseUserDataList() {
    return { userData: [] };
}
const main_UserDataList = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.userData) {
            main_UserData.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseUserDataList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userData.push(main_UserData.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseUserDataList();
        message.userData = ((_a = object.userData) === null || _a === void 0 ? void 0 : _a.map((e) => main_UserData.fromPartial(e))) || [];
        return message;
    },
};
var main_user_data_globalThis = (() => {
    if (typeof main_user_data_globalThis !== "undefined")
        return main_user_data_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_user_data_toTimestamp(date) {
    const seconds = date.getTime() / 1000;
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function main_user_data_fromTimestamp(t) {
    let millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function main_user_data_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_user_data_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=user_data.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/persistent_store.js


const main_persistent_store_protobufPackage = "snapchat.lenses";
function main_createBasePersistentStore() {
    return { store: new Uint8Array() };
}
const main_PersistentStore = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.store.length !== 0) {
            writer.uint32(10).bytes(message.store);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePersistentStore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.store = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBasePersistentStore();
        message.store = (_a = object.store) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=persistent_store.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/launch_params.js


const main_launch_params_protobufPackage = "snapchat.lenses";
function main_createBaseLaunchParams() {
    return { data: new Uint8Array() };
}
const main_LaunchParams = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.data.length !== 0) {
            writer.uint32(10).bytes(message.data);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLaunchParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.data = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseLaunchParams();
        message.data = (_a = object.data) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=launch_params.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/launchdata.js







const main_launchdata_protobufPackage = "snapchat.lenses";
var main_LaunchData_EntryPoint;
(function (LaunchData_EntryPoint) {
    LaunchData_EntryPoint["LIVE_CAMERA"] = "LIVE_CAMERA";
    LaunchData_EntryPoint["STORY_REPLY"] = "STORY_REPLY";
    LaunchData_EntryPoint["CHAT_REPLY"] = "CHAT_REPLY";
    LaunchData_EntryPoint["RESTART"] = "RESTART";
    LaunchData_EntryPoint["PREVIEW_CANCEL"] = "PREVIEW_CANCEL";
    LaunchData_EntryPoint["MAP"] = "MAP";
    LaunchData_EntryPoint["BITMOJI_STICKERS"] = "BITMOJI_STICKERS";
    LaunchData_EntryPoint["POST_CAPTURE_PREVIEW"] = "POST_CAPTURE_PREVIEW";
    LaunchData_EntryPoint["POST_CAPTURE_TRANSCODING"] = "POST_CAPTURE_TRANSCODING";
    LaunchData_EntryPoint["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_LaunchData_EntryPoint || (main_LaunchData_EntryPoint = {}));
function main_launchData_EntryPointFromJSON(object) {
    switch (object) {
        case 0:
        case "LIVE_CAMERA":
            return main_LaunchData_EntryPoint.LIVE_CAMERA;
        case 1:
        case "STORY_REPLY":
            return main_LaunchData_EntryPoint.STORY_REPLY;
        case 2:
        case "CHAT_REPLY":
            return main_LaunchData_EntryPoint.CHAT_REPLY;
        case 3:
        case "RESTART":
            return main_LaunchData_EntryPoint.RESTART;
        case 4:
        case "PREVIEW_CANCEL":
            return main_LaunchData_EntryPoint.PREVIEW_CANCEL;
        case 5:
        case "MAP":
            return main_LaunchData_EntryPoint.MAP;
        case 6:
        case "BITMOJI_STICKERS":
            return main_LaunchData_EntryPoint.BITMOJI_STICKERS;
        case 7:
        case "POST_CAPTURE_PREVIEW":
            return main_LaunchData_EntryPoint.POST_CAPTURE_PREVIEW;
        case 8:
        case "POST_CAPTURE_TRANSCODING":
            return main_LaunchData_EntryPoint.POST_CAPTURE_TRANSCODING;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LaunchData_EntryPoint.UNRECOGNIZED;
    }
}
function main_launchData_EntryPointToNumber(object) {
    switch (object) {
        case main_LaunchData_EntryPoint.LIVE_CAMERA:
            return 0;
        case main_LaunchData_EntryPoint.STORY_REPLY:
            return 1;
        case main_LaunchData_EntryPoint.CHAT_REPLY:
            return 2;
        case main_LaunchData_EntryPoint.RESTART:
            return 3;
        case main_LaunchData_EntryPoint.PREVIEW_CANCEL:
            return 4;
        case main_LaunchData_EntryPoint.MAP:
            return 5;
        case main_LaunchData_EntryPoint.BITMOJI_STICKERS:
            return 6;
        case main_LaunchData_EntryPoint.POST_CAPTURE_PREVIEW:
            return 7;
        case main_LaunchData_EntryPoint.POST_CAPTURE_TRANSCODING:
            return 8;
        default:
            return 0;
    }
}
var main_LaunchData_ApiDescriptor;
(function (LaunchData_ApiDescriptor) {
    LaunchData_ApiDescriptor["NONE"] = "NONE";
    LaunchData_ApiDescriptor["EXPERIMENTAL"] = "EXPERIMENTAL";
    LaunchData_ApiDescriptor["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_LaunchData_ApiDescriptor || (main_LaunchData_ApiDescriptor = {}));
function main_launchData_ApiDescriptorFromJSON(object) {
    switch (object) {
        case 0:
        case "NONE":
            return main_LaunchData_ApiDescriptor.NONE;
        case 1:
        case "EXPERIMENTAL":
            return main_LaunchData_ApiDescriptor.EXPERIMENTAL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LaunchData_ApiDescriptor.UNRECOGNIZED;
    }
}
function main_launchData_ApiDescriptorToNumber(object) {
    switch (object) {
        case main_LaunchData_ApiDescriptor.NONE:
            return 0;
        case main_LaunchData_ApiDescriptor.EXPERIMENTAL:
            return 1;
        default:
            return 0;
    }
}
var main_LaunchData_RenderConfig;
(function (LaunchData_RenderConfig) {
    LaunchData_RenderConfig["DEFAULT"] = "DEFAULT";
    LaunchData_RenderConfig["REPLAY_STREAM"] = "REPLAY_STREAM";
    LaunchData_RenderConfig["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_LaunchData_RenderConfig || (main_LaunchData_RenderConfig = {}));
function main_launchData_RenderConfigFromJSON(object) {
    switch (object) {
        case 0:
        case "DEFAULT":
            return main_LaunchData_RenderConfig.DEFAULT;
        case 1:
        case "REPLAY_STREAM":
            return main_LaunchData_RenderConfig.REPLAY_STREAM;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LaunchData_RenderConfig.UNRECOGNIZED;
    }
}
function main_launchData_RenderConfigToNumber(object) {
    switch (object) {
        case main_LaunchData_RenderConfig.DEFAULT:
            return 0;
        case main_LaunchData_RenderConfig.REPLAY_STREAM:
            return 1;
        default:
            return 0;
    }
}
var main_LaunchData_ActivationSource;
(function (LaunchData_ActivationSource) {
    LaunchData_ActivationSource["ACTIVATION_SOURCE_UNSET"] = "ACTIVATION_SOURCE_UNSET";
    LaunchData_ActivationSource["ACTIVATION_SOURCE_DEFAULT"] = "ACTIVATION_SOURCE_DEFAULT";
    LaunchData_ActivationSource["CREATIVE"] = "CREATIVE";
    LaunchData_ActivationSource["SCAN"] = "SCAN";
    LaunchData_ActivationSource["SCAN_HISTORY"] = "SCAN_HISTORY";
    LaunchData_ActivationSource["CHAT_FEED_PSA"] = "CHAT_FEED_PSA";
    LaunchData_ActivationSource["GROWTH_NOTIFICATION"] = "GROWTH_NOTIFICATION";
    LaunchData_ActivationSource["MASS_SNAP"] = "MASS_SNAP";
    LaunchData_ActivationSource["SMART_CTA"] = "SMART_CTA";
    LaunchData_ActivationSource["MASS_CHAT"] = "MASS_CHAT";
    LaunchData_ActivationSource["BILLBOARD_FHP"] = "BILLBOARD_FHP";
    LaunchData_ActivationSource["LENS_ACTIVITY_CENTER"] = "LENS_ACTIVITY_CENTER";
    LaunchData_ActivationSource["AR_BAR"] = "AR_BAR";
    LaunchData_ActivationSource["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_LaunchData_ActivationSource || (main_LaunchData_ActivationSource = {}));
function main_launchData_ActivationSourceFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVATION_SOURCE_UNSET":
            return main_LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET;
        case 1:
        case "ACTIVATION_SOURCE_DEFAULT":
            return main_LaunchData_ActivationSource.ACTIVATION_SOURCE_DEFAULT;
        case 2:
        case "CREATIVE":
            return main_LaunchData_ActivationSource.CREATIVE;
        case 3:
        case "SCAN":
            return main_LaunchData_ActivationSource.SCAN;
        case 4:
        case "SCAN_HISTORY":
            return main_LaunchData_ActivationSource.SCAN_HISTORY;
        case 5:
        case "CHAT_FEED_PSA":
            return main_LaunchData_ActivationSource.CHAT_FEED_PSA;
        case 6:
        case "GROWTH_NOTIFICATION":
            return main_LaunchData_ActivationSource.GROWTH_NOTIFICATION;
        case 7:
        case "MASS_SNAP":
            return main_LaunchData_ActivationSource.MASS_SNAP;
        case 8:
        case "SMART_CTA":
            return main_LaunchData_ActivationSource.SMART_CTA;
        case 9:
        case "MASS_CHAT":
            return main_LaunchData_ActivationSource.MASS_CHAT;
        case 10:
        case "BILLBOARD_FHP":
            return main_LaunchData_ActivationSource.BILLBOARD_FHP;
        case 11:
        case "LENS_ACTIVITY_CENTER":
            return main_LaunchData_ActivationSource.LENS_ACTIVITY_CENTER;
        case 12:
        case "AR_BAR":
            return main_LaunchData_ActivationSource.AR_BAR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_LaunchData_ActivationSource.UNRECOGNIZED;
    }
}
function main_launchData_ActivationSourceToNumber(object) {
    switch (object) {
        case main_LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET:
            return 0;
        case main_LaunchData_ActivationSource.ACTIVATION_SOURCE_DEFAULT:
            return 1;
        case main_LaunchData_ActivationSource.CREATIVE:
            return 2;
        case main_LaunchData_ActivationSource.SCAN:
            return 3;
        case main_LaunchData_ActivationSource.SCAN_HISTORY:
            return 4;
        case main_LaunchData_ActivationSource.CHAT_FEED_PSA:
            return 5;
        case main_LaunchData_ActivationSource.GROWTH_NOTIFICATION:
            return 6;
        case main_LaunchData_ActivationSource.MASS_SNAP:
            return 7;
        case main_LaunchData_ActivationSource.SMART_CTA:
            return 8;
        case main_LaunchData_ActivationSource.MASS_CHAT:
            return 9;
        case main_LaunchData_ActivationSource.BILLBOARD_FHP:
            return 10;
        case main_LaunchData_ActivationSource.LENS_ACTIVITY_CENTER:
            return 11;
        case main_LaunchData_ActivationSource.AR_BAR:
            return 12;
        default:
            return 0;
    }
}
function main_createBaseLaunchData() {
    return {
        snappable: undefined,
        lures: undefined,
        userId: "",
        entryPoint: main_LaunchData_EntryPoint.LIVE_CAMERA,
        userData: undefined,
        persistentStore: undefined,
        launchParams: undefined,
        apiDescriptors: [],
        renderConfig: main_LaunchData_RenderConfig.DEFAULT,
        activationSource: main_LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET,
    };
}
const main_LaunchData = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.snappable !== undefined) {
            main_Snappable.encode(message.snappable, writer.uint32(10).fork()).ldelim();
        }
        if (message.lures !== undefined) {
            main_Lures.encode(message.lures, writer.uint32(18).fork()).ldelim();
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.entryPoint !== main_LaunchData_EntryPoint.LIVE_CAMERA) {
            writer.uint32(32).int32(main_launchData_EntryPointToNumber(message.entryPoint));
        }
        if (message.userData !== undefined) {
            main_UserData.encode(message.userData, writer.uint32(42).fork()).ldelim();
        }
        if (message.persistentStore !== undefined) {
            main_PersistentStore.encode(message.persistentStore, writer.uint32(50).fork()).ldelim();
        }
        if (message.launchParams !== undefined) {
            main_LaunchParams.encode(message.launchParams, writer.uint32(58).fork()).ldelim();
        }
        writer.uint32(66).fork();
        for (const v of message.apiDescriptors) {
            writer.int32(main_launchData_ApiDescriptorToNumber(v));
        }
        writer.ldelim();
        if (message.renderConfig !== main_LaunchData_RenderConfig.DEFAULT) {
            writer.uint32(72).int32(main_launchData_RenderConfigToNumber(message.renderConfig));
        }
        if (message.activationSource !== main_LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET) {
            writer.uint32(80).int32(main_launchData_ActivationSourceToNumber(message.activationSource));
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLaunchData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.snappable = main_Snappable.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.lures = main_Lures.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.userId = reader.string();
                    break;
                case 4:
                    message.entryPoint = main_launchData_EntryPointFromJSON(reader.int32());
                    break;
                case 5:
                    message.userData = main_UserData.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.persistentStore = main_PersistentStore.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.launchParams = main_LaunchParams.decode(reader, reader.uint32());
                    break;
                case 8:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.apiDescriptors.push(main_launchData_ApiDescriptorFromJSON(reader.int32()));
                        }
                    }
                    else {
                        message.apiDescriptors.push(main_launchData_ApiDescriptorFromJSON(reader.int32()));
                    }
                    break;
                case 9:
                    message.renderConfig = main_launchData_RenderConfigFromJSON(reader.int32());
                    break;
                case 10:
                    message.activationSource = main_launchData_ActivationSourceFromJSON(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseLaunchData();
        message.snappable =
            object.snappable !== undefined && object.snappable !== null ? main_Snappable.fromPartial(object.snappable) : undefined;
        message.lures = object.lures !== undefined && object.lures !== null ? main_Lures.fromPartial(object.lures) : undefined;
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : "";
        message.entryPoint = (_b = object.entryPoint) !== null && _b !== void 0 ? _b : main_LaunchData_EntryPoint.LIVE_CAMERA;
        message.userData =
            object.userData !== undefined && object.userData !== null ? main_UserData.fromPartial(object.userData) : undefined;
        message.persistentStore =
            object.persistentStore !== undefined && object.persistentStore !== null
                ? main_PersistentStore.fromPartial(object.persistentStore)
                : undefined;
        message.launchParams =
            object.launchParams !== undefined && object.launchParams !== null
                ? main_LaunchParams.fromPartial(object.launchParams)
                : undefined;
        message.apiDescriptors = ((_c = object.apiDescriptors) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.renderConfig = (_d = object.renderConfig) !== null && _d !== void 0 ? _d : main_LaunchData_RenderConfig.DEFAULT;
        message.activationSource = (_e = object.activationSource) !== null && _e !== void 0 ? _e : main_LaunchData_ActivationSource.ACTIVATION_SOURCE_UNSET;
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=launchdata.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/LensLaunchData.js


const main_isValidNumber = (value) => {
    return main_isNumber(value) && !Number.isNaN(value) && Number.isFinite(value);
};
const main_isValidLaunchParam = (value) => {
    if (Array.isArray(value))
        return value.every(main_typeguards_isString) || value.every(main_isValidNumber);
    return main_typeguards_isString(value) || main_isValidNumber(value);
};
/**
 * @internal
 */
const main_encodeLensLaunchData = (launchData, persistentStore) => {
    // finish() protobufjs method returns UInt8Array with shared ArrayBuffer
    // to avoid of detached buffer error when passing data to Lens Core
    // data should be copied using slice() method
    return main_LaunchData.encode(main_LaunchData.fromPartial(Object.assign(Object.assign({}, launchData), { launchParams: launchData.launchParams ? main_encodeLensLaunchParams(launchData.launchParams) : undefined, persistentStore: { store: new Uint8Array(persistentStore) } })))
        .finish()
        .slice();
};
function main_encodeLensLaunchParams(launchParams) {
    const newError = (message) => new Error(`Failed to encode lens launchParams. ${message}`);
    if (!main_typeguards_isRecord(launchParams) || launchParams instanceof Date) {
        throw newError(`Expected a plain object, got ${typeof launchParams} instead.`);
    }
    for (const [key, value] of Object.entries(launchParams)) {
        if (!main_isValidLaunchParam(value)) {
            throw newError(`Values must be strings, numbers, or arrays of strings or numbers. Field ${key} is ` +
                `a ${typeof value} instead, with value: ${JSON.stringify(value)}`);
        }
    }
    return { data: new TextEncoder().encode(JSON.stringify(launchParams)) };
}
//# sourceMappingURL=LensLaunchData.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var main_argsArgArrayOrObject_isArray = Array.isArray;
var main_getPrototypeOf = Object.getPrototypeOf, main_objectProto = Object.prototype, main_getKeys = Object.keys;
function main_argsArgArrayOrObject_argsArgArrayOrObject(args) {
    if (args.length === 1) {
        var first_1 = args[0];
        if (main_argsArgArrayOrObject_isArray(first_1)) {
            return { args: first_1, keys: null };
        }
        if (main_isPOJO(first_1)) {
            var keys = main_getKeys(first_1);
            return {
                args: keys.map(function (key) { return first_1[key]; }),
                keys: keys,
            };
        }
    }
    return { args: args, keys: null };
}
function main_isPOJO(obj) {
    return obj && typeof obj === 'object' && main_getPrototypeOf(obj) === main_objectProto;
}
//# sourceMappingURL=argsArgArrayOrObject.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/createObject.js
function main_createObject_createObject(keys, values) {
    return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
}
//# sourceMappingURL=createObject.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js







function main_forkJoin() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = main_args_popResultSelector(args);
    var _a = main_argsArgArrayOrObject_argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
    var result = new main_Observable_Observable(function (subscriber) {
        var length = sources.length;
        if (!length) {
            subscriber.complete();
            return;
        }
        var values = new Array(length);
        var remainingCompletions = length;
        var remainingEmissions = length;
        var _loop_1 = function (sourceIndex) {
            var hasValue = false;
            main_innerFrom_innerFrom(sources[sourceIndex]).subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                if (!hasValue) {
                    hasValue = true;
                    remainingEmissions--;
                }
                values[sourceIndex] = value;
            }, function () { return remainingCompletions--; }, undefined, function () {
                if (!remainingCompletions || !hasValue) {
                    if (!remainingEmissions) {
                        subscriber.next(keys ? main_createObject_createObject(keys, values) : values);
                    }
                    subscriber.complete();
                }
            }));
        };
        for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
            _loop_1(sourceIndex);
        }
    });
    return resultSelector ? result.pipe(main_mapOneOrManyArgs_mapOneOrManyArgs(resultSelector)) : result;
}
//# sourceMappingURL=forkJoin.js.map
;// ./node_modules/@snap/camera-kit/lib/common/localization.js

function main_makeTemplate(keys) {
    return (template) => (values) => {
        const tag = (readonlyStrings) => {
            const strings = readonlyStrings.slice();
            return [strings.shift()]
                .concat(keys.map((key) => { var _a; return `${(_a = values[key]) !== null && _a !== void 0 ? _a : ""}${strings.shift()}`; }))
                .concat(strings)
                .join("");
        };
        return template(tag);
    };
}
/**
 * Any strings which are templated (i.e. require runtime values) are defined below.
 */
const main_legalPromptMessage = main_makeTemplate(["privacyPolicyUrl", "termsOfServiceUrl", "learnMoreUrl"]);
/**
 * Strings for each language are defined below.
 */
/* eslint-disable max-len */
/**
 * Translations for supported locales.
 * https://wiki.sc-corp.net/display/Engineering/Consumer+Product+Localization
 */
const main_allStrings = {
    "en-US": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `By using Lenses, you acknowledge reading Snap’s <a href="${0}" target="_blank">Privacy Policy</a> and agree to Snap’s <a href="${0}" target="_blank">Terms of Service</a>. Some lenses use information about your face, hands and voice to work. <a href="${0}" target="_blank">Learn More</a>, and if you want to agree and continue, tap below.`),
        legalPromptAccept: `I Agree`,
        legalPromptReject: `Dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `This feature uses information about face(s), hands and voice(s) detected by the camera and microphone to work. With this feature, you can apply fun and useful augmented reality effects on top of selfies and images. Our camera uses technology to locate certain features (like where your hands, eyes, and nose are) and uses that information to accurately position the feature with the image sensed by the camera. Any information that is collected will be deleted as soon as possible (typically soon after the app is closed) and always within no more than three years.<br/><br/>If you want to agree and continue, tap below.`,
        legalPromptVariantGAdultOrChild: `Are you an adult or child?`,
        legalPromptVariantGFindYourParent: `Please find your parent or legal guardian.`,
        legalPromptVariantGIAmGuardian: `I am the child\'s guardian`,
        legalPromptVariantGCancel: `Cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Child`,
    },
    ar: {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `باستخدامك للعدسات، فأنت تقر بقراءتك <a href="${0}" target="_blank">لسياسة الخصوصية</a> وتوافق على <a href="${0}" target="_blank">شروط الخدمة</a> الخاصة بسناب. تستخدم بعض العدسات معلومات عن وجهك ويديك وصوتك لكي تعمل. <a href="${0}" target="_blank">تعرّف على مزيد من المعلومات</a>، وإذا أردت الموافقة والاستمرار فالمس أدناه.`),
        legalPromptAccept: `أنا أوافق`,
        legalPromptReject: `تجاهل`,
        legalPromptTermsOfService: `شروط الخدمة`,
        legalPromptVariantGMessage: `تستخدم هذه الميزة معلومات تتعلق بالوجه(الوجوه) واليدين والصوت(الأصوات) تكتشفها الكاميرا والميكروفون للعمل. وباستخدام هذه الميزة، يمكنك تطبيق تأثيرات الواقع المُعزّز الممتعة والمفيدة على صور السيلفي والصور. تستخدم الكاميرا لدينا التكنولوجيا لتحديد مكان ملامح معيَّنة (مثل مكان وجود يديك وعينيك وأنفك) وتستخدم هذه المعلومات لتحديد مكان الملامح بدقة مع الصورة التي تستشعرها الكاميرا. سيتم حذف أي معلومات يتم جمعها في أقرب وقت ممكن (عادةً بعد إغلاق التطبيق بفترة وجيزة) وخلال فترة لا تزيد عن ثلاث سنوات دائمًا.<br/><br/>إذا كنت تريد الموافقة والمتابعة، فالمس أدناه.`,
        legalPromptVariantGAdultOrChild: `هل أنت شخص بالغ أم طفل؟`,
        legalPromptVariantGFindYourParent: `يُرجى البحث عن وليّ أمرك أو الوصي القانوني.`,
        legalPromptVariantGIAmGuardian: `أنا الوصي على الطفل`,
        legalPromptVariantGCancel: `إلغاء`,
        legalPromptVariantGAdult: `شخص بالغ`,
        legalPromptVariantGChild: `طفل`,
    },
    "bn-BD": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `লেন্সগুলি ব্যবহার করার মাধ্যমে আপনি Snap-এর <a href="${0}" target="_blank">গোপনীয়তা নীতি</a> পড়েছেন এবং Snap-এর <a href="${0}" target="_blank">পরিষেবার শর্তাবলী</a>-তে সম্মত হচ্ছেন বলে স্বীকার করছেন। কিছু কিছু লেন্স কাজ করার জন্য আপনার মুখ, হাত ও কন্ঠস্বর ব্যবহার করে। <a href="${0}" target="_blank">আরো জানুন</a> এবং আপনি যদি সম্মত হতে ও চালিয়ে যেতে চান তবে নিচে ট্যাপ করুন।`),
        legalPromptAccept: `আমি সম্মতি দিচ্ছি`,
        legalPromptReject: `খারিজ করুন`,
        legalPromptTermsOfService: `পরিষেবার শর্তাবলী`,
        legalPromptVariantGMessage: `কাজ করতে এই বৈশিষ্ট্যটি ক্যামেরা এবং মাইক্রোফোন দ্বারা শনাক্ত করা মুখ, হাত এবং কণ্ঠস্বর সম্পর্কে তথ্য ব্যবহার করে। এই বৈশিষ্ট্যটি দিয়ে আপনি সেলফি এবং ছবির উপর মজার এবং উপযোগী অগমেন্টেড রিয়ালিটির ইফেক্ট প্রয়োগ করতে পারবেন। আমাদের ক্যামেরা নির্দিষ্ট বৈশিষ্ট্যগুলি (যেমন আপনার হাত, চোখ এবং নাক কোথায়) শনাক্ত করতে প্রযুক্তি ব্যবহার করে এবং ক্যামেরা দ্বারা আঁচ করা ছবির সাথে বৈশিষ্ট্যটিকে সঠিকভাবে অবস্থান করতে সেই তথ্য ব্যবহার করে। সংগৃহীত যেকোনো তথ্য যত তাড়াতাড়ি সম্ভব মুছে ফেলা হবে (সাধারণত অ্যাপটি বন্ধ হওয়ার পরেই) এবং কোনো সময়েই তা তিন বছরের বেশি রাখা হবে না।<br/><br/>আপনি যদি সম্মত হতে চান এবং চালিয়ে যেতে চান তাহলে নিচে ট্যাপ করুন।`,
        legalPromptVariantGAdultOrChild: `আপনি একজন প্রাপ্তবয়স্ক না শিশু?`,
        legalPromptVariantGFindYourParent: `অনুগ্রহ করে আপনার পিতামাতা বা আইনি অভিভাবককে খুঁজুন।`,
        legalPromptVariantGIAmGuardian: `আমি শিশুটির অভিভাবক`,
        legalPromptVariantGCancel: `বাতিল করুন`,
        legalPromptVariantGAdult: `প্রাপ্তবয়স্ক`,
        legalPromptVariantGChild: `শিশু`,
    },
    "bn-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `লেন্স ব্যবহার করে, আপনি Snap\'এর \"<a href="${0}" target="_blank">\"গোপনীয়তার নীতি</a> পড়েছেন এবং Snap\'এর <a href="${0}" target="_blank">পরিষেবার শর্তাবলী</a>-তে সম্মত হচ্ছেন বলে স্বীকার করছেন। কিছু কিছু লেন্স কাজ করার জন্য আপনার মুখ, হাত ও কন্ঠস্বরের তথ্য ব্যবহার করে। <a href="${0}" target="_blank">আরও জানুন</a> এবং আপনি সম্মত হলে ও চালিয়ে যেতে চাইলে নিচে ট্যাপ করুন।`),
        legalPromptAccept: `আমি সম্মত`,
        legalPromptReject: `খারিজ করুন`,
        legalPromptTermsOfService: `পরিষেবার শর্তাবলী`,
        legalPromptVariantGMessage: `কাজ করার জন্য এই বৈশিষ্ট্যটি ক্যামেরা এবং মাইক্রোফোন দ্বারা শনাক্ত করা মুখ(গুলি), হাত এবং ভয়েস(গুলি) সম্পর্কিত তথ্য ব্যবহার করে৷ এই বৈশিষ্ট্যটির সাহায্যে, আপনি সেলফি এবং ছবিগুলির উপরে মজাদার এবং দরকারী অগমেন্টেড রিয়েলিটি প্রভাব প্রয়োগ করতে পারেন। আমাদের ক্যামেরা নির্দিষ্ট কিছু বৈশিষ্ট্য শনাক্ত করতে প্রযুক্তি ব্যবহার করে (যেমন আপনার হাত, চোখ এবং নাক কোথায়) এবং ক্যামেরা দ্বারা সংবেদিত ছবির সাথে বৈশিষ্ট্যটিকে ঠিক জায়গায় বসাতে সেই তথ্য ব্যবহার সবসময়ই তিন বছরের কম সময়ের মধ্যে। <br/><br/>আপনি যদি সম্মত থাকেন এবং চালিয়ে যেতে চান, নিচে ট্যাপ করুন।`,
        legalPromptVariantGAdultOrChild: `আপনি কি একজন প্রাপ্তবয়স্ক না শিশু?`,
        legalPromptVariantGFindYourParent: `অনুগ্রহ করে আপনার মা-বাবা বা আইনী অভিভাবককে খুঁজুন।`,
        legalPromptVariantGIAmGuardian: `আমি শিশুটির অভিভাবক`,
        legalPromptVariantGCancel: `বাতিল করুন`,
        legalPromptVariantGAdult: `প্রাপ্তবয়স্ক`,
        legalPromptVariantGChild: `শিশু`,
    },
    "da-DK": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Når du anvender Linser, bekræfter du, at du har læst Snaps <a href="${0}" target="_blank">privatlivspolitik</a> og accepterer Snaps <a href="${0}" target="_blank">servicevilkår</a>. Nogle Linser bruger information om dit ansigt, dine hænder og din stemme for at fungere. <a href="${0}" target="_blank">Få mere at vide</a>, og tryk nedenfor, hvis du vil acceptere og fortsætte.`),
        legalPromptAccept: `Jeg er enig`,
        legalPromptReject: `Afvis`,
        legalPromptTermsOfService: `Servicevilkår`,
        legalPromptVariantGMessage: `Denne funktion bruger oplysninger om ansigt(er), hænder og stemme(r), der registreres af kameraet og mikrofonen, for at kunne fungere. Med denne funktion kan du anvende sjove og nyttige augmented reality-effekter på selfies og billeder. Vores kamera bruger teknologi til at finde bestemte træk (f.eks. hvor dine hænder, øjne og næse er) og bruger disse oplysninger til nøjagtigt at placere trækket i billedet, der opfanges af kameraet. Alle oplysninger, der indsamles, slettes så hurtigst som muligt (typisk kort efter, at appen lukkes) og altid inden for højst tre år.<br/><br/>Tryk herunder, hvis du accepterer og vil fortsætte.`,
        legalPromptVariantGAdultOrChild: `Er du voksen eller barn?`,
        legalPromptVariantGFindYourParent: `Find din forælder eller værge.`,
        legalPromptVariantGIAmGuardian: `Jeg er barnets værge`,
        legalPromptVariantGCancel: `Annuller`,
        legalPromptVariantGAdult: `Voksen`,
        legalPromptVariantGChild: `Barn`,
    },
    "de-DE": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Wenn du Linsen verwendet, versicherst du, dass du die <a href="${0}" target="_blank">Datenschutzbestimmungen</a> von Snap gelesen hast und den <a href="${0}" target="_blank">Servicebestimmungen</a> von Snap zustimmst. Manche Linsen verarbeiten Informationen zu deinem Gesicht, deinen Händen und deiner Stimme, um zu funktionieren. <a href="${0}" target="_blank">Hier erfährst du mehr.</a> Tippe unten, wenn du zustimmen und fortfahren möchtest.`),
        legalPromptAccept: `Zustimmen`,
        legalPromptReject: `Ablehnen`,
        legalPromptTermsOfService: `Servicebestimmungen`,
        legalPromptVariantGMessage: `Diese Funktion verwendet Informationen über Gesichter, Hände und Stimmen, die von der Kamera und dem Mikrofon erkannt werden. Mit dieser Funktion kannst du lustige und nützliche Augmented Reality-Effekte auf Selfies und Bilder anwenden. Unsere Kamera nutzt Technologien, um bestimmte Merkmale zu lokalisieren (z. B. wo sich deine Hände, Augen und Nase befinden), und verwendet diese Informationen, um dieses Merkmal dann exakt über das von der Kamera erfasste Bild zu positionieren. Alle gesammelten Informationen werden so schnell wie möglich gelöscht (in der Regel kurz nach dem Schließen der App), spätestens aber innerhalb von drei Jahren.<br/><br/>Tippe unten, um zuzustimmen und fortzufahren.`,
        legalPromptVariantGAdultOrChild: `Bist du erwachsen oder minderjährig?`,
        legalPromptVariantGFindYourParent: `Bitte hole ein Elternteil oder Erziehungsberechtigten.`,
        legalPromptVariantGIAmGuardian: `Ich bin der Erziehungsberechtigte des Kindes.`,
        legalPromptVariantGCancel: `Abbrechen`,
        legalPromptVariantGAdult: `Erwachsen`,
        legalPromptVariantGChild: `Minderjährig`,
    },
    "el-GR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Χρησιμοποιώντας τους Φακούς, αναγνωρίζεις ότι έχεις διαβάσει την <a href="${0}" target="_blank">Πολιτική απορρήτου</a> του Snap και ότι συμφωνείς με τους <a href="${0}" target="_blank">Όρους υπηρεσίας</a> του Snap. Ορισμένοι Φακοί χρησιμοποιούν πληροφορίες σχετικά με το πρόσωπο, τα χέρια και τη φωνή σου για να λειτουργήσουν. <a href="${0}" target="_blank">Μάθε περισσότερα</a> και αν θέλεις να συμφωνήσεις και να συνεχίσεις, άγγιξε παρακάτω.`),
        legalPromptAccept: `Συμφωνώ`,
        legalPromptReject: `Απόρριψη`,
        legalPromptTermsOfService: `Όροι υπηρεσίας`,
        legalPromptVariantGMessage: `Αυτή η λειτουργία χρησιμοποιεί πληροφορίες σχετικά με τα πρόσωπα, τα χέρια και τις φωνές που ανιχνεύονται από την κάμερα και το μικρόφωνο, προκειμένου να λειτουργήσει. Με αυτήν τη λειτουργία μπορείς να εφαρμόσεις διασκεδαστικά και χρήσιμα εφέ επαυξημένης πραγματικότητας σε σέλφι και εικόνες. Η κάμερά μας χρησιμοποιεί την τεχνολογία για να εντοπίσει ορισμένα χαρακτηριστικά (όπως που βρίσκονται τα χέρια, τα μάτια και η μύτη σου) και αξιοποιεί αυτές τις πληροφορίες για να τοποθετήσει με ακρίβεια τη λειτουργία στην εικόνα που καταγράφεται από την κάμερα. Όλες οι πληροφορίες που συλλέγονται διαγράφονται το συντομότερο δυνατό (συνήθως λίγο μετά το κλείσιμο της εφαρμογής) και σε κάθε περίπτωση σε όχι παραπάνω από τρία χρόνια.<br/><br/>Αν συμφωνείς και θέλεις να συνεχίσεις, άγγιξε παρακάτω.`,
        legalPromptVariantGAdultOrChild: `Είσαι ενήλικας ή παιδί;`,
        legalPromptVariantGFindYourParent: `Βρες τον γονέα ή τον νόμιμο κηδεμόνα σου.`,
        legalPromptVariantGIAmGuardian: `Είμαι ο κηδεμόνας του παιδιού`,
        legalPromptVariantGCancel: `Άκυρο`,
        legalPromptVariantGAdult: `Ενήλικος`,
        legalPromptVariantGChild: `Παιδί`,
    },
    "en-GB": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `By using Lenses, you acknowledge reading Snap\’s <a href="${0}" target="_blank">Privacy Policy</a> and agree to Snap\’s <a href="${0}" target="_blank">Terms of Service</a>. Some Lenses use information about your face, hands and voice to work. <a href="${0}" target="_blank">Learn More</a>, and if you want to agree and continue, tap below.`),
        legalPromptAccept: `I agree`,
        legalPromptReject: `Dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `This feature uses information about face(s), hands and voice(s) detected by the camera and microphone to work. With this feature, you can apply fun and useful augmented reality effects on top of selfies and images. Our camera uses technology to locate certain features (like where your hands, eyes and nose are) and uses that information to accurately position the feature with the image sensed by the camera. Any information that is collected will be deleted as soon as possible (typically soon after the app is closed) and always within no more than three years.<br/><br/>If you want to agree and continue, tap below.`,
        legalPromptVariantGAdultOrChild: `Are you an adult or child?`,
        legalPromptVariantGFindYourParent: `Please find your parent or legal guardian.`,
        legalPromptVariantGIAmGuardian: `I am the child\’s guardian`,
        legalPromptVariantGCancel: `Cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Child`,
    },
    es: {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Al usar Lentes, confirmas que leíste la <a href="${0}" target="_blank">Política de privacidad</a> de Snap y aceptas las <a href="${0}" target="_blank">Condiciones de servicio</a>. Algunos Lentes funcionan usando información acerca de tu cara, tus manos y tu voz. <a href="${0}" target="_blank">Obtén más información</a> y, si quieres aceptar y continuar, toca a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Ignorar`,
        legalPromptTermsOfService: `Condiciones de servicio`,
        legalPromptVariantGMessage: `Esta función utiliza información sobre caras, manos y voces detectadas por la cámara y el micrófono para funcionar. Con esta función, puedes aplicar divertidos y útiles efectos de realidad aumentada sobre selfies e imágenes. Nuestra cámara utiliza tecnología para localizar ciertos rasgos (como dónde están las manos, los ojos y la nariz) y utiliza dicha información para posicionar correctamente el rasgo sobre la imagen detectada por la cámara. Toda la información recopilada se eliminará tan pronto como sea posible (por lo general, poco después de que se cierre la app), siempre en un plazo menor a tres años.<br/><br/>Para aceptar y continuar, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Busca a tu padre, madre o tutor legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Mayor de edad`,
        legalPromptVariantGChild: `Menor de edad`,
    },
    "es-AR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Al usar los Lentes, confirmás que leíste la <a href="${0}" target="_blank">Política de privacidad</a> de Snap y que aceptás sus <a href="${0}" target="_blank">Condiciones de servicio</a>. Algunos Lentes usan información sobre tu cara, tus manos y tu voz para funcionar. <a href="${0}" target="_blank">Obtené más información</a>, y si querés aceptar y continuar, tocá el botón que aparece más abajo.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Omitir`,
        legalPromptTermsOfService: `Condiciones de servicio`,
        legalPromptVariantGMessage: `Esta función utiliza la información sobre caras, manos y voces detectadas por la cámara y el micrófono. Con esta función, podés aplicar divertidos y útiles efectos de realidad aumentada sobre selfies e imágenes. Nuestra cámara utiliza tecnología para localizar ciertos rasgos (como dónde están las manos, los ojos y la nariz) y utiliza esa información para posicionar con precisión el rasgo con la imagen detectada por la cámara. Toda la información recopilada se eliminará lo antes posible (normalmente poco después de cerrar la aplicación) y siempre en un plazo máximo de tres años.<br/><br/>Si deseas aceptar y continuar, tocá a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Sos mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Buscá a tu padre, madre o tutor legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Mayor de edad`,
        legalPromptVariantGChild: `Menor de edad`,
    },
    "es-ES": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Al usar las Lentes, reconoces haber leído la <a href="${0}" target="_blank">Política de privacidad</a> y aceptas los <a href="${0}" target="_blank">Términos del servicio</a> de Snap. Algunas Lentes funcionan utilizando información de tu cara, tus manos o tu voz. Puedes obtener <a href="${0}" target="_blank">más información</a>, y si quieres aceptar y continuar, toca el botón a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Descartar`,
        legalPromptTermsOfService: `Términos del servicio`,
        legalPromptVariantGMessage: `Para su funcionamiento, esta función hace uso de los datos sobre la cara, las manos y las voces detectados por la cámara y el micrófono. Con ella, puedes aplicar efectos de realidad aumentada, tanto útiles como divertidos, en selfies e imágenes. Nuestra cámara utiliza la tecnología para localizar determinados elementos (como la posición de las manos, los ojos o la nariz) y utiliza esta información para colocar el elemento sobre la imagen de forma fiel, según lo detectado por la cámara. Cualquier información que se recopile se eliminará lo antes posible (normalmente, al cerrar la aplicación) y nunca se almacenará durante más de tres años.<br/><br/>Si quieres aceptar y continuar, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres una persona adulta o eres menor?`,
        legalPromptVariantGFindYourParent: `Habla con tu padre, madre o tutor/a legal.`,
        legalPromptVariantGIAmGuardian: `Soy el tutor o tutora legal del menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Menor`,
    },
    "es-MX": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Al usar Lentes, confirmas que leíste la <a href="${0}" target="_blank">Política de privacidad</a> y aceptas los <a href="${0}" target="_blank">Términos y condiciones de servicio</a> de Snap. Algunos lentes usan información sobre tu cara, manos o voz para funcionar. <a href="${0}" target="_blank">Obtén más información</a> y, si quieres aceptarlo, toca a continuación.`),
        legalPromptAccept: `Acepto`,
        legalPromptReject: `Ignorar`,
        legalPromptTermsOfService: `Términos y condiciones de servicio`,
        legalPromptVariantGMessage: `Esta característica utiliza información sobre la(s) cara(s), manos y voz o voces detectadas por la cámara y el micrófono para funcionar. Con ella, puedes aplicar efectos de realidad aumentada útiles y divertidos a selfies e imágenes. Nuestra cámara usa tecnología para localizar ciertos rasgos (como dónde están tus manos, ojos y nariz) y utiliza esa información para posicionar con precisión esta característica con la imagen que la cámara percibió. Toda la información que se recopile se eliminará lo más pronto posible (por lo general, poco después de cerrar la app) y nunca excederá los tres días.<br/><br/>Si quieres aceptar y proseguir, toca a continuación.`,
        legalPromptVariantGAdultOrChild: `¿Eres mayor o menor de edad?`,
        legalPromptVariantGFindYourParent: `Busca a tu madre, padre o quien tenga tu custodia legal.`,
        legalPromptVariantGIAmGuardian: `Tengo la custodia de la persona menor`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Persona adulta`,
        legalPromptVariantGChild: `Persona menor`,
    },
    "fi-FI": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Käyttämällä tehosteita ilmaiset lukeneesi Snapin <a href="${0}" target="_blank">tietosuojaselosteen</a> ja hyväksyväsi Snapin <a href="${0}" target="_blank">palveluehdot</a>. Jotkin tehosteet käyttävät toimintaan tietoja kasvoistasi, käsistäsi ja äänestäsi. <a href="${0}" target="_blank">Lisätietoja saat täältä</a>. Hyväksy ja jatka napauttamalla alla olevaa painiketta.`),
        legalPromptAccept: `Hyväksyn`,
        legalPromptReject: `Hylkää`,
        legalPromptTermsOfService: `Palveluehdot`,
        legalPromptVariantGMessage: `Tämä ominaisuus käyttää toimiakseen tietoja kameran ja mikrofonin havaitsemista kasvoista, käsistä ja äänistä. Ominaisuudella voit lisätä hauskoja ja hyödyllisiä lisätyn todellisuuden efektejä selfieiden ja kuvien päälle. Kameramme käyttää teknologiaa tiettyjen piirteiden paikallistamiseen (kuten käsiesi, silmiesi ja nenäsi sijaintiin) ja käyttää näitä tietoja ominaisuuden asettamiseen oikeaan kohtaan kameran havaitsemassa kuvassa. Kaikki kerätyt tiedot poistetaan mahdollisimman pian (yleensä pian sovelluksen sulkemisen jälkeen) ja aina viimeistään kolmen vuoden kuluttua.<br/><br/>Jos haluat hyväksyä ja jatkaa, napauta painiketta alla. `,
        legalPromptVariantGAdultOrChild: `Oletko aikuinen vai lapsi?`,
        legalPromptVariantGFindYourParent: `Etsi vanhempasi tai huoltajasi.`,
        legalPromptVariantGIAmGuardian: `Olen lapsen huoltaja`,
        legalPromptVariantGCancel: `Peruuta`,
        legalPromptVariantGAdult: `Aikuinen`,
        legalPromptVariantGChild: `Lapsi`,
    },
    "fil-PH": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Sa pamamagitan ng paggamit sa Lenses, kinikilala mong binasa mo ang <a href="${0}" target="_blank">Privacy Policy</a> ng Snap at sumasang-ayon ka sa <a href="${0}" target="_blank">Terms of Service</a> ng Snap. Ang ilang lens ay gumagamit ng impormasyon tungkol sa iyong mukha , mga kamay at boses para gumana. <a href="${0}" target="_blank">Alamin Pa</a>, at kung gusto mong sumang-ayon at magpatuloy, mag-tap sa ibaba.`),
        legalPromptAccept: `Sang-ayon Ako`,
        legalPromptReject: `I-dismiss`,
        legalPromptTermsOfService: `Terms of Service`,
        legalPromptVariantGMessage: `Ang feature na ito ay gumagamit ng impormasyon tungkol sa (mga) mukha, mga kamay at (mga) boses na nade-detect ng camera at microphone para gumana ito. Gamit ang feature na ito, pwede kang mag-apply ng nakakatuwa at kapaki-pakinabang na augmented reality effects sa ibabaw ng mga selfie at image. Gumagamit ang camera namin ng technology para matukoy ang mga partikular na anyo (tulad ng kung nasaan ang iyong mga kamay, mga mata, at ilong) at ginagamit nito ang impormasyong iyon para eksaktong mapwesto ang anyong iyon sa image na nase-sense ng camera. Ang anumang impormasyong kinokolekta ay ide-delete sa lalong madaling panahon (karaniwan ay maikling panahon lang matapos isara ang app) at palaging hindi lalampas nang tatlong taon.<br/><br/>Kung gusto mong sumang-ayon at magpatuloy, mag-tap sa ibaba.`,
        legalPromptVariantGAdultOrChild: `Isa ka bang adult o bata?`,
        legalPromptVariantGFindYourParent: `Pakihanap ang iyong magulang o legal guardian.`,
        legalPromptVariantGIAmGuardian: `Ako ang guardian ng bata`,
        legalPromptVariantGCancel: `I-cancel`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Bata`,
    },
    "fr-FR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `En utilisant les Lenses, vous reconnaissez avoir lu la <a href="${0}" target="_blank">Politique de confidentialité</a> de Snap et vous acceptez les <a href="${0}" target="_blank">Conditions d\'utilisation du service</a> de Snap. Le fonctionnement de certaines Lenses requiert l\'utilisation d\'informations sur votre visage, vos mains et votre voix. <a href="${0}" target="_blank">En savoir plus</a>. Si vous acceptez ces conditions et souhaitez continuer, appuyez ci-dessous.`),
        legalPromptAccept: `J\'accepte`,
        legalPromptReject: `Ignorer`,
        legalPromptTermsOfService: `Conditions d\'utilisation du service`,
        legalPromptVariantGMessage: `Pour fonctionner, cette fonctionnalité utilise des informations sur le ou les visages, les mains et la ou les voix détectés par l\'appareil photo et le micro. Elle vous permet d\'appliquer des effets en réalité augmentée amusants et utiles sur vos selfies et vos images. Notre appareil photo utilise une technologie qui localise certaines caractéristiques (comme l\'emplacement de vos mains, de vos yeux et de votre nez) afin de positionner avec précision la fonctionnalité sur l\'image détectée par l\'appareil photo. Toutes les informations collectées sont supprimées dès que possible (généralement peu après la fermeture de l\'application) et toujours dans un délai maximum de trois ans.<br/><br/>Si vous souhaitez accepter et continuer, appuyez ci-dessous.`,
        legalPromptVariantGAdultOrChild: `Êtes-vous adulte ou mineur ?`,
        legalPromptVariantGFindYourParent: `Veuillez appeler votre parent ou votre tuteur·rice.`,
        legalPromptVariantGIAmGuardian: `Je suis le ou la tuteur·rice de l\'enfant.`,
        legalPromptVariantGCancel: `Annuler`,
        legalPromptVariantGAdult: `Adulte`,
        legalPromptVariantGChild: `Mineur`,
    },
    "gu-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `લેન્સનો ઉપયોગ કરીને, તમે સ્વીકારો છો કે તમે Snapની <a href="${0}" target="_blank">પ્રાઇવસી પોલિસી</a> વાંચી છે અને Snapની <a href="${0}" target="_blank">સેવાની શરતો</a> સાથે સંમત છો. કેટલાક લેન્સ કામ કરી શકે તે માટે તે તમારા ચહેરા, હાથ અને અવાજનો ઉપયોગ કરે છે. <a href="${0}" target="_blank">વધુ જાણો</a>, અને જો તમે સંમત થવા માંગતા હો, તો નીચે ટૅપ કરો.`),
        legalPromptAccept: `હું સંમત છું`,
        legalPromptReject: `બરતરફ કરો`,
        legalPromptTermsOfService: `સેવાની શરતો`,
        legalPromptVariantGMessage: `આ સુવિધા કામ કરી શકે તે માટે કૅમેરા અને માઇક્રોફોન દ્વારા શોધાયેલા ચહેરા(ઓ), હાથ અને અવાજ(જો) વિશેની માહિતીનો ઉપયોગ કરે છે. આ સુવિધા સાથે તમે સેલ્ફી અને ઇમેજની ઉપર મજેદાર અને ઉપયોગી ઑગ્મેંટેડ રિયાલીટી ઇફેક્ટ લાગુ કરી શકો છો. અમારા કૅમેરા અમુક લક્ષણો (જેમ કે તમારા હાથ, આંખો અને નાક ક્યાં છે તે)નું સ્થાન જાણવા માટે ટેક્નોલોજીનો ઉપયોગ કરે છે અને તે માહિતીનો ઉપયોગ તે લક્ષણને કૅમેરા દ્વારા શોધાયેલ ઇમેજ સાથે સ્થિત કરવા માટે કરે છે. એકત્રિત કરેલી કોઈ પણ માહિતી શક્ય તેટલી વહેલી તકે (સામાન્ય રીતે ઍપ બંધ કરવામાં આવે પછી તરત) અને હંમેશાં ત્રણ દિવસની અંદર ડિલીટ કરવામાં આવશે.<br/><br/>જો તમે સંમત થવા અને ચાલુ રાખવા માંગતા હો, તો નીચે ટૅપ કરો.`,
        legalPromptVariantGAdultOrChild: `તમે વયસ્ક છો કે બાળક?`,
        legalPromptVariantGFindYourParent: `કૃપા કરીને તમારા માતા-પિતા અથવા કાનૂની વાલીને શોધો.`,
        legalPromptVariantGIAmGuardian: `હું બાળકના વાલી છું.`,
        legalPromptVariantGCancel: `રદ કરો`,
        legalPromptVariantGAdult: `વયસ્ક`,
        legalPromptVariantGChild: `બાળક`,
    },
    "hi-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `लेंस का इस्तेमाल करके, आप स्वीकार करते हैं कि आपने Snap की <a href="${0}" target="_blank">गोपनीयता नीति</a> को पढ़ लिया है और आप Snap की <a href="${0}" target="_blank">सेवा शर्तों</a> से सहमत हैं। कुछ लेंस काम करने के लिए आपके चेहरे, हाथों और आवाज़ का इस्तेमाल करते हैं। <a href="${0}" target="_blank">और जानें</a>, और अगर आप सहमत होते हैं और जारी रखना चाहते हैं, तो नीचे टैप करें।`),
        legalPromptAccept: `मैं सहमत हूं`,
        legalPromptReject: `खारिज करें`,
        legalPromptTermsOfService: `सेवा शर्तें`,
        legalPromptVariantGMessage: `यह फ़ीचर काम करने के लिए कैमरा और माइक्रोफ़ोन द्वारा फ़ेस, हाथों और आवाज़(जों) के बारे में पहचानी गई जानकारी का इस्तेमाल करता है। इस फ़ीचर की मदद से आप सेल्फ़ी और इमेज के ऊपर मज़ेदार और उपयोगी ऑगमेंटेड रिएलिटी इफ़ेक्ट्स डाल सकते हैं। हमारा कैमरा कुछ फ़ीचर्स (जैसे कि, आपके हाथ, आंख और नाक की जगह) का पता लगाने के लिए टेक्नॉलॉजी का इस्तेमाल करता है और उस जानकारी के इस्तेमाल से खुद महसूस की गई इमेज पर फ़ीचर को सटीक जगह पर लाया जाता है। इकठ्ठा की गई किसी भी जानकारी को जल्द से जल्द (आमतौर पर ऐप बंद करते ही) और तीन सालों के अंदर हमेशा के लिए डिलीट कर दिया जाएगा।<br/><br/>अगर आप सहमत हैं और जारी रखना चाहते हैं, तो नीचे टैप करें।`,
        legalPromptVariantGAdultOrChild: `क्या आप बच्चे हैं या व्यस्क?`,
        legalPromptVariantGFindYourParent: `प्लीज़ अपने माता-पिता या कानूनी गार्जियन का पता लगाएं।`,
        legalPromptVariantGIAmGuardian: `मैं बच्चे का गार्जियन हूं`,
        legalPromptVariantGCancel: `रद्द करें`,
        legalPromptVariantGAdult: `वयस्क`,
        legalPromptVariantGChild: `बच्चा`,
    },
    "id-ID": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Dengan menggunakan Lensa, kamu menyatakan bahwa kamu sudah membaca <a href="${0}" target="_blank">Kebijakan Privasi</a> Snap dan menyetujui <a href="${0}" target="_blank">Ketentuan Layanan</a> Snap. Beberapa lensa menggunakan informasi tentang wajah, tangan, dan suaramu agar bisa berfungsi dengan baik. <a href="${0}" target="_blank">Pelajari Selengkapnya</a>, dan silakan ketuk tombol di bawah jika kamu ingin menyetujuinya dan melanjutkan.`),
        legalPromptAccept: `Saya setuju`,
        legalPromptReject: `Tutup`,
        legalPromptTermsOfService: `Ketentuan Layanan`,
        legalPromptVariantGMessage: `Agar bisa berfungsi, fitur ini menggunakan informasi terkait wajah, tangan, dan suara yang dideteksi oleh kamera serta mikrofon. Dengan fitur ini, efek augmented reality yang menyenangkan dan berguna dapat diterapkan ke selfie dan gambar. Kamera kami menggunakan teknologi untuk menemukan lokasi fitur tertentu (misalnya menemukan bagian tangan, mata, dan hidung), lalu menggunakan informasi tersebut untuk menempatkan fitur secara akurat di gambar yang dideteksi oleh kamera. Informasi apa pun yang dikumpulkan akan segera dihapus (biasanya setelah aplikasi ditutup) dan selalu disimpan tidak lebih dari tiga tahun.<br/><br/>Jika ingin menyetujui dan melanjutkan, ketuk tombol di bawah ini.`,
        legalPromptVariantGAdultOrChild: `Apakah kamu orang dewasa atau anak-anak?`,
        legalPromptVariantGFindYourParent: `Panggil orang tua atau wali resmi.`,
        legalPromptVariantGIAmGuardian: `Saya wali si anak`,
        legalPromptVariantGCancel: `Batal`,
        legalPromptVariantGAdult: `Orang Dewasa`,
        legalPromptVariantGChild: `Anak-Anak`,
    },
    "it-IT": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Usando le Lenti, confermi di aver letto l\'<a href="${0}" target="_blank">Informativa sulla Privacy</a> di Snap Inc. e di accettare i <a href="${0}" target="_blank">Termini di Servizio</a> di Snap Inc. Alcune Lenti utilizzano informazioni sul tuo viso, le tue mani e la tua voce per funzionare. <a href="${0}" target="_blank">Scopri di più</a> e, se sei d\'accordo e vuoi continuare, tocca qui sotto.`),
        legalPromptAccept: `Accetto`,
        legalPromptReject: `Ignora`,
        legalPromptTermsOfService: `Termini di Servizio`,
        legalPromptVariantGMessage: `Questa funzionalità utilizza le informazioni su viso, mani e voce rilevate dalla fotocamera e dal microfono per funzionare. Ti consente di applicare effetti in realtà aumentata divertenti e utili ai selfie e alle immagini. La nostra Fotocamera sfrutta una tecnologia specifica per individuare certe parti del corpo (ad esempio mani, occhi e naso) e usa questi dati per posizionarle in modo accurato sull\'immagine rilevata. Qualsiasi informazione raccolta viene eliminata appena possibile (di solito poco dopo la chiusura dell\'app) e, in ogni caso, entro 3 anni.<br/><br/>Se sei d\'accordo e vuoi continuare, tocca qui sotto.`,
        legalPromptVariantGAdultOrChild: `Sei un adulto o un minore?`,
        legalPromptVariantGFindYourParent: `C\'è bisogno di un genitore o tutore legale.`,
        legalPromptVariantGIAmGuardian: `Sono il tutore del minore`,
        legalPromptVariantGCancel: `Annulla`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Minore`,
    },
    "ja-JP": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `レンズを使用することにより、Snap社の<a href="${0}" target="_blank">プライバシーポリシー</a>を読み、<a href="${0}" target="_blank">利用規約</a>に同意したことになります。レンズの中には、あなたの顔や手、声の情報を利用するものがあります。<a href="${0}" target="_blank">詳細はこちらからご覧いただき</a>、同意して利用を継続する場合には下をタップしてください。`),
        legalPromptAccept: `同意します`,
        legalPromptReject: `閉じる`,
        legalPromptTermsOfService: `利用規約`,
        legalPromptVariantGMessage: `この機能はカメラとマイクを使って検知した顔や手、声の情報を利用します。この機能で、自撮りや画像に楽しく便利な拡張現実の効果を適用できます。Snapのカメラは特定の特徴（例えばあなたの手や目、鼻などの位置）をとらえるテクノロジーを使用し、その情報を利用してカメラによって感知した画像に特徴を適用します。収集した情報はいずれもすぐに消去され（通常アプリが閉じられてからすぐ）、3年を超えて保存されることはありません。<br/><br/>同意して続行するには下記をタップしてください。`,
        legalPromptVariantGAdultOrChild: `大人ですか、子どもですか？`,
        legalPromptVariantGFindYourParent: `親または保護者を探してください。`,
        legalPromptVariantGIAmGuardian: `私はその子供の保護者です`,
        legalPromptVariantGCancel: `キャンセル`,
        legalPromptVariantGAdult: `大人`,
        legalPromptVariantGChild: `子ども`,
    },
    "kn-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `ಲೆನ್ಸ್‌ಗಳನ್ನು ಬಳಸುವ ಮೂಲಕ, Snap ನ <a href="${0}" target="_blank">ಗೌಪ್ಯತಾ ನೀತಿ</a> ಅನ್ನು ನೀವು ಓದಿದ್ದೀರಿ ಎಂದು ಅಂಗೀಕರಿಸುತ್ತೀರಿ ಮತ್ತು Snap ನ <a href="${0}" target="_blank">ಸೇವೆಯ ನಿಯಮಗಳು</a> ಅನ್ನು ಒಪ್ಪುತ್ತೀರಿ. ಕೆಲವು ಲೆನ್ಸ್‌ಗಳು ಕಾರ್ಯನಿರ್ವಹಿಸಲು ನಿಮ್ಮ ಮುಖ, ಕೈಗಳು ಮತ್ತು ಧ್ವನಿಯ ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತವೆ. <a href="${0}" target="_blank">ಇನ್ನಷ್ಟು ತಿಳಿಯಿರಿ</a>, ಹಾಗೂ ಒಂದು ವೇಳೆ ನೀವು ಒಪ್ಪಿ ಮುಂದುವರಿಯಲು ಬಯಸಿದರೆ, ಕೆಳಗೆ ಟ್ಯಾಪ್ ಮಾಡಿ.`),
        legalPromptAccept: `ನಾನು ಒಪ್ಪುತ್ತೇನೆ`,
        legalPromptReject: `ವಜಾಮಾಡಿ`,
        legalPromptTermsOfService: `ಸೇವೆಯ ನಿಯಮಗಳು`,
        legalPromptVariantGMessage: `ಈ ವೈಶಿಷ್ಟ್ಯವು ಕಾರ್ಯನಿರ್ವಹಿಸಲು ಕ್ಯಾಮರಾ ಮತ್ತು ಮೈಕ್ರೊಫೋನ್‌ನಿಂದ ಪತ್ತೆಯಾದ ಮುಖ(ಗಳು), ಕೈಗಳು ಮತ್ತು ಧ್ವನಿ(ಗಳು) ಕುರಿತು ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತದೆ. ಈ ವೈಶಿಷ್ಟ್ಯದೊಂದಿಗೆ, ನೀವು ಸೆಲ್ಫಿಗಳು ಮತ್ತು ಚಿತ್ರಗಳ ಮೇಲೆ ವಿನೋದ ಮತ್ತು ಉಪಯುಕ್ತ ಆಗ್ಮೆಂಟೆಡ್‌ ರಿಯಾಲಿಟಿ ಪರಿಣಾಮಗಳನ್ನು ಅನ್ವಯಿಸಬಹುದು. ನಮ್ಮ ಕ್ಯಾಮರಾ ಕೆಲವು ವೈಶಿಷ್ಟ್ಯಗಳನ್ನು (ನಿಮ್ಮ ಕೈಗಳು, ಕಣ್ಣುಗಳು ಮತ್ತು ಮೂಗು ಎಲ್ಲಿದೆ ಎಂದು) ಪತ್ತೆಹಚ್ಚಲು ತಂತ್ರಜ್ಞಾನವನ್ನು ಬಳಸುತ್ತದೆ ಮತ್ತು ಕ್ಯಾಮರಾದಿಂದ ಗ್ರಹಿಸಲ್ಪಟ್ಟ ಚಿತ್ರದೊಂದಿಗೆ ವೈಶಿಷ್ಟ್ಯವನ್ನು ನಿಖರವಾಗಿ ಇರಿಸಲು ಆ ಮಾಹಿತಿಯನ್ನು ಬಳಸುತ್ತದೆ. ಸಂಗ್ರಹಿಸಿದ ಯಾವುದೇ ಮಾಹಿತಿಯನ್ನು ಸಾಧ್ಯವಾದಷ್ಟು ಬೇಗ ಅಳಿಸಲಾಗುತ್ತದೆ (ಸಾಮಾನ್ಯವಾಗಿ ಆ್ಯಪ್‌ ಅನ್ನು ಮುಚ್ಚಿದ ನಂತರ) ಮತ್ತು ಎಂದಿಗೂ ಮೂರು ವರ್ಷಗಳ ನಂತರ ಇರಿಸಿಕೊಳ್ಳಲಾಗುವುದಿಲ್ಲ. <br/><br/> ನೀವು ಒಪ್ಪಿಕೊಳ್ಳಲು ಮತ್ತು ಮುಂದುವರಿಸಲು ಬಯಸಿದರೆ, ಕೆಳಗೆ ಟ್ಯಾಪ್ ಮಾಡಿ.`,
        legalPromptVariantGAdultOrChild: `ನೀವು ವಯಸ್ಕರೇ ಅಥವಾ ಮಗುವೇ?`,
        legalPromptVariantGFindYourParent: `ದಯವಿಟ್ಟು ನಿಮ್ಮ ಪೋಷಕರು ಅಥವಾ ಕಾನೂನು ಪಾಲಕರನ್ನು ಹುಡುಕಿ.`,
        legalPromptVariantGIAmGuardian: `ನಾನು ಮಗುವಿನ ಪೋಷಕ`,
        legalPromptVariantGCancel: `ರದ್ದುಮಾಡಿ`,
        legalPromptVariantGAdult: `ವಯಸ್ಕ`,
        legalPromptVariantGChild: `ಮಗು`,
    },
    "ko-KR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `렌즈를 사용하면 Snap의 <a href="${0}" target="_blank">개인정보 보호정책</a>을 읽고 Snap의 <a href="${0}" target="_blank">이용 약관</a>에 동의하는 것으로 간주됩니다. 일부 렌즈는 회원님의 얼굴, 손 및 목소리 정보를 사용합니다. <a href="${0}" target="_blank">자세히 알아보고</a>, 동의 및 계속하려면 아래를 누르세요.`),
        legalPromptAccept: `동의함`,
        legalPromptReject: `취소`,
        legalPromptTermsOfService: `이용 약관`,
        legalPromptVariantGMessage: `이 기능은 카메라와 마이크가 감지한 얼굴, 손, 음성에 대한 정보를 사용하여 작동합니다. 이 기능을 사용하면 셀카 및 이미지에 재미있고 유용한 증강 현실 효과를 적용할 수 있습니다. Snapchat 카메라는 특정 특징(예: 손, 눈 및 코의 위치)을 찾아내는 기술을 사용하며, 해당 정보를 바탕으로 카메라가 감지한 이미지에서 특징의 위치를 정확하게 파악합니다. 수집된 모든 정보는 가능한 한 빨리(일반적으로 앱 종료 직후) 삭제되며, 항상 3년 이내에 삭제됩니다.<br/><br/>동의하고 계속하려면 아래를 누르세요.`,
        legalPromptVariantGAdultOrChild: `성인인가요, 아동인가요?`,
        legalPromptVariantGFindYourParent: `부모님 또는 법적 보호자와 함께 진행하세요.`,
        legalPromptVariantGIAmGuardian: `아동의 보호자입니다`,
        legalPromptVariantGCancel: `취소`,
        legalPromptVariantGAdult: `성인`,
        legalPromptVariantGChild: `아동`,
    },
    "ml-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `ലെൻസുകൾ ഉപയോഗിക്കുന്നതിലൂടെ നിങ്ങൾ Snap-ന്റെ <a href="${0}" target="_blank">സ്വകാര്യതാ നയം</a> വായിച്ചുവെന്ന് സമ്മതിക്കുകയും Snap-ന്റെ <a href="${0}" target="_blank">സേവന നിബന്ധനകൾ</a> അംഗീകരിക്കുകയും ചെയ്യുന്നു. പ്രവർത്തിക്കുന്നതിന് ചില ലെൻസുകൾ നിങ്ങളുടെ മുഖം, കൈകൾ, ശബ്ദം എന്നിവയേക്കുറിച്ചുള്ള വിവരങ്ങൾ ഉപയോഗിക്കുന്നു. <a href="${0}" target="_blank">കൂടുതലറിയുക</a>, അംഗീകരിച്ച് തുടരണമെങ്കിൽ ചുവടെ ടാപ്പ് ചെയ്യുക.`),
        legalPromptAccept: `ഞാൻ അംഗീകരിക്കുന്നു`,
        legalPromptReject: `ഡിസ്‌മിസ് ചെയ്യുക`,
        legalPromptTermsOfService: `സേവന വ്യവസ്ഥകൾ`,
        legalPromptVariantGMessage: `ഈ ആപ്പ് അതിന്റെ പ്രവർത്തനത്തിന്, ക്യാമറയും മൈക്രോഫോണും കണ്ടെത്തുന്ന മുഖം(ങ്ങൾ), കൈകളും ശബ്ദവും(ങ്ങളും) എന്നിവയുമായി ബന്ധപ്പെട്ട വിവരങ്ങൾ ഉപയോഗിക്കുന്നു. ഈ ഫീച്ചർ ഉപയോഗിച്ച് നിങ്ങളുടെ സെൽഫികൾക്കും ചിത്രങ്ങൾക്കും മുകളിൽ, ഉപയോഗപ്രദമായ ഓഗ്‌മെന്റഡ് റിയാലിറ്റി ഇഫക്റ്റുകൾ നൽകാനാകും. ഞങ്ങളുടെ ക്യാമറ ചില ഫീച്ചറുകൾ ലൊക്കേറ്റ് ചെയ്യാൻ (ഉദാഹരണത്തിന് നിങ്ങളുടെ കൈകൾ, കണ്ണുകൾ, മൂക്ക് എന്നിവ എവിടെയാണ്) സാങ്കേതികവിദ്യ ഉപയോഗിക്കുന്നു, ക്യാമറ സെൻസ് ചെയ്ത ചിത്രത്തിൽ ഈ ഫീച്ചർ കൃത്യമായി പൊസിഷൻ ചെയ്യാൻ ഈ വിവരങ്ങൾ ഉപയോഗിക്കുകയും ചെയ്യുന്നു. ശേഖരിക്കുന്ന എല്ലാ വിവരങ്ങളും എത്രയും വേഗവും (സാധാരണയായി ആപ്പ് അടച്ചാൽ ഉടൻ) മൂന്ന് വർഷത്തിനുള്ളിലും (എല്ലായ്‌പ്പോഴും) ഇല്ലാതാക്കുന്നു.<br/><br/>അംഗീകരിച്ച് തുടരണമെന്നുണ്ടെങ്കിൽ ചുവടെ ടാപ്പ് ചെയ്യുക.`,
        legalPromptVariantGAdultOrChild: `നിങ്ങൾ ഒരു കുട്ടിയാണോ അതോ മുതിർന്ന വ്യക്തിയാണോ?`,
        legalPromptVariantGFindYourParent: `നിങ്ങളുടെ രക്ഷിതാവിനെയോ നിയമപരമായ രക്ഷിതാവിനെയോ കണ്ടെത്തുക.`,
        legalPromptVariantGIAmGuardian: `ഞാൻ കുട്ടിയുടെ നിയമപരമായ രക്ഷിതാവാണ്`,
        legalPromptVariantGCancel: `റദ്ദാക്കുക`,
        legalPromptVariantGAdult: `മുതിർന്നവ്യക്തി`,
        legalPromptVariantGChild: `കുട്ടി`,
    },
    "mr-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `लेन्सेस वापरून, तुम्ही मान्य करता की तुम्ही Snap चे <a href="${0}" target="_blank">गोपनीयता धोरण</a> वाचले आहे आणि Snap च्या <a href="${0}" target="_blank">सेवा अटींना</a> सहमती देता. काही लेन्सेस कार्य करण्यासाठी तुमचा चेहरा, हात आणि आवाज याविषयी माहिती वापरतात. <a href="${0}" target="_blank">अधिक जाणून घ्या</a> आणि तुम्हाला सहमती देऊन चालू ठेवायचे असल्यास खाली टॅप करा.`),
        legalPromptAccept: `मी सहमत आहे`,
        legalPromptReject: `दुर्लक्ष करा`,
        legalPromptTermsOfService: `सेवा अटी`,
        legalPromptVariantGMessage: `हे वैशिष्ट्य कार्य करण्यासाठी कॅमेरा आणि मायक्रोफोनद्वारे तपासलेली चेहरा(चेहरे), हात आणि आवाजाची माहिती वापरते. या वैशिष्ट्यासह, तुम्ही सेल्फी आणि इमेजवर मजेशीर आणि उपयोगी ऑग्मेंटेड रिॲलिटी प्रभाव लागू करू शकता. आमचा कॅमेरा काही फीचर्स (जसे की तुमचे हात, डोळे आणि नाक कुठे आहेत) शोधण्यासाठी तंत्रज्ञान वापरतो आणि कॅमेऱ्याद्वारे ओळखलेल्या इमेजसह फीचर नेमक्या ठिकाणी दाखवण्यासाठी ती माहिती वापरतो. गोळा केलेली कोणतीही माहिती शक्य तितक्या लवकर (सहसा ॲप बंद केल्यावर लगेच) आणि नेहमी तीन वर्षांच्या आत हटवली जाईल.<br/><br/>तुम्हाला सहमती देऊन पुढे चालू ठेवायचे असेल तर, खाली टॅप करा.`,
        legalPromptVariantGAdultOrChild: `तुम्ही प्रौढ आहात किंवा लहान मूल आहात?`,
        legalPromptVariantGFindYourParent: `कृपया तुमचे आईवडील किंवा कायदेशीर पालकांना शोधा.`,
        legalPromptVariantGIAmGuardian: `मी मुलाचा पालक आहे`,
        legalPromptVariantGCancel: `रद्द करा`,
        legalPromptVariantGAdult: `प्रौढ`,
        legalPromptVariantGChild: `मूल`,
    },
    "ms-MY": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Dengan menggunakan Lensa, anda mengakui membaca <a href="${0}" target="_blank">Dasar Privasi</a> Snap dan bersetuju dengan <a href="${0}" target="_blank">Syarat Perkhidmatan</a> Snap. Sesetengan lensa menggunakan maklumat tentang muka anda, tangan dan suara untuk berfungsi. <a href="${0}" target="_blank">Ketahui Lebih Lanjut</a>, dan jika anda mahu bersetuju dan teruskan, ketik di bawah.`),
        legalPromptAccept: `Saya Setuju`,
        legalPromptReject: `Abaikan`,
        legalPromptTermsOfService: `Syarat Perkhidmatan`,
        legalPromptVariantGMessage: `Ciri ini menggunakan maklumat muka, tangan dan suara yang dikesan oleh kamera dan mikrofon untuk berfungsi. Dengan ciri ini, anda boleh menggunakan kesan realiti tambahan yang menyeronokkan dan berguna selain swafoto dan gambar. Kamera kami menggunakan teknologi untuk mengesan ciri tertentu (seperti di mana tangan, mata dan hidung anda) dan menggunakan maklumat tersebut untuk meletakkan ciri dengan tepat dengan imej yang dikesan oleh kamera. Sebarang maklumat yang dikumpul akan dipadamkan dengan segera (kebiasaannya sejurus aplikasi ditutup) dan sentiasa dalam tempoh tidak lebih daripada tiga tahun.<br/><br/>Jika anda bersetuju dan ingin teruskan, ketik dibawah.`,
        legalPromptVariantGAdultOrChild: `Adakah anda seorang dewasa atau kanak-kanak?`,
        legalPromptVariantGFindYourParent: `Sila cari ibu bapa atau penjaga anda yang sah.`,
        legalPromptVariantGIAmGuardian: `Saya penjaga kanak-kanak ini`,
        legalPromptVariantGCancel: `Batal`,
        legalPromptVariantGAdult: `Dewasa`,
        legalPromptVariantGChild: `Kanak-kanak`,
    },
    "nb-NO": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Ved å ta i bruk Linser bekrefter du at du har lest <a href="${0}" target="_blank">personvernbetingelsene</a> og at du godtar <a href="${0}" target="_blank">tjenestevilkårene</a> til Snap. Noen Linser bruker informasjon om ansiktet ditt, hendene dine og stemmen din for å fungere. <a href="${0}" target="_blank">Finn ut mer</a>. Hvis du godtar dette og vil gå videre, klikker du nedenfor.`),
        legalPromptAccept: `Jeg godtar`,
        legalPromptReject: `Avvis`,
        legalPromptTermsOfService: `Tjenestevilkår`,
        legalPromptVariantGMessage: `Denne funksjonen bruker informasjon om ansikter, hender og stemmer som oppdages av kameraet og mikrofonen, for å fungere. Med denne funksjonen kan du legge til artige og nyttige effekter i utvidet virkelighet på selfier og bilder. Kameraet vårt bruker teknologi for å oppdage visse trekk (som hvor hendene, øynene og nesen er), og bruker denne informasjonen til å plassere funksjonen oppå bildet som kameraet har fanget opp. All informasjon som samles inn, blir slettet så snart som mulig (vanligvis rett etter at appen lukkes) og alltid innen maks tre år.<br/><br/>Hvis du ønsker å godta og fortsette, trykker du nedenfor.`,
        legalPromptVariantGAdultOrChild: `Er du en voksen eller et barn?`,
        legalPromptVariantGFindYourParent: `Finn en forelder eller foresatt.`,
        legalPromptVariantGIAmGuardian: `Jeg er barnets foresatt`,
        legalPromptVariantGCancel: `Avbryt`,
        legalPromptVariantGAdult: `Voksen`,
        legalPromptVariantGChild: `Barn`,
    },
    "nl-NL": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Door Lenzen te gebruiken, geef je aan dat je het <a href="${0}" target="_blank">Privacybeleid</a> van Snap hebt gelezen en dat je akkoord gaat met de <a href="${0}" target="_blank">Servicevoorwaarden</a> van Snap. Sommige Lenzen gebruiken informatie over je gezicht, handen en stem om te functioneren. Lees <a href="${0}" target="_blank">meer informatie</a> en tik hieronder als je akkoord gaat en wilt doorgaan.`),
        legalPromptAccept: `Ik ga akkoord`,
        legalPromptReject: `Annuleren`,
        legalPromptTermsOfService: `Servicevoorwaarden`,
        legalPromptVariantGMessage: `Voor de werking van deze functie wordt informatie over gezicht(en), handen en stem(men) gebruikt die door camera en microfoon worden gedetecteerd. Je kunt met deze functie leuke en nuttige augmented reality-effecten op selfies en afbeeldingen plaatsen. Onze camera gebruikt technologie om de locatie te bepalen van bepaalde kenmerken (bijvoorbeeld waar je handen, ogen en neus zich bevinden) en gebruikt die informatie om het kenmerk nauwkeurig te positioneren in de afbeelding die is gedetecteerd met de camera. De verzamelde informatie wordt zo snel mogelijk verwijderd (gewoonlijk kort nadat de app is gesloten) en altijd binnen een periode van maximaal drie jaar.<br/><br/>Tik hieronder als je hiermee akkoord gaat en wilt doorgaan.`,
        legalPromptVariantGAdultOrChild: `Ben je een volwassene of een kind?`,
        legalPromptVariantGFindYourParent: `Vraag toestemming aan een ouder of wettelijke voogd.`,
        legalPromptVariantGIAmGuardian: `Ik ben de voogd van het kind`,
        legalPromptVariantGCancel: `Annuleren`,
        legalPromptVariantGAdult: `Volwassene`,
        legalPromptVariantGChild: `Kind`,
    },
    pa: {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `ਲੈਂਜ਼ਾਂ ਦੀ ਵਰਤੋਂ ਕਰਕੇ, ਤੁਸੀਂ ਇਸ ਗੱਲ ਨੂੰ ਸਵੀਕਾਰ ਕਰਦੇ ਹੋ ਕਿ ਤੁਸੀਂ Snap ਦੀ <a href="${0}" target="_blank">ਪਰਦੇਦਾਰੀ ਬਾਰੇ ਨੀਤੀ</a> ਨੂੰ ਪੜ੍ਹ ਲਿਆ ਹੈ ਅਤੇ ਤੁਸੀਂ Snap ਦੀਆਂ <a href="${0}" target="_blank">ਸੇਵਾ ਦੀਆਂ ਮਦਾਂ</a> ਨਾਲ ਸਹਿਮਤ ਹੋ। ਕੁਝ ਲੈਂਜ਼ ਕੰਮ ਕਰਨ ਲਈ ਤੁਹਾਡੇ ਚਿਹਰੇ, ਹੱਥਾਂ ਅਤੇ ਆਵਾਜ਼ ਨਾਲ ਸੰਬੰਧਿਤ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦੇ ਹਨ। <a href="${0}" target="_blank">ਹੋਰ ਜਾਣੋ</a> ਅਤੇ ਜੇਕਰ ਤੁਸੀਂ ਸਹਿਮਤ ਹੋ ਅਤੇ ਜਾਰੀ ਰੱਖਣਾ ਚਾਹੁੰਦੇ ਹੋ, ਤਾਂ ਹੇਠਾਂ ਟੈਪ ਕਰੋ।`),
        legalPromptAccept: `ਮੈਂ ਸਹਿਮਤ ਹਾਂ`,
        legalPromptReject: `ਖ਼ਾਰਜ ਕਰੋ`,
        legalPromptTermsOfService: `ਸੇਵਾ ਦੀਆਂ ਮਦਾਂ`,
        legalPromptVariantGMessage: `ਕੰਮ ਕਰਨ ਲਈ ਇਹ ਸੁਵਿਧਾ ਕੈਮਰੇ ਅਤੇ ਮਾਈਕ੍ਰੋਫ਼ੋਨ ਨਾਲ ਚਿਹਰੇ(ਚਿਹਰਿਆਂ), ਹੱਥਾਂ ਅਤੇ ਆਵਾਜ਼(ਆਵਾਜ਼ਾਂ) ਬਾਰੇ ਲਈ ਗਈ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦੀ ਹੈ। ਇਸ ਸੁਵਿਧਾ ਨਾਲ, ਤੁਸੀਂ ਸੈਲਫ਼ੀਆਂ ਅਤੇ ਚਿੱਤਰਾਂ ਉੱਪਰ ਮਜ਼ੇਦਾਰ ਅਤੇ ਲਾਭਕਾਰੀ ਵਧਾਈ ਗਈ ਹਕੀਕਤ ਵਾਲੇ ਪ੍ਰਭਾਵ ਲਾਗੂ ਕਰ ਸਕਦੇ ਹੋ। ਸਾਡਾ ਕੈਮਰਾ ਕੁਝ ਸੁਵਿਧਾਵਾਂ (ਜਿਵੇਂ ਕਿ ਤੁਹਾਡੇ ਹੱਥ, ਅੱਖਾਂ ਅਤੇ ਨੱਕ ਕਿੱਥੇ ਹਨ) ਦਾ ਪਤਾ ਲਗਾਉਣ ਲਈ ਤਕਨਾਲੋਜੀ ਦੀ ਵਰਤੋਂ ਕਰਦਾ ਹੈ ਅਤੇ ਕੈਮਰੇ ਦੁਆਰਾ ਸੰਵੇਦਿਤ ਚਿੱਤਰ ਦੇ ਨਾਲ ਸੁਵਿਧਾ ਦੀ ਸਹੀ ਸਥਿਤੀ ਲਈ ਉਸ ਜਾਣਕਾਰੀ ਦੀ ਵਰਤੋਂ ਕਰਦਾ ਹੈ। ਇਕੱਠੀ ਕੀਤੀ ਜਾਣ ਵਾਲੀ ਕੋਈ ਵੀ ਜਾਣਕਾਰੀ ਜਿੰਨੀ ਜਲਦੀ ਹੋ ਸਕੇ ਮਿਟਾ ਦਿੱਤੀ ਜਾਵੇਗੀ (ਆਮ ਤੌਰ \'ਤੇ ਐਪ ਬੰਦ ਹੋਣ ਤੋਂ ਤੁਰੰਤ ਬਾਅਦ) ਅਤੇ ਹਮੇਸ਼ਾ ਤਿੰਨ ਸਾਲਾਂ ਦੇ ਅੰਦਰ।<br/><br/>ਜੇਕਰ ਤੁਸੀਂ ਸਹਿਮਤ ਹੋਣਾ ਅਤੇ ਜਾਰੀ ਰੱਖਣਾ ਚਾਹੁੰਦੇ ਹੋ, ਤਾਂ ਹੇਠਾਂ ਟੈਪ ਕਰੋ।`,
        legalPromptVariantGAdultOrChild: `ਕੀ ਤੁਸੀਂ ਬਾਲਗ ਹੋ ਜਾਂ ਬੱਚਾ ਹੋ?`,
        legalPromptVariantGFindYourParent: `ਕਿਰਪਾ ਕਰਕੇ ਆਪਣੇ ਮਾਤਾ-ਪਿਤਾ ਜਾਂ ਕਾਨੂੰਨੀ ਸਰਪ੍ਰਸਤ ਲੱਭੋ।`,
        legalPromptVariantGIAmGuardian: `ਮੈਂ ਬੱਚੇ ਦਾ ਸਰਪ੍ਰਸਤ ਹਾਂ`,
        legalPromptVariantGCancel: `ਰੱਦ ਕਰੋ`,
        legalPromptVariantGAdult: `ਬਾਲਗ`,
        legalPromptVariantGChild: `ਬੱਚਾ`,
    },
    "pl-PL": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Korzystając z nakładek, potwierdzasz zapoznanie się z <a href="${0}" target="_blank">Polityką prywatności</a> i akceptujesz <a href="${0}" target="_blank">Regulamin usługi</a>. Niektóre nakładki wykorzystują informacje o Twojej twarzy, dłoniach i głosie, aby działać poprawnie. <a href="${0}" target="_blank">Dowiedz się więcej</a>, a jeśli chcesz wyrazić zgodę i kontynuować, stuknij poniżej.`),
        legalPromptAccept: `Zgadzam się`,
        legalPromptReject: `Odrzuć`,
        legalPromptTermsOfService: `Regulamin`,
        legalPromptVariantGMessage: `Ta funkcja wykorzystuje do działania informacje o twarzy (twarzach), rękach i głosie (głosach) wykrytych przez kamerę i mikrofon. Dzięki niej możesz nakładać na selfie i zdjęcia zabawne i przydatne efekty rozszerzonej rzeczywistości. Nasza kamera wykorzystuje technologię do lokalizowania określonych cech (takich jak miejsce, w którym znajdują się Twoje ręce, oczy i nos) i wykorzystuje te informacje do dokładnego umiejscowienia danej cechy na obrazie wykrywanym przez kamerę. Wszelkie zebrane informacje zostaną usunięte możliwie jak najszybciej (zazwyczaj wkrótce po zamknięciu aplikacji) i zawsze nie później niż w ciągu trzech lat.<br/><br/>Jeśli chcesz wyrazić zgodę i kontynuować, stuknij poniżej.`,
        legalPromptVariantGAdultOrChild: `Jesteś osobą dorosłą czy dzieckiem?`,
        legalPromptVariantGFindYourParent: `Zwróć się do swojego rodzica lub opiekuna prawnego.`,
        legalPromptVariantGIAmGuardian: `Jestem opiekunem prawnym dziecka`,
        legalPromptVariantGCancel: `Anuluj`,
        legalPromptVariantGAdult: `Osoba dorosła`,
        legalPromptVariantGChild: `Dziecko`,
    },
    "pt-BR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Ao usar as Lentes, você reconhece ter lido a <a href="${0}" target="_blank">Política de Privacidade</a> da Snap e concorda com os <a href="${0}" target="_blank">Termos de Serviço</a> da Snap. Algumas Lentes usam informações sobre seu rosto, mãos e voz para funcionar. <a href="${0}" target="_blank">Saiba mais</a> e, se quiser concordar e continuar, toque abaixo.`),
        legalPromptAccept: `Eu concordo`,
        legalPromptReject: `Recusar`,
        legalPromptTermsOfService: `Termos de Serviço`,
        legalPromptVariantGMessage: `Este recurso usa informações sobre rosto(s), mãos e voz(es) detectados pela câmera e pelo microfone para funcionar. Com este recurso, você pode aplicar efeitos divertidos e úteis de realidade aumentada em selfies e imagens. Nossa câmera usa tecnologia para localizar certos recursos (como onde estão suas mãos, olhos e nariz) e usa esta informação para posicionar corretamente o recurso na imagem detectada pela câmera. Qualquer informação coletada será apagada o mais rápido possível (geralmente logo depois que o aplicativo é fechado) e sempre antes de três dias.<br/><br/>Se você quiser concordar e continuar, toque abaixo.`,
        legalPromptVariantGAdultOrChild: `Você é adulto ou criança?`,
        legalPromptVariantGFindYourParent: `Localize seu pai/mãe ou representante legal.`,
        legalPromptVariantGIAmGuardian: `Sou representante da criança`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Criança`,
    },
    "pt-PT": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Ao utilizares as Lentes, confirmas a leitura da <a href="${0}" target="_blank">Política de Privacidade</a> da Snap e aceitas as <a href="${0}" target="_blank">Condições de Serviço</a> da Snap. Algumas Lentes utilizam informações sobre a tua cara, mãos e voz para funcionarem. <a href="${0}" target="_blank">Obtém mais informações</a> e, se quiseres aceitar e continuar, toca abaixo.`),
        legalPromptAccept: `Aceito`,
        legalPromptReject: `Fechar`,
        legalPromptTermsOfService: `Condições de Serviço`,
        legalPromptVariantGMessage: `Esta funcionalidade utiliza informações relacionadas com caras, mãos e vozes detetadas pela câmara e o microfone para poder funcionar. Com esta funcionalidade, pode aplicar efeitos de realidade aumentada de forma divertida e útil a selfies e imagens. A nossa câmara recorre a tecnologia para localizar determinadas caraterísticas (como a localização das tuas mãos, dos olhos e do nariz) e utiliza essas informações para posicionar de forma precisa a caraterística na imagem captada pela câmara. Quaisquer informações recolhidas serão eliminadas logo que possível (normalmente pouco depois de a app ser fechada) e nunca após um máximo de três anos. <br/><br/>Se quiser aceitar e continuar, toque abaixo.`,
        legalPromptVariantGAdultOrChild: `És um adulto ou uma criança?`,
        legalPromptVariantGFindYourParent: `Recorre ao teus pais ou ao(à) teu(tua) representante legal`,
        legalPromptVariantGIAmGuardian: `Sou o(a) representante da criança`,
        legalPromptVariantGCancel: `Cancelar`,
        legalPromptVariantGAdult: `Adulto`,
        legalPromptVariantGChild: `Criança`,
    },
    "ro-RO": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Dacă folosești lentile, confirmi că ai citit <a href="${0}" target="_blank">Politica de confidențialitate</a> Snap și că ești de acord cu <a href="${0}" target="_blank">Condițiile de utilizare</a> Snap. Unele lentile folosesc informații despre fața ta, despre mâinile tale și despre vocea ta pentru a funcționa. <a href="${0}" target="_blank">Află mai multe</a>, iar dacă dorești să accepți și să continui, atinge dedesubt.`),
        legalPromptAccept: `Accept`,
        legalPromptReject: `Respinge`,
        legalPromptTermsOfService: `Termeni de utilizare`,
        legalPromptVariantGMessage: `Pentru a rula, funcția utilizează informații despre chipul tău, mâinile tale și vocea ta detectate de cameră și microfon. Cu ajutorul acestei funcții, poți să aplici efecte de realitate augumentată amuzante și utile peste selfie-uri și imagini. Camera noastră folosește tehnologia pentru a găsi anumite caracteristici (de exemplu, unde se află mâinile, ochii și nasul tău) și utilizează aceste informații pentru a poziționa corect funcția în imaginea detectată de cameră. Toate informațiile colectate sunt șterse cât mai curând posibil (de obicei, la scurt timp după ce se închide aplicația), limita maximă fiind de trei ani.<br/><br/>Dacă ești de acord și dorești să continui, atinge mai jos.`,
        legalPromptVariantGAdultOrChild: `Ești adult sau copil?`,
        legalPromptVariantGFindYourParent: `Este necesară prezența părintelui sau a tutorelui.`,
        legalPromptVariantGIAmGuardian: `Sunt tutorele copilului`,
        legalPromptVariantGCancel: `Anulează`,
        legalPromptVariantGAdult: `Adult`,
        legalPromptVariantGChild: `Copil`,
    },
    "ru-RU": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Используя линзы, вы подтверждаете, что прочитали <a href="${0}" target="_blank">Политику конфиденциальности</a> Snap и принимаете <a href="${0}" target="_blank">Условия оказания услуг</a>. Для работы некоторых линз необходимы сведения о вашем лице, руках и голосе. <a href="${0}" target="_blank">Подробнее</a>. Если вы согласны продолжать, нажмите ниже.`),
        legalPromptAccept: `Принимаю`,
        legalPromptReject: `Закрыть`,
        legalPromptTermsOfService: `Условия оказания услуг`,
        legalPromptVariantGMessage: `Для работы этой функции используется регистрируемая камерой и микрофоном информация о лицах, руках и голосах. С её помощью к селфи и изображениям можно применять забавные и полезные эффекты дополненной реальности. Наша камера использует технологию, чтобы определять расположение конкретных элементов (например, ваших рук, глаз и носа), и использует эту информацию для точного наложения функции на изображение, которое уловила камера. Вся полученная информация удаляется в кратчайшие сроки (как правило, вскоре после закрытия приложения), но не позднее, чем через три года.<br/><br/>Если вы согласны и хотите продолжить, нажмите ниже.`,
        legalPromptVariantGAdultOrChild: `Вы ― взрослый или ребёнок?`,
        legalPromptVariantGFindYourParent: `Позовите родителя или законного опекуна.`,
        legalPromptVariantGIAmGuardian: `Я ― законный опекун ребёнка`,
        legalPromptVariantGCancel: `Отмена`,
        legalPromptVariantGAdult: `Взрослый`,
        legalPromptVariantGChild: `Ребёнок`,
    },
    "sv-SE": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Genom att använda linser intygar du att du har läst Snaps <a href="${0}" target="_blank">sekretessvillkor</a> och godkänner Snaps <a href="${0}" target="_blank">användarvillkor</a>. Vissa linser använder information om ditt ansikte, dina händer och din röst för att fungera. <a href="${0}" target="_blank">Läs mer</a> och om du vill godkänna och fortsätta så trycker du nedan.`),
        legalPromptAccept: `Jag godkänner`,
        legalPromptReject: `Avvisa`,
        legalPromptTermsOfService: `Användarvillkor`,
        legalPromptVariantGMessage: `För att fungera använder funktionen information om ansikte(n), händer och röst(er) som upptäckts av kameran och mikrofonen. Funktionen gör att du kan tillämpa roliga och användbara AR-effekter över selfies och bilder. Med hjälp av teknik kan vår kamera lokalisera vissa särdrag (som dina händer, ögon och din näsa). Informationen används sedan för att korrekt positionera funktionen över bilden som kameran fångat upp. All information som samlats in raderas så snart som möjligt (vanligtvis inom kort efter att appen stängts) och alltid inom tre år.<br/><br/>Tryck nedan om du vill godkänna och fortsätta.`,
        legalPromptVariantGAdultOrChild: `Är du vuxen eller ett barn?`,
        legalPromptVariantGFindYourParent: `Leta upp din förälder eller vårdnadshavare`,
        legalPromptVariantGIAmGuardian: `Jag är barnets vårdnadshavare`,
        legalPromptVariantGCancel: `Avbryt`,
        legalPromptVariantGAdult: `Vuxen`,
        legalPromptVariantGChild: `Barn`,
    },
    "ta-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `லென்ஸஸைப் பயன்படுத்துவதன் மூலம், நீங்கள் Snap இன் <a href="${0}" target="_blank">தனியுரிமைக் கொள்கையைப்</a> படித்துவிட்டதாக ஒப்புக்கொள்கிறீர்கள் மற்றும் Snap இன் <a href="${0}" target="_blank">சேவை நிபந்தனைகளை</a> ஏற்றுக்கொள்கிறீர்கள். சில லென்ஸஸ் வேலை செய்வதற்கு உங்கள் முகம், கைகள் மற்றும் குரலைப் பற்றிய தகவல்களைப் பயன்படுத்துகின்றன. <a href="${0}" target="_blank">மேலும் அறிக</a>, நீங்கள் ஒப்புக்கொண்டு தொடர விரும்பினால், கீழே தட்டுங்கள்.`),
        legalPromptAccept: `ஏற்கிறேன்`,
        legalPromptReject: `நிராகரி`,
        legalPromptTermsOfService: `சேவை நிபந்தனைகள்`,
        legalPromptVariantGMessage: `இந்த அம்சம் வேலை செய்ய கேமரா மற்றும் மைக்ரோஃபோனால் கண்டறியப்படும் முகம் (முகங்கள்), கைகள் மற்றும் குரல்(கள்) பற்றிய தகவல்களைப் பயன்படுத்துகிறது. இந்த அம்சத்தின் மூலம் நீங்கள் செல்ஃபிக்கள் மற்றும் படங்களில் வேடிக்கையான மற்றும் பயனுள்ள இணைப்பு நிஜமாக்கத்தைப் பயன்படுத்தலாம். எங்கள் கேமரா சில அம்சங்களைக் கண்டறிய (எடுத்துக்காட்டாக, உங்கள் கைகள், கண்கள், மூக்கு போன்றவை எங்கு உள்ளன என்று கண்டறிய) தொழில்நுட்பத்தைப் பயன்படுத்துகிறது, கேமராவால் கண்காணிக்கப்படும் படத்தில் அம்சத்தைத் துல்லியமாக வைக்க அந்தத் தகவல்களைப் பயன்படுத்துகிறது. திரட்டப்படும் எந்தத் தகவலும் இயன்றவரை விரைவாக நீக்கப்படும் (பொதுவாக, செயலி மூடப்பட்டவுடன்). மேலும், இது எப்போதும் மூன்று ஆண்டுகளுக்கு மேல் சேமிக்கப்படுவதில்லை.<br/><br/>நீங்கள் ஏற்றுக்கொண்டு தொடர விரும்பினால், கீழே தட்டுங்கள்.`,
        legalPromptVariantGAdultOrChild: `நீங்கள் வயதுவந்தவரா அல்லது சிறுவரா?`,
        legalPromptVariantGFindYourParent: `உங்கள் பெற்றோர் அல்லது சட்டப்பூர்வப் பாதுகாவலரைக் கண்டறியுங்கள்.`,
        legalPromptVariantGIAmGuardian: `நான் குழந்தையின் பாதுகாவலர்`,
        legalPromptVariantGCancel: `ரத்துசெய்`,
        legalPromptVariantGAdult: `வயதுவந்தவர்`,
        legalPromptVariantGChild: `சிறுவர்`,
    },
    "te-IN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `లెన్సెస్‌ను ఉపయోగించడం ద్వారా, మీరు Snap యొక్క <a href="${0}" target="_blank">గోప్యతా విధానాన్ని</a> చదివినట్లు అంగీకరిస్తున్నారు మరియు Snap <a href="${0}" target="_blank">సేవా నిబంధనలకు</a> అంగీకరిస్తున్నారు. కొన్ని లెన్సెస్ పని చేయడానికి మీ ముఖం, చేతులు మరియు వాయిస్ గురించిన సమాచారాన్ని ఉపయోగిస్తాయి. <a href="${0}" target="_blank">మరింత తెలుసుకోండి</a>, మీరు అంగీకరించి కొనసాగించాలనుకుంటే, దిగువన ట్యాప్ చేయండి.`),
        legalPromptAccept: `నేను అంగీకరిస్తున్నాను`,
        legalPromptReject: `డిస్మిస్ చేయండి`,
        legalPromptTermsOfService: `సేవా నిబంధనలు`,
        legalPromptVariantGMessage: `ఈ ఫీచర్ పని చేయడానికి కెమెరా మరియు మైక్రోఫోన్ ద్వారా గుర్తించబడిన ముఖం(లు), చేతులు మరియు వాయిస్(ల) గురించిన సమాచారాన్ని ఉపయోగిస్తుంది. ఈ ఫీచర్‌తో, మీరు సెల్ఫీలు, చిత్రాల పైన ఆహ్లాదకరమైన మరియు ఉపయోగకరమైన ఆగ్మెంటేడ్ రియాలిటీ ప్రభావాలను వర్తింపజేసుకోవచ్చు. మా కెమెరా నిర్దిష్ట ఫీచర్‌లను (మీ చేతులు, కళ్ళు మరియు ముక్కు ఎక్కడ ఉన్నాయో) గుర్తించడానికి సాంకేతికతను ఉపయోగిస్తుంది మరియు కెమెరా ద్వారా గ్రహించబడిన చిత్రంతో ఫీచర్‌ను ఖచ్చితంగా ఉంచడానికి ఆ సమాచారాన్ని ఉపయోగిస్తుంది. సేకరించిన ఏదైనా సమాచారం వీలైనంత త్వరగా (సాధారణంగా యాప్ మూసివేయబడిన వెంటనే) మరియు ఎల్లప్పుడూ మూడు సంవత్సరాలలోపు డిలీట్ చేయబడుతుంది.<br/><br/>మీరు అంగీకరించి కొనసాగించాలనుకుంటే, దిగువున ట్యాప్ చేయండి.`,
        legalPromptVariantGAdultOrChild: `మీరు పెద్దవారా లేదా చిన్నవారా?`,
        legalPromptVariantGFindYourParent: `దయచేసి మీ తల్లిదండ్రులు లేదా చట్టపరమైన సంరక్షకుడిని కనుగొనండి.`,
        legalPromptVariantGIAmGuardian: `నేను పిల్లవాడి సంరక్షకుడిని`,
        legalPromptVariantGCancel: `రద్దు`,
        legalPromptVariantGAdult: `వయోజనుడు`,
        legalPromptVariantGChild: `పిల్లవాడు`,
    },
    "th-TH": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `การใช้เลนส์แสดงว่าคุณยอมรับว่าคุณได้อ่าน <a href="${0}" target="_blank">นโยบายความเป็นส่วนตัว</a> ของ Snap และตกลงยอมรับ <a href="${0}" target="_blank">ข้อกำหนดการให้บริการ</a> ของ Snap เลนส์บางรายการต้องใช้ข้อมูลเกี่ยวกับใบหน้า มือ และเสียงของคุณจึงจะสามารถทำงานได้ <a href="${0}" target="_blank">เรียนรู้เพิ่มเติม</a> และหากคุณต้องการตกลงยอมรับและดำเนินการต่อ ให้แตะที่ด้านล่าง`),
        legalPromptAccept: `ฉันตกลงยอมรับ`,
        legalPromptReject: `เพิกเฉย`,
        legalPromptTermsOfService: `ข้อกำหนดการให้บริการ`,
        legalPromptVariantGMessage: `ฟีเจอร์นี้ใช้ข้อมูลเกี่ยวกับใบหน้า มือ และเสียงซึ่งตรวจจับโดยใช้กล้องและไมโครโฟน เมื่อใช้ฟีเจอร์นี้ คุณสามารถใช้เอฟเฟกต์ความเป็นจริงเสริม (AR) ที่ทั้งสนุกและมีประโยชน์เมื่อใช้กับภาพเซลฟีและรูปภาพ กล้องของเราใช้เทคโนโลยีเพื่อระบุตำแหน่งของฟีเจอร์บางอย่าง (เช่น ตำแหน่งของมือ ตา และจมูกของคุณ) และใช้ข้อมูลดังกล่าวเพื่อให้วางตำแหน่งฟีเจอร์ได้อย่างถูกต้องลงบนรูปภาพที่ตรวจจับโดยใช้กล้อง เราจะลบข้อมูลต่าง ๆ ที่รวบรวมไว้โดยเร็วที่สุดเท่าที่จะทำได้ (ส่วนใหญ่จะเป็นช่วงหลังจากที่ปิดแอปแล้วไม่นาน) และจะไม่เกินกว่าระยะเวลาสามปี<br/><br/>หากคุณต้องการตกลงยอมรับและดำเนินการต่อ ให้แตะที่ด้านล่างนี้`,
        legalPromptVariantGAdultOrChild: `คุณเป็นผู้ใหญ่หรือเด็ก?`,
        legalPromptVariantGFindYourParent: `โปรดค้นหาพ่อแม่หรือผู้ปกครองตามกฎหมายของคุณ`,
        legalPromptVariantGIAmGuardian: `ฉันเป็นผู้ปกครองของเด็ก`,
        legalPromptVariantGCancel: `ยกเลิก`,
        legalPromptVariantGAdult: `ผู้ใหญ่`,
        legalPromptVariantGChild: `เด็ก`,
    },
    "tr-TR": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Lensleri kullanarak, Snap\'in <a href="${0}" target="_blank">Gizlilik Politikası</a> içeriğini okuduğunu doğrulamış ve Snap\'in <a href="${0}" target="_blank">Kullanım Şartları</a> içeriğini kabul etmiş olursun. Bazı lenslerin çalışması için yüzün, ellerin ve sesinle ilgili bilgiler kullanılır. <a href="${0}" target="_blank">Daha Fazlasını Öğren</a> ve kabul edip devam etmek istiyorsan aşağıya dokun.`),
        legalPromptAccept: `Kabul Ediyorum`,
        legalPromptReject: `Yoksay`,
        legalPromptTermsOfService: `Kullanım Şartları`,
        legalPromptVariantGMessage: `Bu özelliğin çalışması için kamera ve mikrofon tarafından algılanan yüzler, eller ve sesler hakkındaki bilgiler kullanılır. Bu özellik sayesinde selfie\'lerin ve görüntülerin üzerine eğlenceli ve kullanışlı artırılmış gerçeklik efektleri uygulayabilirsin. Kameramız, belirli özellikleri (ellerinin, gözlerinin ve burnunun nerede olduğu gibi) bulmak için teknolojiden yararlanır ve bu bilgileri, kamera tarafından algılanan görüntüyle özelliği doğru şekilde konumlandırmak için kullanır. Toplanan tüm bilgiler mümkün olan en kısa sürede (genellikle uygulama kapatıldıktan kısa süre sonra) ve mutlaka en fazla üç yıl içinde silinir.<br/><br/>Kabul edip devam etmek istiyorsan aşağıya dokun.`,
        legalPromptVariantGAdultOrChild: `Yetişkin mi yoksa çocuk musun?`,
        legalPromptVariantGFindYourParent: `Lütfen ebeveynini veya yasal vasini bul.`,
        legalPromptVariantGIAmGuardian: `Ben çocuğun vasisiyim`,
        legalPromptVariantGCancel: `İptal Et`,
        legalPromptVariantGAdult: `Yetişkin`,
        legalPromptVariantGChild: `Çocuk`,
    },
    "ur-PK": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `لینزز استعمال کرنے کا مطلب ہے کہ آپ Snap کی <a href="${0}" target="_blank">پرائیویسی پالیسی</a> پڑھنے کا اعتراف کرتے ہیں اور Snap کی <a href="${0}" target="_blank">سروس کی شرائط</a> سے متفق ہیں۔ کچھ لینزز کام کرنے کیلئے آپ کے چہرے، ہاتھوں اور آواز کے بارے میں معلومات استعمال کرتے ہیں۔ <a href="${0}" target="_blank">مزید جانیں</a> اور اگر آپ متفق ہیں اور جاری رکھنا چاہتے ہیں تو ذیل میں ٹیپ کریں۔`),
        legalPromptAccept: `میں متفق ہوں`,
        legalPromptReject: `برخاست کریں`,
        legalPromptTermsOfService: `سروس کی شرائط`,
        legalPromptVariantGMessage: `یہ خصوصیت کام کرنے کیلئے چہرہ (چہرے)، ہاتھوں اور آوازوں کے بارے میں معلومات استعمال کرتی ہے جن کا پتا کیمرے اور مائیکرو فون کے ذریعے لگایا جاتا ہے۔ اس خصوصیت کے ساتھ، آپ سیلفیز اور تصاویر پر دلچسپ اور کارآمد افزودہ حقیقت کے ایفیکٹس کا اطلاق کر سکتے ہیں۔ ہمارا کیمرا مخصوص خصوصیات کے لوکیشن کا تعین کرنے (جیسے کہ آپ کے ہاتھ، آنکھیں اور ناک کہاں ہیں) کیلئے ٹیکنالوجی استعمال کرتا ہے اور ان معلومات کی مدد سے خصوصیت کو کیمرا کی جانب سے محسوس کی گئی تصویر کے ساتھ درست طور پر پوزیشن کرتا ہے۔ اکٹھی کی گئی کوئی بھی معلومات جلد از جلد ڈیلیٹ ہو جائیں گی (عموماً ایپ بند ہونے کے فوراً بعد) نیز ہر صورت میں تین سال کے اندر ڈیلیٹ ہو جائیں گی۔<br/><br/>اگر آپ اتفاق کرنا اور جاری رکھنا چاہتے ہیں تو ذیل میں ٹیپ کریں۔`,
        legalPromptVariantGAdultOrChild: `کیا آپ ایک بالغ یا بچہ ہیں؟`,
        legalPromptVariantGFindYourParent: `براہ کرم اپنے والد/والدہ یا قانونی سرپرست کو تلاش کریں۔`,
        legalPromptVariantGIAmGuardian: `میں بچہ کا/کی سرپرست ہوں`,
        legalPromptVariantGCancel: `منسوخ کریں`,
        legalPromptVariantGAdult: `بالغ`,
        legalPromptVariantGChild: `بچہ`,
    },
    "vi-VN": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `Bằng cách sử dụng Ống Kính, bạn xác nhận đã đọc <a href="${0}" target="_blank">Chính Sách Bảo Mật</a> của Snap và đồng ý với <a href="${0}" target="_blank">Điều Khoản Dịch Vụ</a>của Snap. Một số ống kính sử dụng thông tin về khuôn mặt, bàn tay và giọng nói của bạn để hoạt động. Bạn có thể <a href="${0}" target="_blank">Tìm Hiểu Thêm</a>, còn nếu bạn muốn đồng ý và tiếp tục, hãy chạm vào bên dưới.`),
        legalPromptAccept: `Tôi Đồng Ý`,
        legalPromptReject: `Bỏ Qua`,
        legalPromptTermsOfService: `Điều Khoản Dịch Vụ`,
        legalPromptVariantGMessage: `Tính năng này hoạt động dựa trên việc sử dụng thông tin về khuôn mặt, bàn tay và giọng nói mà camera và micrô phát hiện được. Bạn có thể sử dụng tính năng này để áp dụng các hiệu ứng thực tế tăng cường thú vị và hữu ích lên ảnh tự sướng và hình ảnh. Camera của chúng tôi áp dụng công nghệ để tìm những đặc điểm nhất định (chẳng hạn như vị trí bàn tay, mắt và mũi của bạn), rồi sử dụng thông tin đó để xác định chính xác vị trí của đặc điểm trong hình ảnh mà camera chụp được. Chúng tôi sẽ xóa mọi thông tin được thu thập sớm nhất có thể (thường ngay sau khi bạn đóng ứng dụng) và luôn xóa trong khoảng thời gian không quá ba năm.<br/><br/>Nếu bạn muốn đồng ý và tiếp tục, hãy chạm vào bên dưới.`,
        legalPromptVariantGAdultOrChild: `Bạn là người lớn hay trẻ em?`,
        legalPromptVariantGFindYourParent: `Vui lòng tìm phụ huynh hoặc người giám hộ hợp pháp.`,
        legalPromptVariantGIAmGuardian: `Tôi là người giám hộ của trẻ`,
        legalPromptVariantGCancel: `Hủy Bỏ`,
        legalPromptVariantGAdult: `Người lớn`,
        legalPromptVariantGChild: `Trẻ em`,
    },
    "zh-Hans": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `使用特效镜头，即表示你确认已经阅读 Snap 的<a href="${0}" target="_blank">隐私政策</a>，并同意 Snap 的<a href="${0}" target="_blank">服务条款</a>。一些特效镜头需要使用有关你的脸、手和声音的信息才能正常工作。<a href="${0}" target="_blank">了解更多</a>，如果你同意并继续，请点击下面。`),
        legalPromptAccept: `我同意`,
        legalPromptReject: `忽略`,
        legalPromptTermsOfService: `服务条款`,
        legalPromptVariantGMessage: `此功能会使用相机和麦克风检测到的面部、手部和声音信息。使用此功能，你可以对自拍照和图片应用有趣和有用的增强现实效果。我们的相机会使用技术，定位某些特征信息（例如：你的手、眼睛和鼻子的位置），并使用这些信息和相机感知到的图像来准确定位这些特征。收集的所有信息都将尽快删除（通常在应用关闭后不久），最久不会超过三年。<br/><br/>如果你同意并想继续，请点击下方。`,
        legalPromptVariantGAdultOrChild: `你是成人还是儿童？`,
        legalPromptVariantGFindYourParent: `请通知你的家长或法定监护人。`,
        legalPromptVariantGIAmGuardian: `我是这名儿童的监护人`,
        legalPromptVariantGCancel: `取消`,
        legalPromptVariantGAdult: `成人`,
        legalPromptVariantGChild: `儿童`,
    },
    "zh-Hant": {
        legalPromptMessage: main_legalPromptMessage((tag) => tag `使用特效鏡頭，代表你已閱讀 Snap 的<a href="${0}" target="_blank">隱私政策</a>並同意 Snap 的<a href="${0}" target="_blank">服務條款</a>。有些特效鏡頭需使用你的臉部、手部和聲音資訊才能運作。<a href="${0}" target="_blank">請按這裡以了解更多資訊</a>，如果你同意並想繼續使用功能，請點按下方。`),
        legalPromptAccept: `我同意`,
        legalPromptReject: `略過`,
        legalPromptTermsOfService: `服務條款`,
        legalPromptVariantGMessage: `這個功能會使用相機和麥克風偵測到的臉部、手部和聲音資訊來進行運作。使用這個功能，你可以針對自拍照和圖片套用好玩和有作用的擴增實境效果。我們的相機會使用科技技術，定位某些特徵資訊 (例如：你的手、眼睛和鼻子的位置)，並使用這些資訊和相機感應到的影像來正確地定位這些特徵。所收集的資訊將盡快刪除 (通常會在應用程式關閉後)，最久不會超過三年。<br/><br/>如果你同意並想繼續使用此功能，請點按下方。`,
        legalPromptVariantGAdultOrChild: `你是成人或兒童？`,
        legalPromptVariantGFindYourParent: `請通知你的父母或法定監護人。`,
        legalPromptVariantGIAmGuardian: `我是這個兒童的監護人`,
        legalPromptVariantGCancel: `取消`,
        legalPromptVariantGAdult: `成人`,
        legalPromptVariantGChild: `兒童`,
    },
};
/**
 * --- end of string definitions ---
 */
/**
 * Language codes with a mapping to a corresponding default locale.
 */
const main_languageDefaultLocale = {
    bn: "bn-BD",
    da: "da-DK",
    de: "de-DE",
    el: "el-GR",
    en: "en-US",
    es: "es-ES",
    fi: "fi-FI",
    fil: "fil-PH",
    fr: "fr-FR",
    gu: "gu-IN",
    hi: "hi-IN",
    id: "id-ID",
    it: "it-IT",
    ja: "ja-JP",
    kn: "kn-IN",
    ko: "ko-KR",
    ml: "ml-IN",
    mr: "mr-IN",
    ms: "ms-MY",
    nb: "nb-NO",
    nl: "nl-NL",
    pl: "pl-PL",
    pt: "pt-BR",
    ro: "ro-RO",
    ru: "ru-RU",
    sv: "sv-SE",
    ta: "ta-IN",
    te: "te-IN",
    th: "th-TH",
    tr: "tr-TR",
    ur: "ur-PK",
    vi: "vi-VN",
    zh: "zh-Hans",
};
/**
 * Some locale synonyms that require mapping.
 */
const main_synonyms = {
    "zh-TW": "zh-Hant",
    "zh-CN": "zh-Hans",
};
const main_isLocaleString = (value) => value in main_allStrings;
// Default locale in case a user locale cannot be found.
const main_defaultLocale = "en-US";
/**
 * Gets browser locale and maps it to the closest locale that has a translation.
 */
function main_getSupportedLocale() {
    const locale = main_getPlatformInfo().locale;
    if (main_isLocaleString(locale))
        return locale;
    const synonym = main_synonyms[locale];
    if (synonym && synonym in main_allStrings)
        return synonym;
    const langCode = locale.split("-")[0];
    // Safety: "in" operator ensures that langCode is in allStrings, i.e. is of Locale type.
    if (langCode && langCode in main_allStrings)
        return langCode;
    // Safety: "in" operator ensures that langCode is in languageDefaultLocale.
    if (langCode && langCode in main_languageDefaultLocale)
        return main_languageDefaultLocale[langCode];
    return main_defaultLocale;
}
/**
 * The most closest locale with a translation.
 */
const main_supportedLocale = main_getSupportedLocale();
/**
 * Returns localized string by its ID.
 */
function main_localizedString(stringId) {
    return main_allStrings[main_supportedLocale][stringId];
}
//# sourceMappingURL=localization.js.map
;// ./node_modules/@snap/camera-kit/lib/common/dialog.js

const main_stylesCss = `
dialog {
    display: flex;
    flex-direction: column;

    background-color: #fff;
    border: #efefef 1px solid;
    border-radius: 20px;
    box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.3);

    max-width: 80vw;
    max-height: 80vh;
    padding: 44px 0 24px 0;

    font-size: 16px;
    font-family: sans-serif;
    font-style: normal;
    font-weight: 600;
    line-height: 24px;
}

dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.4);
}

.title {
    color: #16191C;
    padding: 0 32px;
    text-align: center;
}

.body {
    color: #656D78;
    font-size: 14px;
    font-weight: 500;
    margin-top: 16px;
    max-width: 350px;
    padding: 0 32px;
    overflow: auto;
}

a {
    color: rgb(78, 171, 248);
}

button {
    cursor: pointer;
}

button.dismiss {
    position: absolute;
    top: 7px;
    right: 7px;
    padding: 0;
    height: 36px;
    width: 36px;
    margin: 0;
    background-color: transparent;
    border: 0;
}

button.dismiss svg {
    fill: black;
}

.buttons {
    margin-top: 8px;
    padding: 0 32px;
}

.buttons button {
    background: #0FADFF;
    border: 0;
    border-radius: 25px;

    width: 100%;
    padding: 1rem;
    margin-top: 8px;

    color: #fff;
    font-weight: inherit;
    font-family: inherit;
    font-size: inherit;
    font-style: inherit;
}

.buttons button.secondary {
    background-color: transparent;
    color: #656D78;
}

// Proper filling of X button in High Contrast themes
@media (forced-colors: active) {
    button.dismiss svg {
        fill: ButtonText;
    }
}
`;
function main_getDismissButtonHtml(button) {
    /* eslint-disable max-len */
    return `
        <button class="dismiss" autofocus data-key=${button.key}>
            <svg xmlns="http://www.w3.org/2000/svg" role="img" width="36" height="36" viewBox="0 0 36 36">
                <title>${button.text}</title>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M12.6763 11.2621C12.2858 10.8716 11.6527 10.8716 11.2621 11.2621C10.8716 11.6527 10.8716 12.2858 11.2621 12.6763L16.5858 18L11.2621 23.3237C10.8716 23.7142 10.8716 24.3474 11.2621 24.7379C11.6527 25.1284 12.2858 25.1284 12.6764 24.7379L18 19.4142L23.3237 24.7379C23.7142 25.1284 24.3474 25.1284 24.7379 24.7379C25.1284 24.3474 25.1284 23.7142 24.7379 23.3237L19.4142 18L24.7379 12.6763C25.1284 12.2858 25.1284 11.6527 24.7379 11.2621C24.3474 10.8716 23.7142 10.8716 23.3237 11.2621L18 16.5858L12.6763 11.2621Z" fill-opacity="0.4"/>
            </svg>
        </button>`;
    /* eslint-enable */
}
function main_getTitleHtml(title) {
    return title ? `<div class="title" role="heading">${title}</div>` : "";
}
function main_getBodyHtml(body) {
    return body ? `<div class="body">${body}</div>` : "";
}
function main_getButtonHtml(button) {
    return `<button data-key="${button.key}"${button.isSecondary ? ` class="secondary"` : ""}>${button.text}</button>`;
}
function main_getButtonsHtml(buttons) {
    if (buttons.length === 0)
        return "";
    return `
        <div class="buttons">
        ${buttons.map((b) => main_getButtonHtml(b)).join("\n")}
        </div>`;
}
function main_setAttribute(element, attr, value) {
    if (value)
        element.setAttribute(attr, value);
}
function main_showDialog(options) {
    return new Promise((res) => {
        var _a, _b, _c;
        const element = document.createElement("div");
        main_setAttribute(element, "data-testid", options.dataTestId);
        const shadow = element.attachShadow({ mode: "open" });
        const style = document.createElement("style");
        shadow.appendChild(style);
        style.innerHTML = main_stylesCss;
        const prompt = document.createElement("dialog");
        main_setAttribute(prompt, "aria-label", (_a = options.titleText) !== null && _a !== void 0 ? _a : options.title);
        main_setAttribute(prompt, "lang", options.lang);
        main_setAttribute(prompt, "dir", "auto");
        shadow.appendChild(prompt);
        prompt.innerHTML = `
            ${main_getDismissButtonHtml({ key: "dismiss", text: (_b = options.dismissButtonText) !== null && _b !== void 0 ? _b : "Dismiss" })}
            ${main_getTitleHtml(options.title)}
            ${main_getBodyHtml(options.body)}
            ${main_getButtonsHtml((_c = options.buttons) !== null && _c !== void 0 ? _c : [])}
        `;
        const buttonsElements = Array.from(prompt.querySelectorAll("button"));
        main_merge(...buttonsElements.map((b) => main_fromEvent(b, "click").pipe(main_map(() => b.dataset.key))), main_fromEvent(prompt, "cancel").pipe(main_map(() => "dismiss")))
            .pipe(main_take(1))
            .subscribe({ next: res, complete: () => element.remove() });
        options.container.appendChild(element);
        prompt.showModal();
    });
}
//# sourceMappingURL=dialog.js.map
;// ./node_modules/@snap/camera-kit/lib/common/hash.js
/**
 * Fast, simple hashing function from github.com/bryc
 * https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js
 */
const main_computeHash = (str) => {
    let h1 = 0xdeadbeef;
    let h2 = 0x41c6ce57;
    for (let i = 0; i < str.length; i++) {
        const ch = str.charCodeAt(i);
        h1 = Math.imul(h1 ^ ch, 2654435761);
        h2 = Math.imul(h2 ^ ch, 1597334677);
    }
    h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
    h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
    return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString(16);
};
//# sourceMappingURL=hash.js.map
;// ./node_modules/@snap/camera-kit/lib/legal/legalPrompt.js






/* eslint-disable max-len */
const main_snapIcon = `
<svg xmlns="http://www.w3.org/2000/svg" role="img" viewBox="0 0 32 32" height="48px">
    <g>
        <path
            d="M 30.898 23.477 C 30.77 23.045 30.148 22.743 30.148 22.743 C 30.092 22.71 30.039 22.684 29.994 22.663 C 28.962 22.161 28.048 21.561 27.277 20.876 C 26.659 20.325 26.128 19.719 25.701 19.074 C 25.182 18.288 24.937 17.632 24.831 17.275 C 24.773 17.043 24.782 16.951 24.831 16.832 C 24.873 16.731 24.99 16.632 25.049 16.588 C 25.397 16.341 25.96 15.976 26.303 15.75 C 26.602 15.556 26.859 15.389 27.009 15.283 C 27.494 14.944 27.824 14.596 28.02 14.223 C 28.275 13.74 28.303 13.208 28.107 12.684 C 27.84 11.978 27.184 11.556 26.35 11.556 C 26.163 11.556 25.974 11.577 25.785 11.62 C 25.308 11.723 24.852 11.894 24.474 12.042 C 24.446 12.054 24.416 12.032 24.418 12.002 C 24.457 11.059 24.502 9.79 24.399 8.584 C 24.306 7.493 24.082 6.576 23.717 5.776 C 23.351 4.972 22.874 4.376 22.5 3.947 C 22.143 3.536 21.519 2.936 20.577 2.394 C 19.251 1.631 17.742 1.244 16.09 1.244 C 14.443 1.244 12.934 1.631 11.605 2.394 C 10.607 2.966 9.97 3.614 9.678 3.947 C 9.304 4.376 8.827 4.972 8.46 5.776 C 8.096 6.576 7.872 7.496 7.778 8.584 C 7.673 9.792 7.715 10.96 7.76 11.999 C 7.762 12.03 7.732 12.051 7.704 12.039 C 7.325 11.892 6.87 11.72 6.393 11.617 C 6.204 11.575 6.012 11.554 5.828 11.554 C 4.994 11.554 4.337 11.976 4.071 12.682 C 3.875 13.205 3.903 13.738 4.157 14.221 C 4.354 14.594 4.685 14.941 5.169 15.281 C 5.318 15.387 5.575 15.553 5.874 15.748 C 6.211 15.968 6.758 16.323 7.108 16.569 C 7.152 16.599 7.299 16.712 7.346 16.827 C 7.397 16.951 7.404 17.045 7.341 17.289 C 7.234 17.648 6.989 18.298 6.479 19.069 C 6.052 19.715 5.522 20.32 4.902 20.871 C 4.132 21.556 3.218 22.157 2.186 22.658 C 2.137 22.682 2.078 22.712 2.015 22.748 C 2.015 22.748 1.399 23.064 1.282 23.472 C 1.109 24.075 1.567 24.64 2.036 24.943 C 2.8 25.438 3.732 25.703 4.272 25.849 C 4.421 25.889 4.559 25.926 4.683 25.964 C 4.76 25.989 4.956 26.062 5.038 26.17 C 5.143 26.306 5.155 26.473 5.192 26.66 C 5.253 26.977 5.384 27.373 5.774 27.643 C 6.204 27.941 6.75 27.962 7.444 27.99 C 8.168 28.018 9.07 28.054 10.1 28.394 C 10.579 28.553 11.011 28.818 11.514 29.128 C 12.56 29.773 13.864 30.578 16.09 30.578 C 18.318 30.578 19.629 29.768 20.685 29.119 C 21.183 28.811 21.612 28.546 22.08 28.391 C 23.11 28.049 24.011 28.014 24.735 27.988 C 25.427 27.962 25.974 27.941 26.404 27.641 C 26.822 27.35 26.943 26.918 26.997 26.59 C 27.027 26.428 27.046 26.285 27.14 26.165 C 27.219 26.064 27.399 25.992 27.483 25.964 C 27.609 25.924 27.751 25.886 27.906 25.844 C 28.445 25.698 29.123 25.527 29.945 25.061 C 30.933 24.511 31.001 23.82 30.898 23.477"
            fill="#ffffff"
            stroke="#00000000"
            stroke-width="1"
        />
    </g>
    <g>
        <path
            d="M 29.56 24.299 C 28.21 25.045 27.312 24.965 26.613 25.414 C 26.021 25.795 26.37 26.618 25.939 26.915 C 25.411 27.279 23.843 26.889 21.822 27.555 C 20.155 28.107 19.09 29.689 16.089 29.689 C 13.081 29.689 12.047 28.114 10.357 27.555 C 8.335 26.889 6.768 27.279 6.24 26.915 C 5.809 26.618 6.16 25.795 5.566 25.414 C 4.869 24.965 3.969 25.045 2.619 24.299 C 1.758 23.825 2.247 23.53 2.532 23.393 C 7.426 21.027 8.204 17.372 8.24 17.096 C 8.282 16.769 8.328 16.509 7.966 16.175 C 7.615 15.853 6.066 14.895 5.636 14.593 C 4.925 14.098 4.612 13.6 4.841 12.99 C 5 12.569 5.395 12.41 5.812 12.41 C 5.94 12.41 6.071 12.426 6.2 12.452 C 6.981 12.623 7.741 13.013 8.179 13.118 C 8.24 13.132 8.293 13.139 8.34 13.139 C 8.574 13.139 8.656 13.022 8.639 12.754 C 8.59 11.9 8.469 10.234 8.602 8.677 C 8.787 6.536 9.477 5.476 10.298 4.538 C 10.693 4.087 12.543 2.133 16.082 2.133 C 19.633 2.133 21.474 4.087 21.867 4.538 C 22.688 5.478 23.378 6.536 23.563 8.677 C 23.698 10.234 23.581 11.898 23.525 12.754 C 23.506 13.034 23.591 13.139 23.825 13.139 C 23.872 13.139 23.925 13.132 23.986 13.118 C 24.426 13.013 25.184 12.62 25.965 12.452 C 26.091 12.424 26.222 12.41 26.353 12.41 C 26.77 12.41 27.165 12.569 27.324 12.99 C 27.555 13.6 27.242 14.095 26.529 14.593 C 26.098 14.892 24.547 15.85 24.199 16.175 C 23.836 16.509 23.883 16.767 23.925 17.096 C 23.96 17.372 24.739 21.025 29.633 23.393 C 29.932 23.53 30.421 23.825 29.56 24.299 M 31.709 23.12 C 31.489 22.523 31.07 22.203 30.594 21.939 C 30.505 21.887 30.423 21.845 30.355 21.812 C 30.212 21.74 30.067 21.667 29.922 21.592 C 28.435 20.806 27.275 19.812 26.469 18.635 C 26.198 18.238 26.008 17.88 25.877 17.587 C 25.809 17.391 25.811 17.281 25.86 17.178 C 25.898 17.101 25.996 17.019 26.05 16.979 C 26.305 16.811 26.57 16.64 26.748 16.525 C 27.067 16.319 27.317 16.156 27.481 16.043 C 28.093 15.617 28.519 15.164 28.786 14.658 C 29.163 13.945 29.21 13.131 28.919 12.363 C 28.517 11.301 27.509 10.642 26.291 10.642 C 26.038 10.642 25.783 10.67 25.527 10.726 C 25.46 10.74 25.394 10.756 25.328 10.773 C 25.34 10.05 25.324 9.278 25.258 8.524 C 25.029 5.872 24.099 4.48 23.129 3.371 C 22.724 2.908 22.021 2.232 20.964 1.628 C 19.491 0.781 17.821 0.356 16 0.356 C 14.185 0.356 12.518 0.781 11.044 1.623 C 9.983 2.229 9.278 2.905 8.875 3.366 C 7.905 4.475 6.975 5.867 6.746 8.52 C 6.68 9.273 6.663 10.045 6.675 10.768 C 6.61 10.752 6.544 10.735 6.476 10.721 C 6.221 10.665 5.965 10.637 5.713 10.637 C 4.494 10.637 3.487 11.297 3.084 12.359 C 2.794 13.126 2.841 13.94 3.218 14.654 C 3.485 15.159 3.911 15.613 4.522 16.039 C 4.686 16.153 4.937 16.314 5.256 16.52 C 5.427 16.633 5.68 16.794 5.926 16.958 C 5.963 16.984 6.097 17.082 6.141 17.173 C 6.193 17.279 6.195 17.393 6.118 17.604 C 5.987 17.891 5.801 18.242 5.535 18.631 C 4.747 19.782 3.62 20.757 2.18 21.536 C 1.419 21.941 0.54 22.355 0.29 23.118 C 0.039 23.88 0.203 24.582 0.842 25.239 C 1.053 25.466 1.318 25.665 1.653 25.85 C 2.438 26.283 3.105 26.496 3.63 26.641 C 3.721 26.669 3.937 26.736 4.031 26.819 C 4.265 27.022 4.23 27.331 4.543 27.78 C 4.731 28.061 4.949 28.25 5.129 28.374 C 5.783 28.826 6.516 28.854 7.294 28.881 C 7.997 28.908 8.793 28.94 9.702 29.24 C 10.079 29.364 10.47 29.605 10.922 29.883 C 12.011 30.552 13.501 31.467 15.998 31.467 C 18.493 31.467 19.995 30.547 21.091 29.876 C 21.541 29.6 21.93 29.361 22.297 29.242 C 23.206 28.942 24.003 28.912 24.706 28.884 C 25.483 28.854 26.216 28.826 26.87 28.377 C 27.076 28.234 27.331 28.004 27.535 27.651 C 27.76 27.272 27.753 27.003 27.964 26.821 C 28.05 26.746 28.238 26.68 28.338 26.65 C 28.868 26.505 29.545 26.292 30.344 25.852 C 30.697 25.658 30.976 25.443 31.192 25.2 C 31.194 25.197 31.196 25.192 31.199 25.19 C 31.805 24.544 31.955 23.787 31.709 23.12"
            fill="#000000"
            stroke="#00000000"
            stroke-width="1"
        />
    </g>
</svg>`;
/* eslint-enable */
function main_showTosDialog(title, titleText, body) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        const result = yield main_showDialog({
            container: document.body,
            dataTestId: "tos-dialog",
            lang: main_supportedLocale,
            title,
            titleText,
            body,
            dismissButtonText: main_localizedString("legalPromptReject"),
            buttons: [
                {
                    text: main_localizedString("legalPromptAccept"),
                    key: "accept",
                },
            ],
        });
        return result === "accept";
    });
}
function main_showAdultOrChildDialog() {
    return main_showDialog({
        container: document.body,
        dataTestId: "adult-or-child-dialog",
        lang: main_supportedLocale,
        title: main_localizedString("legalPromptVariantGAdultOrChild"),
        buttons: [
            {
                text: main_localizedString("legalPromptVariantGAdult"),
                key: "adult",
            },
            {
                text: main_localizedString("legalPromptVariantGChild"),
                key: "child",
            },
        ],
    });
}
function main_showFindGuardianDialog() {
    return main_showDialog({
        container: document.body,
        dataTestId: "find-guardian-dialog",
        lang: main_supportedLocale,
        title: main_localizedString("legalPromptVariantGFindYourParent"),
        buttons: [
            {
                text: main_localizedString("legalPromptVariantGIAmGuardian"),
                key: "guardian",
            },
            {
                text: main_localizedString("legalPromptVariantGCancel"),
                key: "cancel",
                isSecondary: true,
            },
        ],
    });
}
/**
 * @internal
 */
const main_legalPromptFactory = main_Injectable("legalPrompt", () => {
    return function legalPrompt(privacyPolicy, termsOfService, learnMore, childrenProtectionActRestricted) {
        const legalMessage = childrenProtectionActRestricted
            ? main_localizedString("legalPromptVariantGMessage")
            : main_localizedString("legalPromptMessage")({
                privacyPolicyUrl: privacyPolicy.webUrl,
                termsOfServiceUrl: termsOfService.webUrl,
                learnMoreUrl: learnMore.webUrl,
            });
        const legalTitleText = main_localizedString("legalPromptTermsOfService");
        const legalTitle = childrenProtectionActRestricted ? legalTitleText : main_snapIcon;
        return {
            contentHash: main_computeHash(legalMessage),
            show() {
                return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                    if (!childrenProtectionActRestricted) {
                        return main_showTosDialog(legalTitle, legalTitleText, legalMessage);
                    }
                    while (true) {
                        const adultOrChild = yield main_showAdultOrChildDialog();
                        switch (adultOrChild) {
                            case "child": {
                                const findGuardian = yield main_showFindGuardianDialog();
                                switch (findGuardian) {
                                    case "cancel":
                                        continue;
                                    case "guardian":
                                        return main_showTosDialog(legalTitle, legalTitleText, legalMessage);
                                    case "dismiss":
                                        return false;
                                    default:
                                        main_assertUnreachable(findGuardian);
                                }
                            }
                            case "adult":
                                return main_showTosDialog(legalTitle, legalTitleText, legalMessage);
                            case "dismiss":
                                return false;
                            default:
                                main_assertUnreachable(adultOrChild);
                        }
                    }
                });
            },
        };
    };
});
//# sourceMappingURL=legalPrompt.js.map
;// ./node_modules/@snap/camera-kit/lib/legal/legalState.js










const main_legalState_logger = main_getLogger("LegalState");
/**
 * We store a hash of the last accepted ToS content. This is how we determine if the user previously accepted the
 * relevant ToS.
 *
 * ToS acceptance is only valid for 12 hours. That is, if legal status is checked and the last acceptance occurred more
 * than 12 hours ago, the user must be prompted to accept again.
 */
const main_tosContentHashExpiry = 12 * 60 * 60;
const main_tosContentHashKey = "lastAcceptedTosContentHash";
const main_createLegalState = () => {
    const states = main_defineStates(main_defineState("unknown")(), main_defineState("accepted")(), main_defineState("rejected")());
    const actions = main_defineActions(main_defineAction("requestLegalPrompt")(), main_defineAction("accept")(), main_defineAction("reject")());
    return new main_StateMachine(actions, states, states.unknown(), (actions) => {
        return main_merge(actions.pipe(main_inStates("unknown"), main_forActions("accept"), main_map(() => states.accepted())), actions.pipe(main_inStates("unknown"), main_forActions("reject"), main_map(() => states.rejected())), 
        // We don't treat "rejected" as a terminal state -- if we get another request to display the legal prompt,
        // even though we're in the rejected state, we'll transition back to unknown and the prompt will be shown.
        //
        // Conversely, we do treat "accepted" as a terminal state -- we will not transition back to unknown or
        // show the legal prompt if we're already in accepted state, even if we get a request to display the prompt.
        actions.pipe(main_inStates("rejected"), main_forActions("requestLegalPrompt"), main_map(() => states.unknown())));
    });
};
const main_defaultLegalDocumentDate = new Date("2021-09-30T00:00:00+00:00");
const main_defaultLegalPrompt = main_LegalPrompt.fromPartial({
    documents: [
        main_LegalDocument.fromPartial({
            type: main_LegalDocument_Type.PRIVACY_POLICY,
            webUrl: "https://values.snap.com/privacy/privacy-policy",
            version: "1",
            timestamp: main_defaultLegalDocumentDate,
        }),
        main_LegalDocument.fromPartial({
            type: main_LegalDocument_Type.TERMS_OF_SERVICE,
            webUrl: "https://snap.com/terms",
            version: "1",
            timestamp: main_defaultLegalDocumentDate,
        }),
        main_LegalDocument.fromPartial({
            type: main_LegalDocument_Type.LEARN_MORE,
            webUrl: "https://support.snapchat.com/article/camera-information-use",
            version: "1",
            timestamp: main_defaultLegalDocumentDate,
        }),
    ],
    // By default, we adopt a fail-open approach, which means that if COF fails,
    // we do not display ToS for the following reasons:
    // 1. It provides better experince for big partners with ToS disabled
    // 2. It has minimal risk
    disabled: true,
});
const main_defaultInitConfig = main_GetInitializationConfigResponse.fromPartial({});
const main_hasAnyValue = (c) => {
    var _a, _b;
    return ((_b = (_a = c.value) === null || _a === void 0 ? void 0 : _a.anyValue) === null || _b === void 0 ? void 0 : _b.value) instanceof Uint8Array;
};
const main_getDocumentOrDefault = (documents) => (type) => {
    var _a;
    return ((_a = documents.find((d) => d.type === type)) !== null && _a !== void 0 ? _a : main_defaultLegalPrompt.documents.find((d) => d.type === type));
};
/**
 * We maintain the state of the user's acceptance of Snap's various legal documents. Other components may require that
 * the legal state be "accepted" before proceeding (e.g. to apply a lens).
 *
 * On page load, the legal state starts as "unknown." If a request is made to determine the legal state, the following
 * business logic is implemented:
 *
 * 1. Download remote COF config value containing the legal documents + a `disabled` field to optionally skip the legal
 * requirement.
 * 2. Check for a `lastAcceptedTosContentHash` stored in IndexedDB.
 * 3. Prompt the user to accept/reject the legal documents.
 *
 *                     ┌────────────────────────────────────────────────────────┐
 *                     │       COF config value includes "disabled: true"       │
 *                     └────────────────────────────────────────────────────────┘
 *                                                  │
 *                                                  │
 *                           ┌────────No────────────┴────────────Yes──────────────────┐
 *                           │                                                        │
 *                           ▼                                                        │
 *        ┌────────────────────────────────────┐                                      ▼
 *        │"lastAcceptedTosContentHash" exists │                               ┌────────────┐
 *        └────────────────────────────────────┘                               │  Skip ToS  │
 *                           │                                                 └────────────┘
 *                           │                                                        ▲
 *        ┌─────────────No───┴───────Yes────────────┐                                 │
 *        │                                         │                                 │
 *        │                                         │                                 │
 *        ▼                                         ▼                                 │
 * ┌────────────┐              ┌────────────────────────────────────────┐             │
 * │  Show ToS  │              │  Hash of ToS content from COF matches  │             │
 * └────────────┘              │      "lastAcceptedTosContentHash"      │             │
 *        ▲                    └────────────────────────────────────────┘             │
 *        │                                         │                                 │
 *        │                                         │                                 │
 *        └──────────────────No─────────────────────┴───────────────────Yes───────────┘
 *
 * @internal
 */
const main_legalStateFactory = main_Injectable("legalState", [main_remoteConfigurationFactory.token, main_legalPromptFactory.token], (remoteConfig, legalPrompt) => {
    const persistance = new main_ExpiringPersistence(() => main_tosContentHashExpiry, new main_IndexedDBPersistence({ databaseName: "Legal" }));
    const getLastAcceptedTosContentHash = () => main_from_from(persistance.retrieve(main_tosContentHashKey).catch((error) => main_legalState_logger.warn(error)));
    const setLastAcceptedTosContentHash = (hash) => persistance.store(main_tosContentHashKey, hash).catch((error) => main_legalState_logger.warn(error));
    const legalState = main_createLegalState();
    legalState.events
        .pipe(main_inStates("unknown"), main_forActions("requestLegalPrompt"), main_switchMap(() => main_forkJoin({
        cofConfig: remoteConfig.get("CAMERA_KIT_LEGAL_PROMPT").pipe(main_map((configResults) => {
            const config = configResults.find(main_hasAnyValue);
            if (!config)
                return main_defaultLegalPrompt;
            return main_LegalPrompt.decode(config.value.anyValue.value);
        }), main_catchError((error) => {
            main_legalState_logger.error(error);
            return main_of(main_defaultLegalPrompt);
        })),
        initConfig: remoteConfig.getInitializationConfig().pipe(main_catchError((error) => {
            main_legalState_logger.error(error);
            return main_of(main_defaultInitConfig);
        })),
    })), main_switchMap(({ cofConfig, initConfig }) => {
        // NOTE: Currently, we check two sources to determine whether ToS is disabled or not:
        // COF and initConfig. Legal document links are pulled only from COF (or defaults),
        // because initConfig has not been implemented yet. In the future, we may choose
        // to exclusively use initConfig, which could incorporate the COF call internally:
        // https://jira.sc-corp.net/browse/CAMKIT-4791
        var _a;
        if ((_a = initConfig.legalPrompt) === null || _a === void 0 ? void 0 : _a.disabled) {
            return main_of(legalState.actions.accept("disabled"));
        }
        if (cofConfig.disabled) {
            return main_of(legalState.actions.accept("disabled"));
        }
        const documentOfType = main_getDocumentOrDefault(cofConfig.documents);
        const prompt = legalPrompt(documentOfType(main_LegalDocument_Type.PRIVACY_POLICY), documentOfType(main_LegalDocument_Type.TERMS_OF_SERVICE), documentOfType(main_LegalDocument_Type.LEARN_MORE), initConfig.childrenProtectionActRestricted);
        return getLastAcceptedTosContentHash().pipe(main_switchMap((lastAcceptedTosContentHash) => {
            if (prompt.contentHash === lastAcceptedTosContentHash)
                return main_of(true);
            // Delegate prompting the end-user to accept/reject the legal documents. This returns with
            // a Promise<boolean> indicating accept/reject.
            return prompt.show();
        }), main_map((didAccept) => {
            if (!didAccept)
                return legalState.actions.reject(prompt.contentHash);
            setLastAcceptedTosContentHash(prompt.contentHash);
            return legalState.actions.accept(prompt.contentHash);
        }));
    }), main_dispatch(legalState))
        .subscribe({
        error: main_legalState_logger.error,
    });
    return legalState;
});
//# sourceMappingURL=legalState.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/operational/Metric.js
const main_nameDelimiter = "_";
const main_dimensionDelimiter = ".";
const main_delimiterRegex = new RegExp(`^${main_nameDelimiter}+|${main_nameDelimiter}+$`, "g");
/** @internal */
class main_Metric {
    constructor(name, dimensions = {}) {
        this.name = name;
        this.dimensions = dimensions;
    }
    child(constructor, name, dimensions = {}) {
        return new constructor(`${this.name}${main_nameDelimiter}${name}`, dimensions);
    }
}
/** @internal */
function main_joinMetricNames(names) {
    return names.join(main_nameDelimiter).replace(main_delimiterRegex, "");
}
/** @internal */
function main_serializeMetricDimensions(dimensions) {
    if (Object.keys(dimensions).length === 0)
        return "";
    return `${main_dimensionDelimiter}${Array.from(Object.entries(dimensions))
        .map((d) => d.join(main_dimensionDelimiter))
        .join(main_dimensionDelimiter)}`;
}
//# sourceMappingURL=Metric.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/operational/Timer.js



/** @internal */
class main_Timer extends main_Metric {
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.startTime = main_getTimeMs();
        this.stopped = false;
        this.marks = new Set();
        this.measures = new Set();
    }
    /**
     * Return all measures created by this Timer and any child timers.
     */
    getMeasures() {
        return Array.from(this.measures.values()).concat(...Array.from(this.marks.values()).map((mark) => mark.getMeasures()));
    }
    /**
     * Create a child Timer, using this Timer's name as a prefix when naming the new Timer. Any measures made with the
     * child Timer will be included when calling `getMeasures()` on this Timer, or when calling `toOperationalMetric`
     * on this Timer.
     *
     * @example
     * ```ts
     * const parent = new Timer('parent')
     * const child = parent.mark('child') // child metric name is parent_child.
     *
     * child.measure()
     * const measures = parent.getMeasures() // has one element.
     * ```
     *
     * @param name
     * @param dimensions If omitted, the child timer will NOT inherit dimensions from the parent -- if the child timer
     * should re-use the parent's dimensions, this must be done explicitly by passing the parent's dimensions as an
     * argument here.
     * @returns A child Timer.
     */
    mark(name, dimensions = {}) {
        const mark = new main_Timer(main_joinMetricNames([this.name, name]), dimensions);
        if (this.stopped)
            mark.stop();
        this.marks.add(mark);
        return mark;
    }
    /**
     * Measure the time (in milliseconds) since this Timer was created.
     *
     * If a name is provided, the measure's name will be prefixed with the name of this Timer. Otherwise the name of
     * the measure will be the name of this Timer.
     *
     * @example
     * ```ts
     * const timer = new Timer('a')
     * timer.measure('b')
     * const measures = timer.getMeasures()
     * // measure[0].name === 'a_b'
     * ```
     *
     * @param name
     * @returns
     */
    measure(name = "") {
        if (this.stopped)
            return;
        const fullName = main_joinMetricNames([this.name, name]);
        const measure = {
            name: fullName,
            duration: main_getTimeMs() - this.startTime,
            dimensions: this.dimensions,
        };
        this.measures.add(measure);
    }
    /**
     * Remove all measures from this Timer and any child timers previously created by calls to `mark()`.
     */
    clear() {
        this.measures.clear();
        this.marks.forEach((mark) => mark.clear());
    }
    /**
     * Prevent any future measures from being created by this Timer or any child timers.
     */
    stop() {
        this.stopped = true;
        this.marks.forEach((mark) => mark.stop());
    }
    /**
     * Report this metric using {@link OperationalMetricsReporter}.
     *
     * After reporting, the Timer can longer be used. Its internal state is cleared and cannot be updated. Calling this
     * method a second time will no-op.
     *
     * @param reporter All measurements will be reported using the given reporter.
     */
    stopAndReport(reporter) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            reporter.report(this);
            this.stop();
            this.clear();
        });
    }
    /**
     * Convert all measures from this Timer and from any child timers into an array of {@link OperationalMeric} objects,
     * which can be sent to the backend.
     *
     * @returns
     */
    toOperationalMetric() {
        const timestamp = new Date();
        return this.getMeasures().map((measure) => ({
            name: `${measure.name}${main_serializeMetricDimensions(measure.dimensions)}`,
            timestamp,
            metric: {
                $case: "latencyMillis",
                latencyMillis: measure.duration,
            },
        }));
    }
}
//# sourceMappingURL=Timer.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/defer.js


function main_defer(observableFactory) {
    return new main_Observable_Observable(function (subscriber) {
        main_innerFrom_innerFrom(observableFactory()).subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/finalize.js

function main_finalize(callback) {
    return main_operate(function (source, subscriber) {
        try {
            source.subscribe(subscriber);
        }
        finally {
            subscriber.add(callback);
        }
    });
}
//# sourceMappingURL=finalize.js.map
;// ./node_modules/@snap/camera-kit/lib/observable-operators/unsubscribed.js

/**
 * Returns an Observable that mirrors the source Observable, but will call a specified function when the source has no
 * more subscribers.
 *
 * This is exactly like the `finalize` operator, exept that the specified function will be called only when the source
 * is explicitly unsubscribed.
 *
 * @param callback Called when the source Observable has no more subscribers.
 * @returns
 */
function main_unsubscribed(callback) {
    return (source) => main_defer(() => {
        // We can tell if the source is completed or errored -- if neither has happened, we know the source is being
        // finalized because all subscribers have left.
        let completedOrErrored = false;
        return source.pipe(main_tap({
            complete: () => (completedOrErrored = true),
            error: () => (completedOrErrored = true),
        }), main_finalize(() => {
            if (completedOrErrored)
                return;
            callback();
        }));
    });
}
//# sourceMappingURL=unsubscribed.js.map
;// ./node_modules/@snap/camera-kit/lib/session/lensState.js















const main_lensState_logger = main_getLogger("LensState");
const main_createLensState = () => {
    const actions = main_defineActions(main_defineAction("applyLens")(), main_defineAction("downloadComplete")(), main_defineAction("turnedOn")(), main_defineAction("resourcesLoaded")(), main_defineAction("firstFrameProcessed")(), main_defineAction("applyLensComplete")(), main_defineAction("applyLensFailed")(), main_defineAction("applyLensAborted")(), main_defineAction("removeLens")(), main_defineAction("turnedOff")(), main_defineAction("removeLensComplete")(), main_defineAction("removeLensFailed")());
    const states = main_defineStates(main_defineState("noLensApplied")(), main_defineState("applyingLens")(), main_defineState("lensApplied")());
    return new main_StateMachine(actions, states, states.noLensApplied(), (events) => main_merge(events.pipe(
    // We allow a new lens to be applied at any time, no matter the state.
    main_inStates("noLensApplied", "applyingLens", "lensApplied"), main_forActions("applyLens"), main_map(([a]) => states.applyingLens(a.data.lens))), events.pipe(main_inStates("applyingLens"), main_forActions("applyLensComplete"), main_map(([a]) => states.lensApplied(a.data))), events.pipe(main_inStates("applyingLens"), main_forActions("applyLensFailed"), main_map(() => states.noLensApplied())), events.pipe(main_inStates("lensApplied"), main_forActions("removeLensComplete"), main_map(() => states.noLensApplied()))));
};
const main_lensStateFactory = main_Injectable("lensState", [
    main_lensCoreFactory.token,
    main_lensRepositoryFactory.token,
    main_lensAssetRepositoryFactory.token,
    main_lensPersistenceStoreFactory.token,
    main_legalStateFactory.token,
    main_operationalMetricReporterFactory.token,
], (lensCore, lensRepository, lensAssetRepository, lensPersistence, legalState, operationalMetricsReporter) => {
    const lensState = main_createLensState();
    let firstLensApply = true;
    /**
     * Apply lens
     */
    lensState.events
        .pipe(main_forActions("applyLens"), 
    // Determine the legal state (e.g. terms have been accepted). Using exhaustMap means while we are
    // ascertaining legal status (which may include prompting the end user to accept terms), we will ignore
    // any new applyLens actions.
    main_exhaustMap(([a]) => main_of(legalState.actions.requestLegalPrompt()).pipe(main_dispatch(legalState), main_inStates("accepted", "rejected"), main_take(1), main_map(([, { name }]) => {
        if (name === "accepted")
            return a;
        return lensState.actions.applyLensFailed({
            error: main_legalError(`Failed to apply lens ${a.data.lens.id}. Required legal terms were not accepted.`),
            lens: a.data.lens,
        });
    }))), 
    // The use of switchMap is important so that if we get a new applyLens action while we're still
    // downloading lens content for a previously-requested lens, we can cancel those requests and ensure
    // that lenses are applied in the order they're requested.
    main_switchMap((a) => {
        if (a.name === "applyLensFailed")
            return main_of(a);
        const { lens } = a.data;
        // Convenience method making dispatching an action with Lens data less verbose.
        const dispatch = (action) => {
            lensState.dispatch(action, lens);
        };
        // We record if this was the first lens apply for this page load, since there may be additional
        // sources of latency (e.g. remote configuration that needs to be loaded) on the first apply that
        // are not present for subsequent applies.
        const applyTimer = new main_Timer("lens").mark("apply", { first: `${firstLensApply}` });
        firstLensApply = false;
        return main_of(a.data).pipe(main_mergeMap(({ lens, launchData }) => {
            // If retrieval throws an error, we still want to proceed with the lens
            // because persisted data is not a necessity.
            return main_from_from(lensPersistence.retrieve(lens.id).catch(() => undefined)).pipe(main_map((persistentStore) => ({ lens, launchData, persistentStore })));
        }), main_map(({ lens, launchData, persistentStore }) => {
            const lensDetails = lensRepository.getLensMetadata(lens.id);
            if (!lensDetails) {
                throw new Error(`Cannot apply lens ${lens.id}. It has not been loaded by the Lens ` +
                    `repository. Use CameraKit.lensRepository.loadLens (or loadLensGroups) ` +
                    `to load lens metadata before calling CameraKitSession.applyLens.`);
            }
            const { content } = lensDetails;
            if (!content) {
                throw new Error(`Cannot apply lens ${lens.id}. Metadata retrieved for this lens does not ` +
                    `include the lens content URL.`);
            }
            return {
                lens,
                launchData: main_encodeLensLaunchData(launchData !== null && launchData !== void 0 ? launchData : {}, persistentStore !== null && persistentStore !== void 0 ? persistentStore : new ArrayBuffer(0)),
                content,
            };
        }), 
        // Load lens assets and the lens itself in parallel. Both count toward lens download time.
        // TODO: use RxJS fetch utilities so that these requests can be cancelled on unsubscribe.
        main_mergeMap(({ lens, launchData, content }) => {
            const networkTimer = applyTimer.mark("network");
            return main_from_from(Promise.all([
                lensRepository.getLensContent(lens).finally(() => networkTimer.measure("lens")),
                content.assetManifest.length > 0
                    ? lensAssetRepository
                        .cacheAssets(content.assetManifest, lens)
                        .finally(() => networkTimer.measure("assets"))
                    : Promise.resolve(),
            ])).pipe(main_tap(() => {
                networkTimer.measure();
                lensState.dispatch("downloadComplete", lens);
            }), main_map(([{ lensBuffer, lensChecksum }]) => {
                // NOTE: cached array buffer has to be copied each time in order to be reused,
                // otherwise the original cached copy would be detached by LensCore
                // One optimization can be done here: do not copy the array if getLensContent()
                // returned uncached buffer
                const lensDataBuffer = lensBuffer.slice(0);
                return { lensId: lens.id, lensDataBuffer, lensChecksum, launchData };
            }));
        }), 
        // If removeLens is dispatched while downloading, cancel download, don't apply the lens.
        main_takeUntil(lensState.events.pipe(main_forActions("removeLens"))), 
        // Once the lens has downloaded, we can call replaceLenses. We're not concerned about
        // waiting for prior in-progress calls to replaceLenses to complete, because LensCore
        // guarantees that calls to replaceLenses will always be processed sequentially in the order
        // they are received.
        main_mergeMap((lensInput) => new main_Observable_Observable((subscriber) => {
            const coreTimer = applyTimer.mark("core");
            // replaceLenses has the property that if it fails, LensCore guarantees that no
            // lenses are active – so we can safely dispatch applyLensFailed and transition
            // to noLensApplied state.
            lensCore
                .replaceLenses({
                lenses: [
                    Object.assign(Object.assign({}, lensInput), { onTurnOn: () => dispatch("turnedOn"), onResourcesLoaded: () => dispatch("resourcesLoaded"), 
                        // onFirstFrameProcessed marks the end of the lens application for
                        // the end-user -- this is when they see the newly applied lens
                        // begin to render. As such, this is where we stop our overall
                        // latency measurement and report latency metrics.
                        onFirstFrameProcessed: () => {
                            coreTimer.measure("first-frame");
                            applyTimer.measure("success");
                            applyTimer.stopAndReport(operationalMetricsReporter);
                            dispatch("firstFrameProcessed");
                        }, onTurnOff: () => dispatch("turnedOff") }),
                ],
            })
                .then(() => {
                coreTimer.measure("success");
                // We emit applyLensComplete (and applyLensFailed, below) on an
                // Observable, which is piped to `dispatch` – this allows `switchMap` to
                // properly cancel the dispatch of these actions if a new applyLens
                // arrives while we're waiting for onSuccess/onFailure.
                //
                // That's desirable behavior, because we don't want the applyingLens
                // state due to a *subsequent applyLens action* to be transitioned to
                // lensApplied by this action.
                subscriber.next(lensState.actions.applyLensComplete(lens));
                subscriber.complete();
            })
                .catch((lensCoreError) => {
                coreTimer.measure("failure");
                applyTimer.measure("failure");
                applyTimer.stopAndReport(operationalMetricsReporter);
                const message = `Failed to apply lens ${lensInput.lensId}.`;
                const error = /validation failed/.test(lensCoreError.message)
                    ? main_lensContentValidationError(message, lensCoreError)
                    : main_lensError(message, lensCoreError);
                subscriber.next(lensState.actions.applyLensFailed({ error, lens }));
                subscriber.complete();
            });
        })), main_catchError((error) => {
            applyTimer.measure("failure");
            applyTimer.stopAndReport(operationalMetricsReporter);
            return main_of(lensState.actions.applyLensFailed({ error, lens }));
        }), 
        // If a new applyLens is received, `switchMap` will unsubscribe from this inner observable,
        // which stops the current lens application. When this happens we can record a separate metric
        // to measure aborted lens applications.
        main_unsubscribed(() => {
            applyTimer.measure("abort");
            applyTimer.stopAndReport(operationalMetricsReporter);
        }));
    }), main_dispatch(lensState))
        .subscribe({
        error: main_lensState_logger.error,
    });
    /**
     * Remove lens
     */
    lensState.events
        .pipe(main_inStates("lensApplied", "noLensApplied"), main_forActions("removeLens"), main_mergeMap(() => new main_Observable_Observable((subscriber) => {
        lensCore
            .clearAllLenses()
            .then(() => {
            subscriber.next(lensState.actions.removeLensComplete());
            subscriber.complete();
        })
            .catch((lensCoreError) => {
            const error = new Error("Failed to remove lenses.", { cause: lensCoreError });
            subscriber.next(lensState.actions.removeLensFailed(error));
            subscriber.complete();
        });
    })), main_dispatch(lensState))
        .subscribe({
        error: main_lensState_logger.error,
    });
    lensState.events
        .pipe(main_inStates("applyingLens"), main_forActions("removeLens"), main_switchMap(([a]) => lensState.events.pipe(
    // Wait to remove the lens until it has been applied.
    main_inStates("lensApplied"), 
    // But cancel the removal if a new applyLens supercedes the current lens. The goal here is to
    // make sure the latest apply/remove pre-empts any previous request to apply/remove.
    main_takeUntil(lensState.events.pipe(main_forActions("applyLens"))), main_map(() => a))), main_dispatch(lensState))
        .subscribe({
        error: main_lensState_logger.error,
    });
    // Log transitions
    lensState.events.subscribe(([a, s]) => {
        const data = main_extractLoggableData(a);
        main_lensState_logger.debug(`Action: "${a.name}", state: "${s.name}"${data ? ", data: " + JSON.stringify(data) : ""}`);
    });
    return lensState;
});
function main_extractLoggableData(action) {
    switch (action.name) {
        case "applyLens":
            return { lensId: action.data.lens.id };
        case "applyLensFailed":
            return { lensId: action.data.lens.id, error: action.data.error.message };
        case "downloadComplete":
        case "turnedOn":
        case "resourcesLoaded":
        case "firstFrameProcessed":
        case "applyLensComplete":
        case "applyLensAborted":
        case "turnedOff":
            return { lensId: action.data.id };
        case "removeLens":
        case "removeLensComplete":
            return undefined;
        case "removeLensFailed":
            return { error: action.data.message };
        default:
            main_assertUnreachable(action);
    }
}
//# sourceMappingURL=lensState.js.map
;// ./node_modules/@snap/camera-kit/lib/session/sessionState.js



const main_createSessionState = () => {
    const actions = main_defineActions(main_defineAction("suspend")(), main_defineAction("resume")(), main_defineAction("destroy")());
    const states = main_defineStates(main_defineState("inactive")(), main_defineState("active")(), main_defineState("destroyed")());
    return new main_StateMachine(actions, states, main_defineState("inactive")()(), (events) => {
        return main_merge(events.pipe(main_forActions("resume"), main_map(([a]) => states.active(a.data))), events.pipe(main_forActions("suspend"), main_map(() => states.inactive())), events.pipe(main_forActions("destroy"), main_map(() => states.destroyed())));
    });
};
const main_sessionStateFactory = main_Injectable("sessionState", () => main_createSessionState());
//# sourceMappingURL=sessionState.js.map
;// ./node_modules/@snap/camera-kit/lib/session/LensKeyboard.js





/** @internal */
class main_LensKeyboard {
    constructor(lensState) {
        this.lensState = lensState;
        this.active = false;
        this.element = document.createElement("textarea");
        this.element.addEventListener("keypress", (event) => {
            if (event.code === "Enter" && !event.shiftKey) {
                event.preventDefault();
                this.handleReply(this.element.value);
            }
        });
        this.events = new main_TypedEventTarget();
        this.handleReply = () => { };
        this.uriHandler = {
            uri: "app://textInput/requestKeyboard",
            handleRequest: (_request, reply) => {
                this.element.autofocus = true;
                this.handleReply = (text) => {
                    const opt = {
                        text: text,
                        start: text.length,
                        end: text.length,
                        done: true,
                        shouldNotify: true,
                    };
                    const output = new TextEncoder().encode(JSON.stringify(opt));
                    reply({
                        code: 200,
                        description: "",
                        contentType: "application/json",
                        data: output,
                    });
                };
                this.active = true;
                this.updateStatus();
                this.element.focus();
            },
        };
        lensState.events.pipe(main_forActions("turnedOff")).subscribe(() => {
            this.dismiss();
        });
    }
    dismiss() {
        if (this.active) {
            this.active = false;
            this.element.value = "";
            this.updateStatus();
        }
    }
    getElement() {
        return this.element;
    }
    sendInputToLens(text) {
        this.element.value = text;
        this.handleReply(text);
    }
    addEventListener(type, callback, options) {
        this.events.addEventListener(type, callback, options);
    }
    removeEventListener(type, callback) {
        this.events.removeEventListener(type, callback);
    }
    toPublicInterface() {
        return {
            addEventListener: this.addEventListener.bind(this),
            removeEventListener: this.removeEventListener.bind(this),
            getElement: this.getElement.bind(this),
            sendInputToLens: this.sendInputToLens.bind(this),
            dismiss: this.dismiss.bind(this),
        };
    }
    updateStatus() {
        const state = this.lensState.getState();
        // If lens keyboard status is changing, we know a lens must be applied.
        if (main_isState(state, "noLensApplied"))
            return;
        this.events.dispatchEvent(new main_TypedCustomEvent("active", {
            element: this.element,
            active: this.active,
            // If the keyboard is up, it has been triggered by an active lens.
            lens: state.data,
        }));
    }
}
/**
 * @internal
 */
const main_lensKeyboardFactory = main_Injectable("lensKeyboard", [main_lensStateFactory.token], (lensState) => new main_LensKeyboard(lensState));
//# sourceMappingURL=LensKeyboard.js.map
;// ./node_modules/@snap/camera-kit/lib/session/CameraKitSessionEvents.js
/**
 * A type guard helper to detect unreachable code.
 */
const main_isReachable = (_) => false;
/**
 * Returns true if given value is of {@link SessionErrors} type and false otherwise.
 */
function main_isSessionError(value) {
    if (!(value instanceof Error))
        return false;
    const maybeSessionErrorName = value.name;
    switch (maybeSessionErrorName) {
        case "LensAbortError":
        case "CameraKitSourceError":
        case "LensExecutionError":
        case "LensImagePickerError":
            return true;
        default:
            return main_isReachable(maybeSessionErrorName);
    }
}
/**
 * Returns true if given value is of {@link SessionErrors} type, which is notified to client.
 */
function main_isPublicLensError(value) {
    if (!(value instanceof Error))
        return false;
    const maybeSessionErrorName = value.name;
    switch (maybeSessionErrorName) {
        case "LensAbortError":
        case "LensExecutionError":
        case "LensImagePickerError":
            return true;
        default:
            return main_isReachable(maybeSessionErrorName);
    }
}
//# sourceMappingURL=CameraKitSessionEvents.js.map
;// ./node_modules/@snap/camera-kit/lib/session/CameraKitSession.js

/* eslint-disable @typescript-eslint/member-ordering */




















const main_CameraKitSession_logger = main_getLogger("CameraKitSession");
const main_CameraKitSession_log = main_errorLoggingDecorator(main_CameraKitSession_logger);
function main_isOptionalRenderTarget(value) {
    return value === "live" || value === "capture" || value === undefined;
}
/**
 * A CameraKitSession represents a single rendering pipeline connecting an input media source to output `<canvas>`
 * elements. When a Lens is applied to the session, CameraKit uses the Lens to transform the input media into rendered
 * output.
 *
 * CameraKitSession is the primary object that applications interact with when integrating the CameraKit SDK.
 *
 * A CameraKitSession instance is obtained by calling {@link CameraKit.createSession}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(config)
 * const session = await cameraKit.createSession()
 * ```
 *
 * @category Rendering
 * @category Lenses
 */
class main_CameraKitSession {
    /**
     * @internal
     */
    constructor(
    /**
     * Use this to interact with lenses which require text input.
     */
    keyboard, lensCore, sessionState, lensState, logEntries, pageVisibility) {
        this.keyboard = keyboard;
        this.lensCore = lensCore;
        this.sessionState = sessionState;
        this.lensState = lensState;
        /**
         * Add event listeners here to handle events which occur during the CameraKitSession.
         *
         * **Note:** Applications may want to handle the `error` event, and check the contained error type -- if the type
         * is {@link LensExecutionError}, this means the current lens was unable to render and CameraKit will automatically
         * remove the lens.
         *
         * @example
         * ```ts
         * cameraKitSession.events.addEventListener('error', ({ detail }) => {
         *   if (detail.error.name === 'LensExecutionError') {
         *     console.log(`Lens ${detail.lens.name} encountered an error and was removed. Please pick a different lens.`)
         *   }
         * })
         * ```
         */
        this.events = new main_TypedEventTarget();
        const outputs = this.lensCore.getOutputCanvases();
        this.output = {
            live: outputs[this.lensCore.CanvasType.Preview.value],
            capture: outputs[this.lensCore.CanvasType.Capture.value],
        };
        this.playing = {
            live: false,
            capture: false,
        };
        this.metrics = new main_LensPerformanceMetrics(this.lensCore);
        const removeOnHidden = pageVisibility.onPageHidden(() => this.sessionState.dispatch("suspend", this));
        const removeOnVisible = pageVisibility.onPageVisible(() => this.sessionState.dispatch("resume", this));
        this.removePageVisibilityHandlers = () => {
            removeOnHidden();
            removeOnVisible();
        };
        const sessionErrors = logEntries.pipe(main_filter((entry) => entry.level === "error"), main_map((entry) => entry.messages.find((e) => e instanceof Error)), main_filter(main_isSessionError));
        this.subscriptions = [
            // In case of an abort error, the only option is to destroy the current session,
            // as it becomes inoperable.
            sessionErrors.pipe(main_filter((error) => error.name === "LensAbortError")).subscribe(() => this.destroy()),
            // In case of LensCore lens execution error, we must remove the lens from rendering
            // NOTE: LensCore doesn't differentiate recoverable vs non-recoverable errors and
            // it is recommened to always remove the lens.
            sessionErrors
                .pipe(main_filter((error) => error.name === "LensExecutionError"))
                .subscribe(() => this.removeLens()),
            // Report public session errors to apps
            sessionErrors.pipe(main_filter(main_isPublicLensError)).subscribe((error) => {
                const state = lensState.getState();
                if (!main_isState(state, "noLensApplied")) {
                    this.events.dispatchEvent(new main_TypedCustomEvent("error", { error, lens: state.data }));
                }
                else {
                    // NOTE: at this point the error is already reported, so we can just log a warning
                    main_CameraKitSession_logger.warn("Lens error occurred even though there is no active lens.", error);
                }
            }),
        ];
    }
    /**
     * Apply a Lens to this session.
     *
     * This method will download (and cache) the Lens executable, and then use that Lens for rendering. If the session
     * is currently playing, this will immediately update the rendered output. Otherwise, the new Lens will be used
     * when session playback in resumed.
     *
     * Calling `applyLens` replaces any prior Lens – only one Lens is allowed at a time (per session).
     *
     * **NOTE**: Errors may occur after the Lens is applied. If the Lens encounters errors while rendering,
     * Camera Kit will automatically remove the Lens from the session and emit a {@link LensExecutionError} event.
     * Applications may want to listen for this error and, for example,
     * prevent the Lens from being selected again by the user.
     *
     * ```ts
     * session.events.addEventListener("error", ({ detail }) => {
     *   if (detail.error.name === "LensExecutionError") {
     *     preventFutureLensSelection(detail.lens);
     *     showMessage("We're sorry, but the Lens you selected encountered an error. Please choose a different Lens.");
     *   }
     * });
     * ```
     *
     * @param lens The Lens to apply to this session.
     * @param launchParams: This can optionally be provided to pass some initial data to the lens – only certain lenses
     * expect launch data.
     * @returns A promise which can have the following results:
     * 1. Resolved with `true`: the lens has been applied.
     * 2. Resolved with `false`: the lens has not been applied, but no error occurred – this can happen if a
     * subsequent call to `applyLens` interrupted the lens application.
     * 3. Rejected: the lens has not been applied because an error occurred. This can happen if:
     *   - The lens ID cannot be found in the LensRepository (use LensRepository to load the lens before calling this
     *     method)
     *   - Lens content download fails, or the download of any required lens assets fails.
     *   - An internal failure occurs in the Lens rendering engine when attempting to apply the lens.
     */
    applyLens(lens, launchData) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const action = this.lensState.actions.applyLens({ lens, launchData });
            return main_firstValueFrom(main_of(action).pipe(main_dispatch(this.lensState), 
            // If another applyLens occurs while we're waiting, resolve this applyLens promise early – we're no
            // longer waiting for the requested lens to be applied.
            main_takeUntil(this.lensState.events.pipe(main_forActions("applyLens"), main_filter(([a]) => a !== action))), 
            // If lens application failed, convert this into a rejected promise by throwing the error.
            main_tap(([a]) => {
                if (main_isAction(a, "applyLensFailed") && a.data.lens.id === lens.id)
                    throw a.data.error;
            }), main_inStates("lensApplied"), main_map(() => true)), 
            // The default value is used if `takeUntil` completes the Observable early – i.e. the lens was not
            // applied (application was interrupted by a new call to `applyLens`), so we'll resolve with `false`.
            { defaultValue: false });
        });
    }
    /**
     * Remove a Lens from this session.
     *
     * When a Lens is removed, rendering continues if the session is playing. It will just render the session input
     * directly to the outputs without any image processing.
     *
     * @returns A promise which can have the following results:
     * 1. Resolved with `true`: the session's rendered output has no lens applied.
     * 2. Resolved with `false`: the current lens has been removed, but a subsequent call to `applyLens` means that the
     * session's rendered output will still have a (new) lens applied.
     * 3. Rejected: the lens has failed to be removed. This can happen if an internal failure occurs in the Lens
     * rendering engine when attempting to remove the lens.
     */
    removeLens() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (main_isState(this.lensState.getState(), "noLensApplied"))
                return true;
            return main_firstValueFrom(main_of(this.lensState.actions.removeLens()).pipe(main_dispatch(this.lensState), 
            // If lens removal failed, convert this into a rejected promise by throwing the error.
            main_tap(([a]) => {
                if (main_isAction(a, "removeLensFailed"))
                    throw a.data;
            }), main_inStates("noLensApplied"), 
            // If applyLens is called while we're waiting for removal, complete immediately – applying the next lens
            // will replace the current one.
            main_takeUntil(this.lensState.events.pipe(main_forActions("applyLens"))), main_map(() => true)), 
            // The default value is used if `takeUntil` completes the Observable early (otherwise firstValueFrom will
            // return a rejected Promise).
            { defaultValue: false });
        });
    }
    /**
     * Start/resume session playback – LensCore will begin rendering frames to the output.
     *
     * If no source has been set for the session, calling `play()` will update the playing state, but no actual image
     * processing will occur until `setSource()` is called.
     *
     * @example
     * ```ts
     * const cameraKitSession = await cameraKit.createSession()
     * await cameraKitSession.setSource(mySource)
     * await cameraKitSession.play()
     *
     * // If you call `play` before `setSource`, the call to `play` will resolve but playback will only begin once a
     * // media source has been set.
     * ```
     *
     * @param target Specify the {@link RenderTarget} to render. Defaults to the `live` RenderTarget.
     * @returns Promise resolves when playback state has been updated. If no source has been set, this means `play` will
     * resolve before any frames are processed -- but once a source is set, frames will immediately begin processing.
     */
    play(target = "live") {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.playing[target])
                return;
            this.playing[target] = true;
            const type = this.renderTargetToCanvasType(target);
            return this.lensCore.playCanvas({ type }).catch((error) => {
                this.playing[target] = false;
                throw error;
            });
        });
    }
    /**
     * Pause session playback – LensCore will stop rendering frames to the output.
     *
     * @param target Specify the RenderTarget to pause playback. May be either `'live'` or `'capture'`.
     * Default is `'live'`.
     * @returns Promise resolves when playback has stopped.
     */
    pause(target = "live") {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.playing[target] === false)
                return;
            this.playing[target] = false;
            const type = this.renderTargetToCanvasType(target);
            return this.lensCore.pauseCanvas({ type }).catch((error) => {
                this.playing[target] = true;
                throw error;
            });
        });
    }
    /**
     * Mute all sounds (default SDK state is unmuted).
     *
     * @param fade Do we want audio to fade out?
     */
    mute(fade = false) {
        this.lensCore.setAllSoundsMuted({
            muted: true,
            fade,
        });
    }
    /**
     * Unmute all sounds.
     *
     * @param fade Do we want audio to fade in?
     */
    unmute(fade = false) {
        this.lensCore.setAllSoundsMuted({
            muted: false,
            fade,
        });
    }
    setSource(source, options = {}) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            yield this.safelyDetachSource();
            // For convenience, we allow callers to pass in native objects (e.g. MediaStream) as well as CameraKitSource.
            // Native objects are wrapped in corresponding CameraKitSource classes with default options.
            const cameraKitSource = source instanceof MediaStream
                ? main_createMediaStreamSource(source, options)
                : source instanceof HTMLVideoElement
                    ? main_createVideoSource(source, options)
                    : source;
            const priorPlayingState = this.playing;
            this.playing = {
                live: false,
                capture: false,
            };
            // The source will provide its data to LensCore, and use other LensCore APIs (e.g. setRenderSize,
            // setInputTransform) to render the source correctly.
            yield cameraKitSource.attach(this.lensCore, (error) => {
                main_CameraKitSession_logger.error(main_cameraKitSourceError("Error occurred during source attachment.", error));
            });
            // If attachment is successful, we'll update our source so that we can detach it later.
            this.source = cameraKitSource;
            // Finally we'll resume playback, if appropriate.
            if (priorPlayingState.live)
                yield this.play("live");
            if (priorPlayingState.capture)
                yield this.play("capture");
            return cameraKitSource;
        });
    }
    /**
     * Set an FPS limit.
     *
     * This may be useful to reduce CPU/GPU resource usage by CameraKit if, for example, the input
     * media source has a low FPS – CameraKit would then not try to render more frequently than the source produces
     * new frames.
     *
     * This may also be useful to gracefully degrade performance in situations where lowering FPS is preferable over
     * alternatives.
     *
     * @param fpsLimit A maximum FPS, rendering will not exceed this limit
     * @returns Promise is resolved when the limit is successfully set.
     */
    setFPSLimit(fpsLimit) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            // LensCore uses 0 to remove the limit.
            const fps = fpsLimit < Number.POSITIVE_INFINITY ? fpsLimit : 0;
            return this.lensCore.setFPSLimit({ fps });
        });
    }
    /**
     * Destroy the session.
     *
     * The session will become inoperable. Frame processing stops, and any session-scoped graphical resources are freed.
     */
    destroy() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            try {
                yield this.lensCore.clearAllLenses();
                yield this.lensCore.teardown();
            }
            catch (error) {
                // If a LensCore is in an aborted state, the above lines may throw an error.
                // In such cases, we should continue with the cleanup process.
                // We are also not interested in reporting these errors to our backend.
                main_CameraKitSession_logger.warn("An error occurred in LensCore during the session termination process.", error);
            }
            this.subscriptions.forEach((sub) => sub.unsubscribe());
            yield this.safelyDetachSource();
            this.removePageVisibilityHandlers();
            this.sessionState.dispatch("destroy", undefined);
        });
    }
    renderTargetToCanvasType(target) {
        return target === "capture" ? this.lensCore.CanvasType.Capture : this.lensCore.CanvasType.Preview;
    }
    safelyDetachSource() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            if (this.source) {
                try {
                    yield this.source.detach((error) => {
                        main_CameraKitSession_logger.error(main_cameraKitSourceError("Error occurred during source detachment.", error));
                    });
                    // If there's a failure to detach, we will report the error and proceed. Failure to detach may lead to a
                    // memory leak, but it shouldn't prevent us from switching to the new source.
                }
                catch (error) {
                    main_CameraKitSession_logger.error(main_cameraKitSourceError(`Detaching prior source of type ${main_getTypeName(this.source)} failed.`, error));
                }
            }
        });
    }
}
main_decorate([
    main_validate_validate,
    main_CameraKitSession_log,
    main_param(0, main_guard(main_isLens)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Object, Object]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "applyLens", null);
main_decorate([
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", []),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "removeLens", null);
main_decorate([
    main_validate_validate,
    main_CameraKitSession_log,
    main_param(0, main_guard(main_isOptionalRenderTarget)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [String]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "play", null);
main_decorate([
    main_validate_validate,
    main_CameraKitSession_log,
    main_param(0, main_guard(main_isOptionalRenderTarget)),
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [String]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "pause", null);
main_decorate([
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Boolean]),
    main_metadata("design:returntype", void 0)
], main_CameraKitSession.prototype, "mute", null);
main_decorate([
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Boolean]),
    main_metadata("design:returntype", void 0)
], main_CameraKitSession.prototype, "unmute", null);
main_decorate([
    main_validate_validate,
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Object, Object]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "setSource", null);
main_decorate([
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Number]),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "setFPSLimit", null);
main_decorate([
    main_CameraKitSession_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", []),
    main_metadata("design:returntype", Promise)
], main_CameraKitSession.prototype, "destroy", null);
/**
 * @internal
 */
const main_cameraKitSessionFactory = main_Injectable("CameraKitSession", [
    main_lensCoreFactory.token,
    main_logEntriesFactory.token,
    main_lensKeyboardFactory.token,
    main_sessionStateFactory.token,
    main_lensStateFactory.token,
    main_pageVisibilityFactory.token,
], (lensCore, logEntries, keyboard, sessionState, lensState, pageVisibility) => new main_CameraKitSession(keyboard, lensCore, sessionState, lensState, logEntries, pageVisibility));
//# sourceMappingURL=CameraKitSession.js.map
;// ./node_modules/@snap/camera-kit/lib/lens/assets/LensAssetsProvider.js









const main_LensAssetsProvider_logger = main_getLogger("LensAssetProvider");
const main_maxConsecutiveErrors = 3;
/**
 * Registers a remote asset provider function with a given instance of LensCore.
 *
 * *Note:* LensCoreModule.initialize must be called on the desired LensCoreModule instance **prior** to passing it
 * to the LensAssetsProvider constructor. If this class is instantiated with a LensCoreModule that has not been
 * initialized, the registry of the asset provider function will fail silently and no remote assets will be loaded.
 * @internal
 */
const main_registerLensAssetsProvider = main_Injectable("registerLensAssetsProvider", [
    main_lensCoreFactory.token,
    main_lensRepositoryFactory.token,
    main_lensAssetRepositoryFactory.token,
    main_lensStateFactory.token,
], (lensCore, lensRepository, lensAssetRepository, lensState) => {
    const consecutiveErrorsPerAsset = new Map();
    lensCore.setRemoteAssetsProvider((assetDescriptor) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        // Fetch an asset and provide it to LensCore. If fetching the asset fails we give LensCore
        // an empty response (which it may handle in a variety of ways, e.g. retry, gracefully
        // degrade lens behavior, throw error) and then reject.
        const { assetId, assetType, effectId } = assetDescriptor;
        try {
            if (((_a = consecutiveErrorsPerAsset.get(assetId)) !== null && _a !== void 0 ? _a : 0) > main_maxConsecutiveErrors) {
                throw new Error(`Maximum consecutive asset load errors reached for asset ${assetId}`);
            }
            const lensId = effectId !== null && effectId !== void 0 ? effectId : (_b = lensState.getState().data) === null || _b === void 0 ? void 0 : _b.id;
            const lens = lensId ? lensRepository.getLensMetadata(lensId) : undefined;
            yield lensAssetRepository.loadAsset(assetDescriptor, lens && main_toPublicLens(lens), (_c = lens === null || lens === void 0 ? void 0 : lens.content) === null || _c === void 0 ? void 0 : _c.assetManifest);
            consecutiveErrorsPerAsset.set(assetId, 0);
        }
        catch (error) {
            // if an error occurs, LensCore handles things in different ways
            // depending on the active lens. It might: 1) retry, 2) gracefully degrade lens behavior,
            // 3) lens JS might throw, which will be passed to the exceptionHandler we register with LensCore.
            lensCore.provideRemoteAssetsResponse({
                assetId,
                assetType,
            });
            const consecutiveErrors = ((_d = consecutiveErrorsPerAsset.get(assetId)) !== null && _d !== void 0 ? _d : 0) + 1;
            consecutiveErrorsPerAsset.set(assetId, consecutiveErrors);
            // We've already reported `maxConsecutiveErrors` number of errors for this asset, so we can skip
            // logging additional errors.
            if (consecutiveErrors <= main_maxConsecutiveErrors) {
                main_LensAssetsProvider_logger.error(main_lensAssetError(`Error occurred while handling lens asset ${assetId} request.`, error));
            }
            else {
                main_LensAssetsProvider_logger.warn(`Maximum consecutive asset load errors reached for asset ${assetId}`);
            }
        }
    }));
});
//# sourceMappingURL=LensAssetsProvider.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/Action.js


var main_Action = (function (_super) {
    main_extends(Action, _super);
    function Action(scheduler, work) {
        return _super.call(this) || this;
    }
    Action.prototype.schedule = function (state, delay) {
        if (delay === void 0) { delay = 0; }
        return this;
    };
    return Action;
}(main_Subscription));

//# sourceMappingURL=Action.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js

var main_intervalProvider = {
    setInterval: function (handler, timeout) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var delegate = main_intervalProvider.delegate;
        if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
            return delegate.setInterval.apply(delegate, main_spreadArray([handler, timeout], main_read(args)));
        }
        return setInterval.apply(void 0, main_spreadArray([handler, timeout], main_read(args)));
    },
    clearInterval: function (handle) {
        var delegate = main_intervalProvider.delegate;
        return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
    },
    delegate: undefined,
};
//# sourceMappingURL=intervalProvider.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js




var main_AsyncAction = (function (_super) {
    main_extends(AsyncAction, _super);
    function AsyncAction(scheduler, work) {
        var _this = _super.call(this, scheduler, work) || this;
        _this.scheduler = scheduler;
        _this.work = work;
        _this.pending = false;
        return _this;
    }
    AsyncAction.prototype.schedule = function (state, delay) {
        var _a;
        if (delay === void 0) { delay = 0; }
        if (this.closed) {
            return this;
        }
        this.state = state;
        var id = this.id;
        var scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
        return this;
    };
    AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
        if (delay === void 0) { delay = 0; }
        return main_intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
    };
    AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
        if (delay === void 0) { delay = 0; }
        if (delay != null && this.delay === delay && this.pending === false) {
            return id;
        }
        if (id != null) {
            main_intervalProvider.clearInterval(id);
        }
        return undefined;
    };
    AsyncAction.prototype.execute = function (state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        var error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    };
    AsyncAction.prototype._execute = function (state, _delay) {
        var errored = false;
        var errorValue;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = e ? e : new Error('Scheduled action threw falsy error');
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    };
    AsyncAction.prototype.unsubscribe = function () {
        if (!this.closed) {
            var _a = this, id = _a.id, scheduler = _a.scheduler;
            var actions = scheduler.actions;
            this.work = this.state = this.scheduler = null;
            this.pending = false;
            main_arrRemove(actions, this);
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, null);
            }
            this.delay = null;
            _super.prototype.unsubscribe.call(this);
        }
    };
    return AsyncAction;
}(main_Action));

//# sourceMappingURL=AsyncAction.js.map
;// ./node_modules/rxjs/dist/esm5/internal/Scheduler.js

var main_Scheduler = (function () {
    function Scheduler(schedulerActionCtor, now) {
        if (now === void 0) { now = Scheduler.now; }
        this.schedulerActionCtor = schedulerActionCtor;
        this.now = now;
    }
    Scheduler.prototype.schedule = function (work, delay, state) {
        if (delay === void 0) { delay = 0; }
        return new this.schedulerActionCtor(this, work).schedule(state, delay);
    };
    Scheduler.now = main_dateTimestampProvider.now;
    return Scheduler;
}());

//# sourceMappingURL=Scheduler.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js


var main_AsyncScheduler = (function (_super) {
    main_extends(AsyncScheduler, _super);
    function AsyncScheduler(SchedulerAction, now) {
        if (now === void 0) { now = main_Scheduler.now; }
        var _this = _super.call(this, SchedulerAction, now) || this;
        _this.actions = [];
        _this._active = false;
        return _this;
    }
    AsyncScheduler.prototype.flush = function (action) {
        var actions = this.actions;
        if (this._active) {
            actions.push(action);
            return;
        }
        var error;
        this._active = true;
        do {
            if ((error = action.execute(action.state, action.delay))) {
                break;
            }
        } while ((action = actions.shift()));
        this._active = false;
        if (error) {
            while ((action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    };
    return AsyncScheduler;
}(main_Scheduler));

//# sourceMappingURL=AsyncScheduler.js.map
;// ./node_modules/rxjs/dist/esm5/internal/scheduler/async.js


var main_asyncScheduler = new main_AsyncScheduler(main_AsyncAction);
var main_async_async = main_asyncScheduler;
//# sourceMappingURL=async.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/isDate.js
function main_isValidDate(value) {
    return value instanceof Date && !isNaN(value);
}
//# sourceMappingURL=isDate.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/timer.js




function main_timer(dueTime, intervalOrScheduler, scheduler) {
    if (dueTime === void 0) { dueTime = 0; }
    if (scheduler === void 0) { scheduler = main_async_async; }
    var intervalDuration = -1;
    if (intervalOrScheduler != null) {
        if (main_isScheduler(intervalOrScheduler)) {
            scheduler = intervalOrScheduler;
        }
        else {
            intervalDuration = intervalOrScheduler;
        }
    }
    return new main_Observable_Observable(function (subscriber) {
        var due = main_isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
        if (due < 0) {
            due = 0;
        }
        var n = 0;
        return scheduler.schedule(function () {
            if (!subscriber.closed) {
                subscriber.next(n++);
                if (0 <= intervalDuration) {
                    this.schedule(undefined, intervalDuration);
                }
                else {
                    subscriber.complete();
                }
            }
        }, due);
    });
}
//# sourceMappingURL=timer.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/retry.js





function main_retry(configOrCount) {
    if (configOrCount === void 0) { configOrCount = Infinity; }
    var config;
    if (configOrCount && typeof configOrCount === 'object') {
        config = configOrCount;
    }
    else {
        config = {
            count: configOrCount,
        };
    }
    var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
    return count <= 0
        ? main_identity_identity
        : main_operate(function (source, subscriber) {
            var soFar = 0;
            var innerSub;
            var subscribeForRetry = function () {
                var syncUnsub = false;
                innerSub = source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                    if (resetOnSuccess) {
                        soFar = 0;
                    }
                    subscriber.next(value);
                }, undefined, function (err) {
                    if (soFar++ < count) {
                        var resub_1 = function () {
                            if (innerSub) {
                                innerSub.unsubscribe();
                                innerSub = null;
                                subscribeForRetry();
                            }
                            else {
                                syncUnsub = true;
                            }
                        };
                        if (delay != null) {
                            var notifier = typeof delay === 'number' ? main_timer(delay) : main_innerFrom_innerFrom(delay(err, soFar));
                            var notifierSubscriber_1 = main_createOperatorSubscriber(subscriber, function () {
                                notifierSubscriber_1.unsubscribe();
                                resub_1();
                            }, function () {
                                subscriber.complete();
                            });
                            notifier.subscribe(notifierSubscriber_1);
                        }
                        else {
                            resub_1();
                        }
                    }
                    else {
                        subscriber.error(err);
                    }
                }));
                if (syncUnsub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    subscribeForRetry();
                }
            };
            subscribeForRetry();
        });
}
//# sourceMappingURL=retry.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/camera_kit/v3/features/remote_api_info.js


const main_remote_api_info_protobufPackage = "com.snap.camerakit.v3.features";
function main_createBaseRemoteApiInfo() {
    return { apiSpecIds: [] };
}
const main_RemoteApiInfo = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        for (const v of message.apiSpecIds) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseRemoteApiInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.apiSpecIds.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseRemoteApiInfo();
        message.apiSpecIds = ((_a = object.apiSpecIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=remote_api_info.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/pb_schema/lenses/remote_api/remote_api_service.js


const main_remote_api_service_protobufPackage = "snapchat.lenses";
var main_HttpRequestMethod;
(function (HttpRequestMethod) {
    HttpRequestMethod["HTTP_METHOD_UNSET"] = "HTTP_METHOD_UNSET";
    HttpRequestMethod["HTTP_METHOD_GET"] = "HTTP_METHOD_GET";
    HttpRequestMethod["HTTP_METHOD_POST"] = "HTTP_METHOD_POST";
    HttpRequestMethod["HTTP_METHOD_PUT"] = "HTTP_METHOD_PUT";
    HttpRequestMethod["HTTP_METHOD_DELETE"] = "HTTP_METHOD_DELETE";
    HttpRequestMethod["HTTP_METHOD_PATCH"] = "HTTP_METHOD_PATCH";
    HttpRequestMethod["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_HttpRequestMethod || (main_HttpRequestMethod = {}));
function main_httpRequestMethodFromJSON(object) {
    switch (object) {
        case 0:
        case "HTTP_METHOD_UNSET":
            return main_HttpRequestMethod.HTTP_METHOD_UNSET;
        case 1:
        case "HTTP_METHOD_GET":
            return main_HttpRequestMethod.HTTP_METHOD_GET;
        case 2:
        case "HTTP_METHOD_POST":
            return main_HttpRequestMethod.HTTP_METHOD_POST;
        case 3:
        case "HTTP_METHOD_PUT":
            return main_HttpRequestMethod.HTTP_METHOD_PUT;
        case 4:
        case "HTTP_METHOD_DELETE":
            return main_HttpRequestMethod.HTTP_METHOD_DELETE;
        case 5:
        case "HTTP_METHOD_PATCH":
            return main_HttpRequestMethod.HTTP_METHOD_PATCH;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_HttpRequestMethod.UNRECOGNIZED;
    }
}
function main_httpRequestMethodToNumber(object) {
    switch (object) {
        case main_HttpRequestMethod.HTTP_METHOD_UNSET:
            return 0;
        case main_HttpRequestMethod.HTTP_METHOD_GET:
            return 1;
        case main_HttpRequestMethod.HTTP_METHOD_POST:
            return 2;
        case main_HttpRequestMethod.HTTP_METHOD_PUT:
            return 3;
        case main_HttpRequestMethod.HTTP_METHOD_DELETE:
            return 4;
        case main_HttpRequestMethod.HTTP_METHOD_PATCH:
            return 5;
        default:
            return 0;
    }
}
var main_ResponseCode;
(function (ResponseCode) {
    ResponseCode["RESPONSE_CODE_UNSET"] = "RESPONSE_CODE_UNSET";
    ResponseCode["SUCCESS"] = "SUCCESS";
    ResponseCode["REDIRECTED"] = "REDIRECTED";
    ResponseCode["BAD_REQUEST"] = "BAD_REQUEST";
    ResponseCode["ACCESS_DENIED"] = "ACCESS_DENIED";
    ResponseCode["NOT_FOUND"] = "NOT_FOUND";
    ResponseCode["TIMEOUT"] = "TIMEOUT";
    ResponseCode["REQUEST_TOO_LARGE"] = "REQUEST_TOO_LARGE";
    ResponseCode["SERVER_ERROR"] = "SERVER_ERROR";
    ResponseCode["CANCELLED"] = "CANCELLED";
    ResponseCode["PROXY_ERROR"] = "PROXY_ERROR";
    ResponseCode["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_ResponseCode || (main_ResponseCode = {}));
function main_responseCodeFromJSON(object) {
    switch (object) {
        case 0:
        case "RESPONSE_CODE_UNSET":
            return main_ResponseCode.RESPONSE_CODE_UNSET;
        case 1:
        case "SUCCESS":
            return main_ResponseCode.SUCCESS;
        case 2:
        case "REDIRECTED":
            return main_ResponseCode.REDIRECTED;
        case 3:
        case "BAD_REQUEST":
            return main_ResponseCode.BAD_REQUEST;
        case 4:
        case "ACCESS_DENIED":
            return main_ResponseCode.ACCESS_DENIED;
        case 5:
        case "NOT_FOUND":
            return main_ResponseCode.NOT_FOUND;
        case 6:
        case "TIMEOUT":
            return main_ResponseCode.TIMEOUT;
        case 7:
        case "REQUEST_TOO_LARGE":
            return main_ResponseCode.REQUEST_TOO_LARGE;
        case 8:
        case "SERVER_ERROR":
            return main_ResponseCode.SERVER_ERROR;
        case 9:
        case "CANCELLED":
            return main_ResponseCode.CANCELLED;
        case 10:
        case "PROXY_ERROR":
            return main_ResponseCode.PROXY_ERROR;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_ResponseCode.UNRECOGNIZED;
    }
}
function main_responseCodeToNumber(object) {
    switch (object) {
        case main_ResponseCode.RESPONSE_CODE_UNSET:
            return 0;
        case main_ResponseCode.SUCCESS:
            return 1;
        case main_ResponseCode.REDIRECTED:
            return 2;
        case main_ResponseCode.BAD_REQUEST:
            return 3;
        case main_ResponseCode.ACCESS_DENIED:
            return 4;
        case main_ResponseCode.NOT_FOUND:
            return 5;
        case main_ResponseCode.TIMEOUT:
            return 6;
        case main_ResponseCode.REQUEST_TOO_LARGE:
            return 7;
        case main_ResponseCode.SERVER_ERROR:
            return 8;
        case main_ResponseCode.CANCELLED:
            return 9;
        case main_ResponseCode.PROXY_ERROR:
            return 10;
        default:
            return 0;
    }
}
var main_GetOAuth2InfoResponse_GrantType;
(function (GetOAuth2InfoResponse_GrantType) {
    GetOAuth2InfoResponse_GrantType["GRANT_TYPE_UNSET"] = "GRANT_TYPE_UNSET";
    GetOAuth2InfoResponse_GrantType["AUTHORIZATION_CODE"] = "AUTHORIZATION_CODE";
    GetOAuth2InfoResponse_GrantType["AUTHORIZATION_CODE_WITH_PKCE"] = "AUTHORIZATION_CODE_WITH_PKCE";
    GetOAuth2InfoResponse_GrantType["IMPLICIT"] = "IMPLICIT";
    GetOAuth2InfoResponse_GrantType["CLIENT_CREDENTIALS"] = "CLIENT_CREDENTIALS";
    GetOAuth2InfoResponse_GrantType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_GetOAuth2InfoResponse_GrantType || (main_GetOAuth2InfoResponse_GrantType = {}));
function main_getOAuth2InfoResponse_GrantTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "GRANT_TYPE_UNSET":
            return main_GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET;
        case 1:
        case "AUTHORIZATION_CODE":
            return main_GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE;
        case 2:
        case "AUTHORIZATION_CODE_WITH_PKCE":
            return main_GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE_WITH_PKCE;
        case 3:
        case "IMPLICIT":
            return main_GetOAuth2InfoResponse_GrantType.IMPLICIT;
        case 4:
        case "CLIENT_CREDENTIALS":
            return main_GetOAuth2InfoResponse_GrantType.CLIENT_CREDENTIALS;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_GetOAuth2InfoResponse_GrantType.UNRECOGNIZED;
    }
}
function main_getOAuth2InfoResponse_GrantTypeToNumber(object) {
    switch (object) {
        case main_GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET:
            return 0;
        case main_GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE:
            return 1;
        case main_GetOAuth2InfoResponse_GrantType.AUTHORIZATION_CODE_WITH_PKCE:
            return 2;
        case main_GetOAuth2InfoResponse_GrantType.IMPLICIT:
            return 3;
        case main_GetOAuth2InfoResponse_GrantType.CLIENT_CREDENTIALS:
            return 4;
        default:
            return 0;
    }
}
var main_TokenExchangeError_TokenExchangeErrorType;
(function (TokenExchangeError_TokenExchangeErrorType) {
    TokenExchangeError_TokenExchangeErrorType["ERROR_TYPE_UNSET"] = "ERROR_TYPE_UNSET";
    TokenExchangeError_TokenExchangeErrorType["INVALID_REQUEST"] = "INVALID_REQUEST";
    TokenExchangeError_TokenExchangeErrorType["INVALID_CLIENT"] = "INVALID_CLIENT";
    TokenExchangeError_TokenExchangeErrorType["INVALID_GRANT"] = "INVALID_GRANT";
    TokenExchangeError_TokenExchangeErrorType["UNAUTHORIZED_CLIENT"] = "UNAUTHORIZED_CLIENT";
    TokenExchangeError_TokenExchangeErrorType["UNSUPPORTED_GRANT_TYPE"] = "UNSUPPORTED_GRANT_TYPE";
    TokenExchangeError_TokenExchangeErrorType["INVALID_SCOPE"] = "INVALID_SCOPE";
    TokenExchangeError_TokenExchangeErrorType["UNRECOGNIZED"] = "UNRECOGNIZED";
})(main_TokenExchangeError_TokenExchangeErrorType || (main_TokenExchangeError_TokenExchangeErrorType = {}));
function main_tokenExchangeError_TokenExchangeErrorTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "ERROR_TYPE_UNSET":
            return main_TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET;
        case 1:
        case "INVALID_REQUEST":
            return main_TokenExchangeError_TokenExchangeErrorType.INVALID_REQUEST;
        case 2:
        case "INVALID_CLIENT":
            return main_TokenExchangeError_TokenExchangeErrorType.INVALID_CLIENT;
        case 3:
        case "INVALID_GRANT":
            return main_TokenExchangeError_TokenExchangeErrorType.INVALID_GRANT;
        case 4:
        case "UNAUTHORIZED_CLIENT":
            return main_TokenExchangeError_TokenExchangeErrorType.UNAUTHORIZED_CLIENT;
        case 5:
        case "UNSUPPORTED_GRANT_TYPE":
            return main_TokenExchangeError_TokenExchangeErrorType.UNSUPPORTED_GRANT_TYPE;
        case 6:
        case "INVALID_SCOPE":
            return main_TokenExchangeError_TokenExchangeErrorType.INVALID_SCOPE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return main_TokenExchangeError_TokenExchangeErrorType.UNRECOGNIZED;
    }
}
function main_tokenExchangeError_TokenExchangeErrorTypeToNumber(object) {
    switch (object) {
        case main_TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET:
            return 0;
        case main_TokenExchangeError_TokenExchangeErrorType.INVALID_REQUEST:
            return 1;
        case main_TokenExchangeError_TokenExchangeErrorType.INVALID_CLIENT:
            return 2;
        case main_TokenExchangeError_TokenExchangeErrorType.INVALID_GRANT:
            return 3;
        case main_TokenExchangeError_TokenExchangeErrorType.UNAUTHORIZED_CLIENT:
            return 4;
        case main_TokenExchangeError_TokenExchangeErrorType.UNSUPPORTED_GRANT_TYPE:
            return 5;
        case main_TokenExchangeError_TokenExchangeErrorType.INVALID_SCOPE:
            return 6;
        default:
            return 0;
    }
}
function main_createBasePerformHttpCallRequest() {
    return {
        url: "",
        method: main_HttpRequestMethod.HTTP_METHOD_UNSET,
        headers: {},
        body: new Uint8Array(),
        apiSpecId: "",
        isStudioDev: false,
    };
}
const main_PerformHttpCallRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.method !== main_HttpRequestMethod.HTTP_METHOD_UNSET) {
            writer.uint32(16).int32(main_httpRequestMethodToNumber(message.method));
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            main_PerformHttpCallRequest_HeadersEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.body.length !== 0) {
            writer.uint32(34).bytes(message.body);
        }
        if (message.apiSpecId !== "") {
            writer.uint32(42).string(message.apiSpecId);
        }
        if (message.isStudioDev === true) {
            writer.uint32(48).bool(message.isStudioDev);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformHttpCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.method = main_httpRequestMethodFromJSON(reader.int32());
                    break;
                case 3:
                    const entry3 = main_PerformHttpCallRequest_HeadersEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.headers[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.body = reader.bytes();
                    break;
                case 5:
                    message.apiSpecId = reader.string();
                    break;
                case 6:
                    message.isStudioDev = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBasePerformHttpCallRequest();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.method = (_b = object.method) !== null && _b !== void 0 ? _b : main_HttpRequestMethod.HTTP_METHOD_UNSET;
        message.headers = Object.entries((_c = object.headers) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.body = (_d = object.body) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.apiSpecId = (_e = object.apiSpecId) !== null && _e !== void 0 ? _e : "";
        message.isStudioDev = (_f = object.isStudioDev) !== null && _f !== void 0 ? _f : false;
        return message;
    },
};
function main_createBasePerformHttpCallRequest_HeadersEntry() {
    return { key: "", value: "" };
}
const main_PerformHttpCallRequest_HeadersEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformHttpCallRequest_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePerformHttpCallRequest_HeadersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBasePerformHttpCallResponse() {
    return { code: 0, headers: {}, body: new Uint8Array() };
}
const main_PerformHttpCallResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            main_PerformHttpCallResponse_HeadersEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.body.length !== 0) {
            writer.uint32(26).bytes(message.body);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformHttpCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    const entry2 = main_PerformHttpCallResponse_HeadersEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.headers[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.body = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBasePerformHttpCallResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.headers = Object.entries((_b = object.headers) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.body = (_c = object.body) !== null && _c !== void 0 ? _c : new Uint8Array();
        return message;
    },
};
function main_createBasePerformHttpCallResponse_HeadersEntry() {
    return { key: "", value: "" };
}
const main_PerformHttpCallResponse_HeadersEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformHttpCallResponse_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePerformHttpCallResponse_HeadersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseGetOAuth2InfoRequest() {
    return { apiSpecId: "" };
}
const main_GetOAuth2InfoRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetOAuth2InfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.apiSpecId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a;
        const message = main_createBaseGetOAuth2InfoRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseGetOAuth2InfoResponse() {
    return { clientId: "", grantType: main_GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET, authorizationUrl: "", scope: "" };
}
const main_GetOAuth2InfoResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.clientId !== "") {
            writer.uint32(10).string(message.clientId);
        }
        if (message.grantType !== main_GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET) {
            writer.uint32(16).int32(main_getOAuth2InfoResponse_GrantTypeToNumber(message.grantType));
        }
        if (message.authorizationUrl !== "") {
            writer.uint32(26).string(message.authorizationUrl);
        }
        if (message.scope !== "") {
            writer.uint32(34).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseGetOAuth2InfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.clientId = reader.string();
                    break;
                case 2:
                    message.grantType = main_getOAuth2InfoResponse_GrantTypeFromJSON(reader.int32());
                    break;
                case 3:
                    message.authorizationUrl = reader.string();
                    break;
                case 4:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseGetOAuth2InfoResponse();
        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : "";
        message.grantType = (_b = object.grantType) !== null && _b !== void 0 ? _b : main_GetOAuth2InfoResponse_GrantType.GRANT_TYPE_UNSET;
        message.authorizationUrl = (_c = object.authorizationUrl) !== null && _c !== void 0 ? _c : "";
        message.scope = (_d = object.scope) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function main_createBaseTokenExchangeError() {
    return { error: main_TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET, errorDescription: "" };
}
const main_TokenExchangeError = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.error !== main_TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET) {
            writer.uint32(8).int32(main_tokenExchangeError_TokenExchangeErrorTypeToNumber(message.error));
        }
        if (message.errorDescription !== "") {
            writer.uint32(18).string(message.errorDescription);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseTokenExchangeError();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.error = main_tokenExchangeError_TokenExchangeErrorTypeFromJSON(reader.int32());
                    break;
                case 2:
                    message.errorDescription = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseTokenExchangeError();
        message.error = (_a = object.error) !== null && _a !== void 0 ? _a : main_TokenExchangeError_TokenExchangeErrorType.ERROR_TYPE_UNSET;
        message.errorDescription = (_b = object.errorDescription) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseTokenDetails() {
    return { accessToken: "", tokenType: "", expiresInSeconds: 0, refreshToken: "", scope: "" };
}
const main_TokenDetails = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.accessToken !== "") {
            writer.uint32(10).string(message.accessToken);
        }
        if (message.tokenType !== "") {
            writer.uint32(18).string(message.tokenType);
        }
        if (message.expiresInSeconds !== 0) {
            writer.uint32(24).int64(message.expiresInSeconds);
        }
        if (message.refreshToken !== "") {
            writer.uint32(34).string(message.refreshToken);
        }
        if (message.scope !== "") {
            writer.uint32(42).string(message.scope);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseTokenDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.accessToken = reader.string();
                    break;
                case 2:
                    message.tokenType = reader.string();
                    break;
                case 3:
                    message.expiresInSeconds = main_remote_api_service_longToNumber(reader.int64());
                    break;
                case 4:
                    message.refreshToken = reader.string();
                    break;
                case 5:
                    message.scope = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseTokenDetails();
        message.accessToken = (_a = object.accessToken) !== null && _a !== void 0 ? _a : "";
        message.tokenType = (_b = object.tokenType) !== null && _b !== void 0 ? _b : "";
        message.expiresInSeconds = (_c = object.expiresInSeconds) !== null && _c !== void 0 ? _c : 0;
        message.refreshToken = (_d = object.refreshToken) !== null && _d !== void 0 ? _d : "";
        message.scope = (_e = object.scope) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function main_createBasePerformTokenExchangeRequest() {
    return { apiSpecId: "", authorizationCode: "", codeVerifier: "" };
}
const main_PerformTokenExchangeRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        if (message.authorizationCode !== "") {
            writer.uint32(18).string(message.authorizationCode);
        }
        if (message.codeVerifier !== "") {
            writer.uint32(26).string(message.codeVerifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformTokenExchangeRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.apiSpecId = reader.string();
                    break;
                case 2:
                    message.authorizationCode = reader.string();
                    break;
                case 3:
                    message.codeVerifier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBasePerformTokenExchangeRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        message.authorizationCode = (_b = object.authorizationCode) !== null && _b !== void 0 ? _b : "";
        message.codeVerifier = (_c = object.codeVerifier) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function main_createBasePerformTokenExchangeResponse() {
    return { response: undefined };
}
const main_PerformTokenExchangeResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        var _a, _b;
        if (((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails") {
            main_TokenDetails.encode(message.response.tokenDetails, writer.uint32(10).fork()).ldelim();
        }
        if (((_b = message.response) === null || _b === void 0 ? void 0 : _b.$case) === "error") {
            main_TokenExchangeError.encode(message.response.error, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformTokenExchangeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.response = { $case: "tokenDetails", tokenDetails: main_TokenDetails.decode(reader, reader.uint32()) };
                    break;
                case 2:
                    message.response = { $case: "error", error: main_TokenExchangeError.decode(reader, reader.uint32()) };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBasePerformTokenExchangeResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.tokenDetails) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.tokenDetails) !== null) {
            message.response = {
                $case: "tokenDetails",
                tokenDetails: main_TokenDetails.fromPartial(object.response.tokenDetails),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "error" && ((_e = object.response) === null || _e === void 0 ? void 0 : _e.error) !== undefined && ((_f = object.response) === null || _f === void 0 ? void 0 : _f.error) !== null) {
            message.response = { $case: "error", error: main_TokenExchangeError.fromPartial(object.response.error) };
        }
        return message;
    },
};
function main_createBaseRefreshTokenRequest() {
    return { apiSpecId: "", refreshToken: "" };
}
const main_RefreshTokenRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.apiSpecId !== "") {
            writer.uint32(10).string(message.apiSpecId);
        }
        if (message.refreshToken !== "") {
            writer.uint32(18).string(message.refreshToken);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseRefreshTokenRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.apiSpecId = reader.string();
                    break;
                case 2:
                    message.refreshToken = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseRefreshTokenRequest();
        message.apiSpecId = (_a = object.apiSpecId) !== null && _a !== void 0 ? _a : "";
        message.refreshToken = (_b = object.refreshToken) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseRefreshTokenResponse() {
    return { response: undefined };
}
const main_RefreshTokenResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        var _a, _b;
        if (((_a = message.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails") {
            main_TokenDetails.encode(message.response.tokenDetails, writer.uint32(10).fork()).ldelim();
        }
        if (((_b = message.response) === null || _b === void 0 ? void 0 : _b.$case) === "error") {
            main_TokenExchangeError.encode(message.response.error, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseRefreshTokenResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.response = { $case: "tokenDetails", tokenDetails: main_TokenDetails.decode(reader, reader.uint32()) };
                    break;
                case 2:
                    message.response = { $case: "error", error: main_TokenExchangeError.decode(reader, reader.uint32()) };
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = main_createBaseRefreshTokenResponse();
        if (((_a = object.response) === null || _a === void 0 ? void 0 : _a.$case) === "tokenDetails" &&
            ((_b = object.response) === null || _b === void 0 ? void 0 : _b.tokenDetails) !== undefined &&
            ((_c = object.response) === null || _c === void 0 ? void 0 : _c.tokenDetails) !== null) {
            message.response = {
                $case: "tokenDetails",
                tokenDetails: main_TokenDetails.fromPartial(object.response.tokenDetails),
            };
        }
        if (((_d = object.response) === null || _d === void 0 ? void 0 : _d.$case) === "error" && ((_e = object.response) === null || _e === void 0 ? void 0 : _e.error) !== undefined && ((_f = object.response) === null || _f === void 0 ? void 0 : _f.error) !== null) {
            message.response = { $case: "error", error: main_TokenExchangeError.fromPartial(object.response.error) };
        }
        return message;
    },
};
function main_createBasePerformApiCallRequest() {
    return {
        apiSpecSetId: "",
        endpointRefId: "",
        parameters: {},
        body: new Uint8Array(),
        lensId: "",
        isStudioDev: false,
        cacheTtlSec: 0,
        linkedResources: [],
    };
}
const main_PerformApiCallRequest = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.apiSpecSetId !== "") {
            writer.uint32(10).string(message.apiSpecSetId);
        }
        if (message.endpointRefId !== "") {
            writer.uint32(18).string(message.endpointRefId);
        }
        Object.entries(message.parameters).forEach(([key, value]) => {
            main_PerformApiCallRequest_ParametersEntry.encode({ key: key, value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.body.length !== 0) {
            writer.uint32(34).bytes(message.body);
        }
        if (message.lensId !== "") {
            writer.uint32(42).string(message.lensId);
        }
        if (message.isStudioDev === true) {
            writer.uint32(48).bool(message.isStudioDev);
        }
        if (message.cacheTtlSec !== 0) {
            writer.uint32(56).int32(message.cacheTtlSec);
        }
        for (const v of message.linkedResources) {
            main_LinkedResource.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformApiCallRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.apiSpecSetId = reader.string();
                    break;
                case 2:
                    message.endpointRefId = reader.string();
                    break;
                case 3:
                    const entry3 = main_PerformApiCallRequest_ParametersEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.parameters[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.body = reader.bytes();
                    break;
                case 5:
                    message.lensId = reader.string();
                    break;
                case 6:
                    message.isStudioDev = reader.bool();
                    break;
                case 7:
                    message.cacheTtlSec = reader.int32();
                    break;
                case 8:
                    message.linkedResources.push(main_LinkedResource.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = main_createBasePerformApiCallRequest();
        message.apiSpecSetId = (_a = object.apiSpecSetId) !== null && _a !== void 0 ? _a : "";
        message.endpointRefId = (_b = object.endpointRefId) !== null && _b !== void 0 ? _b : "";
        message.parameters = Object.entries((_c = object.parameters) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.body = (_d = object.body) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.lensId = (_e = object.lensId) !== null && _e !== void 0 ? _e : "";
        message.isStudioDev = (_f = object.isStudioDev) !== null && _f !== void 0 ? _f : false;
        message.cacheTtlSec = (_g = object.cacheTtlSec) !== null && _g !== void 0 ? _g : 0;
        message.linkedResources = ((_h = object.linkedResources) === null || _h === void 0 ? void 0 : _h.map((e) => main_LinkedResource.fromPartial(e))) || [];
        return message;
    },
};
function main_createBasePerformApiCallRequest_ParametersEntry() {
    return { key: "", value: "" };
}
const main_PerformApiCallRequest_ParametersEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformApiCallRequest_ParametersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePerformApiCallRequest_ParametersEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBasePerformApiCallResponse() {
    return {
        responseCode: main_ResponseCode.RESPONSE_CODE_UNSET,
        metadata: {},
        body: new Uint8Array(),
        userLocationUsed: false,
        linkedResources: [],
    };
}
const main_PerformApiCallResponse = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.responseCode !== main_ResponseCode.RESPONSE_CODE_UNSET) {
            writer.uint32(8).int32(main_responseCodeToNumber(message.responseCode));
        }
        Object.entries(message.metadata).forEach(([key, value]) => {
            main_PerformApiCallResponse_MetadataEntry.encode({ key: key, value }, writer.uint32(18).fork()).ldelim();
        });
        if (message.body.length !== 0) {
            writer.uint32(26).bytes(message.body);
        }
        if (message.userLocationUsed === true) {
            writer.uint32(32).bool(message.userLocationUsed);
        }
        for (const v of message.linkedResources) {
            main_LinkedResource.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformApiCallResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.responseCode = main_responseCodeFromJSON(reader.int32());
                    break;
                case 2:
                    const entry2 = main_PerformApiCallResponse_MetadataEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.metadata[entry2.key] = entry2.value;
                    }
                    break;
                case 3:
                    message.body = reader.bytes();
                    break;
                case 4:
                    message.userLocationUsed = reader.bool();
                    break;
                case 5:
                    message.linkedResources.push(main_LinkedResource.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBasePerformApiCallResponse();
        message.responseCode = (_a = object.responseCode) !== null && _a !== void 0 ? _a : main_ResponseCode.RESPONSE_CODE_UNSET;
        message.metadata = Object.entries((_b = object.metadata) !== null && _b !== void 0 ? _b : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.body = (_c = object.body) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.userLocationUsed = (_d = object.userLocationUsed) !== null && _d !== void 0 ? _d : false;
        message.linkedResources = ((_e = object.linkedResources) === null || _e === void 0 ? void 0 : _e.map((e) => main_LinkedResource.fromPartial(e))) || [];
        return message;
    },
};
function main_createBasePerformApiCallResponse_MetadataEntry() {
    return { key: "", value: "" };
}
const main_PerformApiCallResponse_MetadataEntry = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBasePerformApiCallResponse_MetadataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBasePerformApiCallResponse_MetadataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function main_createBaseLinkedResource() {
    return { url: "", encryptionKey: new Uint8Array() };
}
const main_LinkedResource = {
    encode(message, writer = main_minimal_default().Writer.create()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        if (message.encryptionKey.length !== 0) {
            writer.uint32(18).bytes(message.encryptionKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof (main_minimal_default()).Reader ? input : new (main_minimal_default()).Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = main_createBaseLinkedResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.url = reader.string();
                    break;
                case 2:
                    message.encryptionKey = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseLinkedResource();
        message.url = (_a = object.url) !== null && _a !== void 0 ? _a : "";
        message.encryptionKey = (_b = object.encryptionKey) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
var main_remote_api_service_globalThis = (() => {
    if (typeof main_remote_api_service_globalThis !== "undefined")
        return main_remote_api_service_globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof __webpack_require__.g !== "undefined")
        return __webpack_require__.g;
    throw "Unable to locate global object";
})();
function main_remote_api_service_longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new main_remote_api_service_globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if ((main_minimal_default()).util.Long !== (main_long_default())) {
    (main_minimal_default()).util.Long = (main_long_default());
    main_minimal_default().configure();
}
//# sourceMappingURL=remote_api_service.js.map
;// ./node_modules/@snap/camera-kit/lib/extensions/UriHandlers.js


const main_SEPARATOR = "://";
function main_extractSchemeAndRoute(uri) {
    const separatorIndex = uri.indexOf(main_SEPARATOR);
    const scheme = uri.slice(0, separatorIndex);
    const route = uri.slice(separatorIndex + main_SEPARATOR.length);
    return { scheme, route };
}
function main_isUri(value) {
    return main_typeguards_isString(value) && value.includes(main_SEPARATOR);
}
function main_isUriHandler(value) {
    return (main_typeguards_isRecord(value) &&
        (main_isUri(value.uri) || main_isArrayOfType(main_isUri, value.uri)) &&
        main_typeguards_isFunction(value.handleRequest) &&
        (main_isUndefined(value.cancelRequest) || main_typeguards_isFunction(value.cancelRequest)));
}
function main_isUriHandlers(value) {
    return main_isArrayOfType(main_isUriHandler, value);
}
function main_isUriResponse(value) {
    return (main_typeguards_isRecord(value) &&
        main_isNumber(value.code) &&
        main_typeguards_isString(value.description) &&
        main_typeguards_isString(value.contentType) &&
        (main_isArrayBuffer(value.data) || main_isTypedArray(value.data)) &&
        (main_isUndefined(value.metadata) || main_typeguards_predicateRecordValues(main_typeguards_isString)(value.metadata)));
}
/**
 * An extension point for client URI handlers.
 * @internal
 */
const main_uriHandlersFactory = main_Injectable("UriHandlers", () => {
    const uriHandlers = [];
    return uriHandlers;
});
//# sourceMappingURL=UriHandlers.js.map
;// ./node_modules/@snap/camera-kit/lib/extensions/RemoteApiServices.js







// NOTE: There's potential for overloads when reporting metrics if reporting is triggered on each frame,
// (i.e., when the lens sends Remote API requests every frame).
// As of now, this isn't a concern because src/metrics/operational/operationalMetricsReporter.ts aggregates
// "count" metrics into a single metric within a batch, and the Remote API service currently
// reports only "count" metrics. For instance, if 30 metrics with the same name are generated per second,
// given the current bundle size of 100 operational metrics, there will be one metrics report approximately
// every 3.3 seconds.
// In the future, if we opt to report "histogram" or other metric types, they must be approached with caution:
// either the operationalMetricsReporter should be enhanced to aggregate such metrics,
// or the Remote API service should manage it directly.
// Mobiles ticket: https://jira.sc-corp.net/browse/CAMKIT-3092
const main_RemoteApiServices_logger = main_getLogger("RemoteApiServices");
const main_uriResponseOkCode = 200;
const main_apiResponseStatusHeader = ":sc_lens_api_status";
const main_apiBinaryContentType = "application/octet-stream";
const main_remoteApiInfoProtobufTypeUrl = "type.googleapis.com/com.snap.camerakit.v3.features.RemoteApiInfo";
const main_statusToResponseCodeMap = {
    success: main_ResponseCode.SUCCESS,
    redirected: main_ResponseCode.REDIRECTED,
    badRequest: main_ResponseCode.BAD_REQUEST,
    accessDenied: main_ResponseCode.ACCESS_DENIED,
    notFound: main_ResponseCode.NOT_FOUND,
    timeout: main_ResponseCode.TIMEOUT,
    requestTooLarge: main_ResponseCode.REQUEST_TOO_LARGE,
    serverError: main_ResponseCode.SERVER_ERROR,
    cancelled: main_ResponseCode.CANCELLED,
    proxyError: main_ResponseCode.PROXY_ERROR,
};
/**
 * Invokes the cancellation handler associated with the provided key and removes it from the collection of handlers.
 */
function main_callCancellationHandler(cancellationHandlers, ...keys) {
    var _a;
    for (const key of keys) {
        (_a = cancellationHandlers.get(key)) === null || _a === void 0 ? void 0 : _a();
        cancellationHandlers.delete(key);
    }
}
/**
 * Removes the specified lenses' metadata from the cache and invokes their cancellation callbacks.
 *
 * @param lensRequestState The state representing the lens cache.
 * @param lensIds An array of lens IDs to be removed from the cache
 * and for which the cancellation callbacks will be invoked.
 */
function main_handleLensApplicationEnd(lensRequestState, ...lensIds) {
    for (const lensId of lensIds) {
        const state = lensRequestState.get(lensId);
        if (state) {
            main_callCancellationHandler(state.cancellationHandlers, ...state.cancellationHandlers.keys());
            lensRequestState.delete(lensId);
        }
    }
}
const main_remoteApiServicesFactory = main_Injectable("remoteApiServices", () => {
    const remoteApiServices = [];
    return remoteApiServices;
});
/**
 * Provides a URI handler that searches for a match within the provided services to handle Remote API requests,
 * i.e., those whose URI starts with 'app://remote-api/performApiRequest'.
 */
function main_getRemoteApiUriHandler(registeredServices, sessionState, lensState, lensRepository, reporter) {
    // Groups services by spec ID for faster lookups.
    const registeredServiceMap = new Map();
    for (const service of registeredServices) {
        const existingServices = registeredServiceMap.get(service.apiSpecId) || [];
        registeredServiceMap.set(service.apiSpecId, [...existingServices, service]);
    }
    const uriRequests = new main_Subject();
    const uriCancelRequests = new main_Subject();
    const lensRequestState = new Map();
    const lensTurnOffEvents = lensState.events.pipe(main_forActions("turnedOff"), main_tap(([action]) => main_handleLensApplicationEnd(lensRequestState, action.data.id)));
    const uriRequestEvents = uriRequests.pipe(main_map((uriRequest) => {
        var _a, _b;
        const lensId = uriRequest.lens.id;
        if (!lensRequestState.has(lensId)) {
            lensRequestState.set(lensId, {
                // Prepares a collection to store cancellation handlers.
                // A specific handler will be invoked when a cancellation request is issued by the lens.
                // All handlers will be invoked when the lens is replaced with another one or the session
                // is destroyed.
                cancellationHandlers: new Map(),
                // Parse lens metadata to obtain supported Remote API specs.
                supportedSpecIds: new Set(((_b = (_a = lensRepository.getLensMetadata(lensId)) === null || _a === void 0 ? void 0 : _a.featureMetadata) !== null && _b !== void 0 ? _b : [])
                    .filter((feature) => feature.typeUrl === main_remoteApiInfoProtobufTypeUrl)
                    .flatMap((any) => main_RemoteApiInfo.decode(any.value).apiSpecIds)),
            });
        }
        const requestState = lensRequestState.get(lensId);
        // Extracts the spec ID and endpoint ID from the provided Remote API request URI.
        // The given URI is expected to conform to the following specification:
        // eslint-disable-next-line max-len
        // https://docs.google.com/document/d/18fbGYDhD2N_aMTe4ZLY4QKeCSoMeJuklG28TutDzLZc/edit#bookmark=id.p2y39gwgbm4g
        const { route } = main_extractSchemeAndRoute(uriRequest.request.uri);
        const [specId, endpointIdWithQuery] = route.split("/").slice(2);
        const [endpointId] = endpointIdWithQuery.split("?");
        return { uriRequest, specId, endpointId, requestState };
    }), 
    // only handle requests for API spec ID that current lens supports
    main_filter(({ specId, requestState }) => requestState.supportedSpecIds.has(specId)), 
    // only handle requests if we have a registered service for it
    main_filter(({ specId }) => registeredServiceMap.has(specId)), main_map(({ uriRequest, specId, endpointId, requestState }) => {
        var _a;
        const dimensions = new Map([["specId", specId]]);
        reporter.count("lens_remote-api_requests", 1, dimensions);
        const remoteApiRequest = {
            apiSpecId: specId,
            body: uriRequest.request.data,
            endpointId,
            parameters: uriRequest.request.metadata,
        };
        // Looks for the first Remote API request handler.
        for (const service of (_a = registeredServiceMap.get(specId)) !== null && _a !== void 0 ? _a : []) {
            let requestHandler = undefined;
            try {
                requestHandler = service.getRequestHandler(remoteApiRequest, uriRequest.lens);
            }
            catch (error) {
                main_RemoteApiServices_logger.warn("Client's Remote API request handler factory threw an error.", error);
            }
            if (requestHandler) {
                reporter.count("lens_remote-api_handled-requests", 1, dimensions);
                let cancellationHandler = undefined;
                try {
                    // Calls client's Remote API handler to process the request.
                    cancellationHandler = requestHandler((response) => {
                        var _a;
                        reporter.count("lens_remote-api_responses", 1, dimensions);
                        const responseCode = (_a = main_statusToResponseCodeMap[response.status]) !== null && _a !== void 0 ? _a : main_ResponseCode.UNRECOGNIZED;
                        const uriResponse = {
                            code: main_uriResponseOkCode,
                            description: "",
                            contentType: main_apiBinaryContentType,
                            data: response.body,
                            metadata: Object.assign(Object.assign({}, response.metadata), { [main_apiResponseStatusHeader]: main_responseCodeToNumber(responseCode).toString() }),
                        };
                        uriRequest.reply(uriResponse);
                    });
                }
                catch (error) {
                    main_RemoteApiServices_logger.warn("Client's Remote API request handler threw an error.", error);
                }
                if (typeof cancellationHandler === "function") {
                    requestState.cancellationHandlers.set(uriRequest.request.identifier, () => {
                        try {
                            cancellationHandler();
                        }
                        catch (error) {
                            main_RemoteApiServices_logger.warn("Client's Remote API request cancellation handler threw an error.", error);
                        }
                    });
                }
                break;
            }
        }
    }));
    const uriCancelRequestEvents = uriCancelRequests.pipe(main_tap((uriRequest) => {
        var _a;
        const cancellationHandlers = (_a = lensRequestState.get(uriRequest.lens.id)) === null || _a === void 0 ? void 0 : _a.cancellationHandlers;
        if (cancellationHandlers) {
            main_callCancellationHandler(cancellationHandlers, uriRequest.request.requestId);
        }
    }));
    main_merge(lensTurnOffEvents, uriRequestEvents, uriCancelRequestEvents)
        .pipe(main_catchError((error, sourcePipe) => {
        // The expectation is that if an error occurs, it happens in our own implementation,
        // because app callbacks are wrapped with try..catch blocks.
        // Therefore, we would like to report this error.
        main_RemoteApiServices_logger.error(error);
        reporter.count("lens_remote-api_errors", 1);
        // Return the source pipe so that we can retry the pipe instead of just completing it.
        return sourcePipe;
    }), 
    // When the pipe completes due to an error,
    // we want to resubscribe to the original pipe to keep it alive.
    main_retry(), main_takeUntil(sessionState.events.pipe(main_forActions("destroy"))))
        .subscribe({
        complete: () => main_handleLensApplicationEnd(lensRequestState, ...lensRequestState.keys()),
    });
    return {
        uri: "app://remote-api/performApiRequest",
        handleRequest(request, reply, lens) {
            uriRequests.next({ request, reply, lens });
        },
        cancelRequest(request, lens) {
            uriCancelRequests.next({ request, lens });
        },
    };
}
//# sourceMappingURL=RemoteApiServices.js.map
;// ./node_modules/@snap/camera-kit/lib/extensions/uriHandlersRegister.js











const main_uriHandlersRegister_logger = main_getLogger("uriHandlersRegister");
/**
 * Registers URI handlers within LensCore.
 * @internal
 */
const main_registerUriHandlers = main_Injectable("registerUriHandlers", [
    main_lensCoreFactory.token,
    main_lensStateFactory.token,
    main_uriHandlersFactory.token,
    main_lensKeyboardFactory.token,
    main_remoteApiServicesFactory.token,
    main_lensRepositoryFactory.token,
    main_sessionStateFactory.token,
    main_operationalMetricReporterFactory.token,
], (lensCore, lensState, userHandlers, lensKeyboard, remoteApiServices, lensRepository, sessionState, operationalMetricsReporter) => {
    if (!main_isUriHandlers(userHandlers)) {
        throw new Error("Expected an array of UriHandler objects");
    }
    // Users may define UriHandlers using the uriHandlersFactory.token, but we need to add some internally-defined
    // handlers (lens keyboard and Remote API) before registering handlers with LensCore.
    const allHandlers = userHandlers.concat(lensKeyboard.uriHandler, main_getRemoteApiUriHandler(remoteApiServices, sessionState, lensState, lensRepository, operationalMetricsReporter));
    for (const { uri, handleRequest, cancelRequest } of allHandlers) {
        const uris = Array.isArray(uri) ? uri : [uri];
        for (const { scheme, route } of uris.map(main_extractSchemeAndRoute)) {
            lensCore.registerUriListener(scheme, route, {
                handleRequest: (request) => {
                    const reply = (response) => {
                        if (!main_isUriResponse(response)) {
                            throw new Error("Expected UriResponse object");
                        }
                        lensCore.provideUriResponse(request.identifier, response);
                    };
                    // Since lenses are the only things that make URI requests, we expect to always be in the
                    // "lensApplied" state – we'll sanity check, though, and log a warning if we're not.
                    const state = lensState.getState();
                    if (main_isState(state, "noLensApplied")) {
                        main_uriHandlersRegister_logger.warn(`Got a URI request for ${request.uri}, but there is no active lens. The ` +
                            `request will not be processed.`);
                        return;
                    }
                    // NOTE: we do not handle any error thrown on an extension side when handleRequest() is called.
                    // That responsibility is delegated to the extension by design and that is exactly what Android
                    // and iOS SDKs do.
                    handleRequest(request, reply, state.data);
                },
                cancelRequest: (request) => {
                    if (cancelRequest) {
                        const state = lensState.getState();
                        if (main_isState(state, "noLensApplied")) {
                            main_uriHandlersRegister_logger.warn(`Got a URI cancel request for ${request.uri}, but there is no active ` +
                                `lens. The cancel request will not be processed.`);
                            return;
                        }
                        cancelRequest(request, state.data);
                    }
                },
            });
        }
    }
});
//# sourceMappingURL=uriHandlersRegister.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js

function main_scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
    return function (source, subscriber) {
        var hasState = hasSeed;
        var state = seed;
        var index = 0;
        source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
            var i = index++;
            state = hasState
                ?
                    accumulator(state, value, i)
                :
                    ((hasState = true), value);
            emitOnNext && subscriber.next(state);
        }, emitBeforeComplete &&
            (function () {
                hasState && subscriber.next(state);
                subscriber.complete();
            })));
    };
}
//# sourceMappingURL=scanInternals.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/scan.js


function main_scan(accumulator, seed) {
    return main_operate(main_scanInternals(accumulator, seed, arguments.length >= 2, true));
}
//# sourceMappingURL=scan.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportGlobalException.js










const main_logMethods = main_entries(main_logLevelMap).map(([level]) => level);
// How many log entries to include as the error context
const main_maxBufferedEntries = 15;
const main_contextSeparator = "\n\n----------------- Context -----------------\n\n";
const main_methodLength = main_logMethods.reduce((max, method) => Math.max(max, method.length), 0);
function main_getContextString(logEntries) {
    const result = [];
    for (const { entry, count, lastTime } of logEntries) {
        const time = entry.time.toISOString();
        const method = entry.level.padStart(main_methodLength);
        const messages = entry.messages.map(main_prettyPrintMessage).join(" ");
        let dupSuffix = count > 1 ? ` (Repeated ${count} times with the last occurrence at ${lastTime.toISOString()})` : "";
        result.push(`${time} [${entry.module}] ${method}: ${messages}${dupSuffix}`);
    }
    return result.join("\n");
}
/**
 * Pretty print a log message.
 */
function main_prettyPrintMessage(message) {
    if (message instanceof Error)
        return main_reportGlobalException_stringifyError(message);
    if (message instanceof Date)
        return message.toISOString();
    return message + "";
}
/**
 * Returns an error message for a given error, and also appends the error message of any nested error, if one exists.
 * @param error Error to stringify.
 * @returns Error message including nested error messages.
 */
function main_reportGlobalException_stringifyError(error) {
    const cause = error.cause ? `; Caused by ${main_reportGlobalException_stringifyError(main_errorHelpers_ensureError(error.cause))}` : "";
    return `${error.name}: ${error.message}${cause}`;
}
function main_reportExceptionToBlizzard(logEntries, metricsEventTarget, reporter, lensState) {
    logEntries
        .pipe(main_scan(({ entries }, newEntry) => {
        const lastEntry = entries[entries.length - 1];
        const isNewEntryRepeated = lastEntry &&
            lastEntry.entry.messages.join() === newEntry.messages.join() &&
            lastEntry.entry.level === newEntry.level;
        if (isNewEntryRepeated) {
            lastEntry.count += 1;
            lastEntry.lastTime = newEntry.time;
        }
        else {
            entries.push({
                entry: newEntry,
                count: 1,
                lastTime: newEntry.time,
            });
        }
        return {
            entries: entries.slice(-main_maxBufferedEntries),
            recent: newEntry,
        };
    }, 
    // Start with a dummy recent entry -- it gets overridden each time we handle a log entry.
    { entries: [], recent: { time: new Date(), module: "any", level: "debug", messages: [] } }), main_filter(({ recent }) => recent.level === "error"), main_map(({ entries, recent }) => ({
        context: entries,
        error: recent.messages.find((e) => e instanceof Error),
    })), main_filter(({ error }) => !!error))
        .subscribe(({ error, context }) => {
        const currentLensState = lensState === null || lensState === void 0 ? void 0 : lensState.getState();
        const lensId = currentLensState && !main_isState(currentLensState, "noLensApplied") ? currentLensState.data.id : "none";
        metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("exception", {
            name: "exception",
            lensId,
            type: error.name,
            reason: `${main_reportGlobalException_stringifyError(error)}${main_contextSeparator}${main_getContextString(context)}`,
        }));
        reporter.count("handled_exception", 1, new Map([["type", error.name]]));
    });
}
/**
 * Reports log entries to Blizzard when there is no CameraKit session yet.
 *
 * @internal
 */
const main_reportGlobalException = main_Injectable("reportGlobalException", [main_logEntriesFactory.token, main_metricsEventTargetFactory.token, main_operationalMetricReporterFactory.token], (logEntries, metricsEventTarget, reporter) => {
    // Initially we log exceptions without any lens context
    const cancellationSubject = new main_Subject();
    main_reportExceptionToBlizzard(logEntries.pipe(main_takeUntil(cancellationSubject)), metricsEventTarget, reporter);
    // Later session scope reporter triggers cancellation of the global one
    // and initiates exception reporting with a lens context
    return {
        attachLensContext: (lensState) => {
            cancellationSubject.next();
            main_reportExceptionToBlizzard(logEntries, metricsEventTarget, reporter, lensState);
        },
    };
});
//# sourceMappingURL=reportGlobalException.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportSessionException.js



/**
 * Reports log entries to Blizzard during a CameraKit session.
 *
 * @internal
 */
const main_reportSessionException = main_Injectable("reportSessionException", [main_reportGlobalException.token, main_lensStateFactory.token], (globalExceptionReporter, lensState) => {
    globalExceptionReporter.attachLensContext(lensState);
});
//# sourceMappingURL=reportSessionException.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportBenchmarks.js






// Allowlist the benchmarks we wish to report.
const main_reportableBenchmarks = ["gflops"];
const main_reportBenchmarks = main_Injectable("reportBenchmarks", [main_metricsEventTargetFactory.token, main_operationalMetricReporterFactory.token, main_configurationToken], (metricsEventTarget, reporter, config) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    if (config.lensPerformance === undefined)
        return;
    // Safety: config.lensPerformance cannot reject – all Promises contained in CameraKitConfiguration have
    // catch blocks which return a default value.
    const lensPerformance = yield config.lensPerformance;
    const baseBenchmark = {
        name: "benchmarkComplete",
        performanceCluster: lensPerformance.cluster,
        webglRendererInfo: lensPerformance.webglRendererInfo,
    };
    const dimensions = new Map([["performance_cluster", lensPerformance.cluster.toString()]]);
    for (const benchmark of lensPerformance.benchmarks) {
        if (!main_reportableBenchmarks.includes(benchmark.name))
            continue;
        const benchmarkComplete = Object.assign(Object.assign({}, baseBenchmark), { benchmarkName: benchmark.name, benchmarkValue: benchmark.value });
        metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("benchmarkComplete", benchmarkComplete));
        reporter.histogram(`benchmark.${benchmark.name}`, benchmark.value, dimensions);
    }
}));
//# sourceMappingURL=reportBenchmarks.js.map
;// ./node_modules/@snap/camera-kit/lib/events/scan.js


/**
 * Each time an event is emitted, call a given accumulator function with two arguments: some state of type S and the
 * event. The accumulator returns a new state. `scan` returns a new event emitter which emits an event each time a new
 * state is produced by the accumulator.
 *
 * This can be used to implement a Redux-style state management architecture.
 *
 * @param seedState Some initial state, passed to the accumulator when the first event is emitted.
 * @returns A function which takes a source {@link TypedEventTarget}, a list of event types emitted by that target to
 * which to listen, and the accumulator function. The accumulator is called each time an event of the given type(s) is
 * emitted on the source. It is passed the current state and the event, and must return a new state.
 */
const main_scan_scan = (seedState) => (source, eventTypes, accumulator) => {
    let state = seedState;
    const sink = new main_TypedEventTarget();
    const listener = (event) => {
        state = accumulator(state, event);
        sink.dispatchEvent(new main_TypedCustomEvent("state", state));
    };
    // We'll use Proxies to make sure that event listeners are added/removed at the appropriate time.
    // Callers can then control when to clean up the listeners we add here in a transparent way –
    // by just removing the listener on the returned event target.
    //
    // We also prevent multiple listeners on the sink, as a simplification.
    let hasListener = false;
    sink.addEventListener = new Proxy(sink.addEventListener, {
        apply: (target, thisArg, args) => {
            if (hasListener)
                throw new Error("Cannot add another event listener. The TypedEventTarget returned by scan only " +
                    "supports a single listener, and one has already been added.");
            hasListener = true;
            eventTypes.forEach((eventType) => source.addEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    sink.removeEventListener = new Proxy(sink.removeEventListener, {
        apply: (target, thisArg, args) => {
            eventTypes.forEach((eventType) => source.removeEventListener(eventType, listener));
            target.apply(thisArg, args);
        },
    });
    return sink;
};
//# sourceMappingURL=scan.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensAndAssetDownload.js








const main_relevantRequestTypes = ["lens_content", "asset"];
const main_isLensOrAssetRequest = (value) => {
    const requestType = value["requestType"];
    // Safety: the cast makes the type less specific so we can check if any string is present in the tuple.
    return typeof requestType === "string" && main_relevantRequestTypes.includes(requestType);
};
const main_reportLensAndAssetDownload = main_Injectable("reportLensAndAssetDownload", [
    main_metricsEventTargetFactory.token,
    main_operationalMetricReporterFactory.token,
    main_requestStateEventTargetFactory.token,
], (metricsEventTarget, reporter, requestStateEventTarget) => {
    main_scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        const { inProgress } = state;
        const { dimensions, requestId, timeMs } = event.detail;
        if (!main_isLensOrAssetRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                inProgress.set(requestId, { startTimeMs: timeMs });
                return { name: "inProgress", inProgress };
            case "completed":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadTimeSec = (timeMs - completedRequest.startTimeMs) / 1000;
                const { sizeByte } = event.detail;
                switch (dimensions.requestType) {
                    case "lens_content":
                        return {
                            name: "completed",
                            inProgress,
                            event: new main_TypedCustomEvent("lensDownload", {
                                name: "lensDownload",
                                lensId: dimensions.lensId,
                                automaticDownload: false,
                                sizeByte,
                                downloadTimeSec,
                            }),
                        };
                    case "asset":
                        return {
                            name: "completed",
                            inProgress,
                            event: new main_TypedCustomEvent("assetDownload", {
                                name: "assetDownload",
                                assetId: dimensions.assetId,
                                automaticDownload: false,
                                sizeByte,
                                downloadTimeSec,
                            }),
                        };
                    default:
                        main_assertUnreachable(dimensions);
                }
            case "errored":
                const erroredRequest = inProgress.get(requestId);
                if (!erroredRequest)
                    return state;
                inProgress.delete(requestId);
                const error = event.detail.error;
                return {
                    name: "completed",
                    inProgress,
                    event: new main_TypedCustomEvent("exception", {
                        name: "exception",
                        lensId: dimensions.lensId,
                        type: dimensions.requestType === "lens_content" ? "lens" : "asset",
                        reason: main_stringifyError(error),
                    }),
                };
            default:
                main_assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        metricsEventTarget.dispatchEvent(state.event);
        if (state.event.detail.name === "exception") {
            reporter.count("handled_exception", 1, new Map([["type", state.event.detail.type]]));
        }
    });
});
//# sourceMappingURL=reportLensAndAssetDownload.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportHttpMetrics.js








const main_getAdditionalDimensions = (dimensions) => {
    switch (dimensions.requestType) {
        case "lens_content":
        case "asset":
            return [];
        case main_COF_REQUEST_TYPE:
            return [["delta", dimensions.delta]];
        default:
            main_assertUnreachable(dimensions);
    }
};
const main_getContentType = (dimensions) => {
    switch (dimensions.requestType) {
        case "lens_content":
            return "lens_content";
        case "asset":
            return dimensions.assetType;
        case main_COF_REQUEST_TYPE:
            return main_COF_REQUEST_TYPE;
        default:
            main_assertUnreachable(dimensions);
    }
};
const main_getSizeKb = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            return 0;
        case "completed":
            return event.detail.sizeByte / 1024;
        default:
            main_assertUnreachable(event);
    }
};
const main_getStatus = (event) => {
    switch (event.type) {
        case "started":
        case "errored":
            // We'll use status 0 to indicate that an exception occurred during the request. This is somewhat in keeping
            // with browsers that set the response status to 0 if the request was not able to be made (e.g. CORs
            // preflight failed, or the user canceled the request).
            return "0";
        case "completed":
            return event.detail.status.toString();
        default:
            main_assertUnreachable(event);
    }
};
const main_isRelevantRequest = (value) => {
    return main_isLensOrAssetRequest(value) || value["requestType"] === main_COF_REQUEST_TYPE;
};
const main_reportHttpMetrics = main_Injectable("reportHttpMetrics", [main_operationalMetricReporterFactory.token, main_requestStateEventTargetFactory.token], (reporter, requestStateEventTarget) => {
    main_scan_scan({ name: "inProgress", inProgress: new Map() })(requestStateEventTarget, ["started", "completed", "errored"], (state, event) => {
        var _a;
        const { inProgress } = state;
        const { dimensions, requestId, timeMs } = event.detail;
        if (!main_isRelevantRequest(dimensions))
            return state;
        switch (event.type) {
            case "started":
                inProgress.set(requestId, { startTimeMs: timeMs });
                return { name: "inProgress", inProgress };
            case "completed":
            case "errored":
                const completedRequest = inProgress.get(requestId);
                if (!completedRequest)
                    return state;
                inProgress.delete(requestId);
                const downloadTimeMs = timeMs - completedRequest.startTimeMs;
                const downloadSizeKb = main_getSizeKb(event);
                const status = main_getStatus(event);
                const operationalDimensions = new Map([
                    ["content_type", main_getContentType(dimensions)],
                    ["network_type", (_a = main_getPlatformInfo().connectionType) !== null && _a !== void 0 ? _a : "unknown"],
                    ["status", status],
                ]);
                for (const [key, value] of main_getAdditionalDimensions(dimensions)) {
                    operationalDimensions.set(key, value);
                }
                return {
                    name: "completed",
                    inProgress: state.inProgress,
                    dimensions: operationalDimensions,
                    downloadSizeKb,
                    downloadTimeMs,
                };
            default:
                main_assertUnreachable(event);
        }
    }).addEventListener("state", ({ detail: state }) => {
        if (state.name !== "completed")
            return;
        const { dimensions, downloadTimeMs, downloadSizeKb } = state;
        reporter.count("download_finished", 1, dimensions);
        reporter.timer("download_latency", downloadTimeMs, dimensions);
        reporter.histogram("download_size_kb", downloadSizeKb, dimensions);
    });
});
//# sourceMappingURL=reportHttpMetrics.js.map
;// ./node_modules/@snap/camera-kit/lib/generated-proto/blizzard/cameraKitEvents.js
const main_ServerEvent = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
        const message = main_createBaseServerEvent();
        message.eventName = (_a = object.eventName) !== null && _a !== void 0 ? _a : "";
        message.serverTs = (_b = object.serverTs) !== null && _b !== void 0 ? _b : 0;
        message.userId = (_c = object.userId) !== null && _c !== void 0 ? _c : "";
        message.userAgent = (_d = object.userAgent) !== null && _d !== void 0 ? _d : "";
        message.country = (_e = object.country) !== null && _e !== void 0 ? _e : "";
        message.city = (_f = object.city) !== null && _f !== void 0 ? _f : "";
        message.region = (_g = object.region) !== null && _g !== void 0 ? _g : "";
        message.eventId = (_h = object.eventId) !== null && _h !== void 0 ? _h : "";
        message.instanceId = (_j = object.instanceId) !== null && _j !== void 0 ? _j : "";
        message.sequenceId = (_k = object.sequenceId) !== null && _k !== void 0 ? _k : 0;
        message.osType = (_l = object.osType) !== null && _l !== void 0 ? _l : "";
        message.osVersion = (_m = object.osVersion) !== null && _m !== void 0 ? _m : "";
        message.appVersion = (_o = object.appVersion) !== null && _o !== void 0 ? _o : "";
        message.appBuild = (_p = object.appBuild) !== null && _p !== void 0 ? _p : "";
        message.serverUploadTs = (_q = object.serverUploadTs) !== null && _q !== void 0 ? _q : 0;
        message.eventTime = (_r = object.eventTime) !== null && _r !== void 0 ? _r : 0;
        message.serverReceiptTime = (_s = object.serverReceiptTime) !== null && _s !== void 0 ? _s : 0;
        message.maxSequenceIdOnInstance = (_t = object.maxSequenceIdOnInstance) !== null && _t !== void 0 ? _t : 0;
        message.userGuid = (_u = object.userGuid) !== null && _u !== void 0 ? _u : "";
        message.collection = (_v = object.collection) !== null && _v !== void 0 ? _v : 0;
        message.serviceId = (_w = object.serviceId) !== null && _w !== void 0 ? _w : "";
        message.appType = (_x = object.appType) !== null && _x !== void 0 ? _x : 0;
        message.spectrumInstanceId = (_y = object.spectrumInstanceId) !== null && _y !== void 0 ? _y : "";
        message.spectrumSequenceId = (_z = object.spectrumSequenceId) !== null && _z !== void 0 ? _z : 0;
        message.eventData =
            object.eventData !== undefined && object.eventData !== null
                ? main_ServerEventData.fromPartial(object.eventData)
                : undefined;
        return message;
    },
};
const main_ServerEventData = {
    fromPartial(object) {
        const message = main_createBaseServerEventData();
        message.cameraKitException =
            object.cameraKitException !== undefined && object.cameraKitException !== null
                ? main_CameraKitException.fromPartial(object.cameraKitException)
                : undefined;
        message.cameraKitLensSpin =
            object.cameraKitLensSpin !== undefined && object.cameraKitLensSpin !== null
                ? main_CameraKitLensSpin.fromPartial(object.cameraKitLensSpin)
                : undefined;
        message.cameraKitAssetDownload =
            object.cameraKitAssetDownload !== undefined && object.cameraKitAssetDownload !== null
                ? main_CameraKitAssetDownload.fromPartial(object.cameraKitAssetDownload)
                : undefined;
        message.cameraKitLensContentValidationFailed =
            object.cameraKitLensContentValidationFailed !== undefined && object.cameraKitLensContentValidationFailed !== null
                ? main_CameraKitLensContentValidationFailed.fromPartial(object.cameraKitLensContentValidationFailed)
                : undefined;
        message.cameraKitLensDownload =
            object.cameraKitLensDownload !== undefined && object.cameraKitLensDownload !== null
                ? main_CameraKitLensDownload.fromPartial(object.cameraKitLensDownload)
                : undefined;
        message.cameraKitAssetValidationFailed =
            object.cameraKitAssetValidationFailed !== undefined && object.cameraKitAssetValidationFailed !== null
                ? main_CameraKitAssetValidationFailed.fromPartial(object.cameraKitAssetValidationFailed)
                : undefined;
        message.cameraKitSession =
            object.cameraKitSession !== undefined && object.cameraKitSession !== null
                ? main_cameraKitEvents_CameraKitSession.fromPartial(object.cameraKitSession)
                : undefined;
        message.cameraKitWebLensSwipe =
            object.cameraKitWebLensSwipe !== undefined && object.cameraKitWebLensSwipe !== null
                ? main_CameraKitWebLensSwipe.fromPartial(object.cameraKitWebLensSwipe)
                : undefined;
        message.cameraKitWebBenchmarkComplete =
            object.cameraKitWebBenchmarkComplete !== undefined && object.cameraKitWebBenchmarkComplete !== null
                ? main_CameraKitWebBenchmarkComplete.fromPartial(object.cameraKitWebBenchmarkComplete)
                : undefined;
        message.cameraKitLegalPrompt =
            object.cameraKitLegalPrompt !== undefined && object.cameraKitLegalPrompt !== null
                ? main_CameraKitLegalPrompt.fromPartial(object.cameraKitLegalPrompt)
                : undefined;
        return message;
    },
};
function main_createBaseServerEventData() {
    return {
        cameraKitException: undefined,
        cameraKitLensSpin: undefined,
        cameraKitAssetDownload: undefined,
        cameraKitLensContentValidationFailed: undefined,
        cameraKitLensDownload: undefined,
        cameraKitAssetValidationFailed: undefined,
        cameraKitSession: undefined,
        cameraKitWebLensSwipe: undefined,
        cameraKitWebBenchmarkComplete: undefined,
        cameraKitLegalPrompt: undefined,
    };
}
function main_createBaseServerEvent() {
    return {
        eventName: "",
        serverTs: 0,
        userId: "",
        userAgent: "",
        country: "",
        city: "",
        region: "",
        eventId: "",
        instanceId: "",
        sequenceId: 0,
        osType: "",
        osVersion: "",
        appVersion: "",
        appBuild: "",
        serverUploadTs: 0,
        eventTime: 0,
        serverReceiptTime: 0,
        maxSequenceIdOnInstance: 0,
        userGuid: "",
        collection: 0,
        serviceId: "",
        appType: 0,
        spectrumInstanceId: "",
        spectrumSequenceId: 0,
        eventData: undefined,
    };
}
var main_AppType;
(function (AppType) {
    AppType[AppType["IOS_NATIVE"] = 0] = "IOS_NATIVE";
    AppType[AppType["IOS_WEB_DESKTOP"] = 1] = "IOS_WEB_DESKTOP";
    AppType[AppType["IOS_WEB_MOBILE"] = 2] = "IOS_WEB_MOBILE";
    AppType[AppType["ANDROID_NATIVE"] = 3] = "ANDROID_NATIVE";
    AppType[AppType["ANDROID_WEB_DESKTOP"] = 4] = "ANDROID_WEB_DESKTOP";
    AppType[AppType["ANDROID_WEB_MOBILE"] = 5] = "ANDROID_WEB_MOBILE";
    AppType[AppType["OSX_WEB_DESKTOP"] = 6] = "OSX_WEB_DESKTOP";
    AppType[AppType["OSX_WEB_MOBILE"] = 7] = "OSX_WEB_MOBILE";
    AppType[AppType["WINDOWS_WEB_DESKTOP"] = 8] = "WINDOWS_WEB_DESKTOP";
    AppType[AppType["WINDOWS_WEB_MOBILE"] = 9] = "WINDOWS_WEB_MOBILE";
    AppType[AppType["LINUX_WEB_DESKTOP"] = 10] = "LINUX_WEB_DESKTOP";
    AppType[AppType["LINUX_WEB_MOBILE"] = 11] = "LINUX_WEB_MOBILE";
    AppType[AppType["LENSSTUDIO"] = 12] = "LENSSTUDIO";
    AppType[AppType["SNAPCAMERA"] = 13] = "SNAPCAMERA";
    AppType[AppType["WEB_DESKTOP"] = 14] = "WEB_DESKTOP";
    AppType[AppType["WEB_MOBILE"] = 15] = "WEB_MOBILE";
    AppType[AppType["LENSSTUDIO_REMAKE"] = 16] = "LENSSTUDIO_REMAKE";
    AppType[AppType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_AppType || (main_AppType = {}));
var main_Collection;
(function (Collection) {
    Collection[Collection["COLLECTION_UNUSED"] = 0] = "COLLECTION_UNUSED";
    Collection[Collection["GAE"] = 1] = "GAE";
    Collection[Collection["GCE_M"] = 2] = "GCE_M";
    Collection[Collection["GCE_S"] = 3] = "GCE_S";
    Collection[Collection["GCE_T"] = 4] = "GCE_T";
    Collection[Collection["GKE_M"] = 5] = "GKE_M";
    Collection[Collection["GKE_S"] = 6] = "GKE_S";
    Collection[Collection["GKE_T"] = 7] = "GKE_T";
    Collection[Collection["LOCAL"] = 8] = "LOCAL";
    Collection[Collection["GCE_ST"] = 9] = "GCE_ST";
    Collection[Collection["GKE_ST"] = 10] = "GKE_ST";
    Collection[Collection["GCE_C"] = 11] = "GCE_C";
    Collection[Collection["GCE_SC"] = 12] = "GCE_SC";
    Collection[Collection["GCE_TC"] = 13] = "GCE_TC";
    Collection[Collection["GCE_TSC"] = 14] = "GCE_TSC";
    Collection[Collection["GKE_C"] = 15] = "GKE_C";
    Collection[Collection["GKE_SC"] = 16] = "GKE_SC";
    Collection[Collection["GKE_TC"] = 17] = "GKE_TC";
    Collection[Collection["GKE_TSC"] = 18] = "GKE_TSC";
    Collection[Collection["GKE_W"] = 19] = "GKE_W";
    Collection[Collection["GKE_WT"] = 20] = "GKE_WT";
    Collection[Collection["GKE_WC"] = 21] = "GKE_WC";
    Collection[Collection["GKE_WSC"] = 22] = "GKE_WSC";
    Collection[Collection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_Collection || (main_Collection = {}));
const main_CameraKitLensSpin = {
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseCameraKitLensSpin();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.viewTimeSec = (_b = object.viewTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.lensGroupId = (_c = object.lensGroupId) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function main_createBaseCameraKitLensSpin() {
    return { cameraKitEventBase: undefined, lensId: "", viewTimeSec: 0, lensGroupId: "" };
}
const main_CameraKitWebLensSwipe = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const message = main_createBaseCameraKitWebLensSwipe();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.performanceCluster = (_a = object.performanceCluster) !== null && _a !== void 0 ? _a : 0;
        message.webglRendererInfo = (_b = object.webglRendererInfo) !== null && _b !== void 0 ? _b : "";
        message.lensId = (_c = object.lensId) !== null && _c !== void 0 ? _c : "";
        message.lensFrameProcessingTimeMsAvg = (_d = object.lensFrameProcessingTimeMsAvg) !== null && _d !== void 0 ? _d : 0;
        message.lensFrameProcessingTimeMsStd = (_e = object.lensFrameProcessingTimeMsStd) !== null && _e !== void 0 ? _e : 0;
        message.viewTimeSec = (_f = object.viewTimeSec) !== null && _f !== void 0 ? _f : 0;
        message.recordingTimeSec = (_g = object.recordingTimeSec) !== null && _g !== void 0 ? _g : 0;
        message.applyDelaySec = (_h = object.applyDelaySec) !== null && _h !== void 0 ? _h : 0;
        message.avgFps = (_j = object.avgFps) !== null && _j !== void 0 ? _j : 0;
        message.isLensFirstWithinDay = (_k = object.isLensFirstWithinDay) !== null && _k !== void 0 ? _k : false;
        message.isLensFirstWithinMonth = (_l = object.isLensFirstWithinMonth) !== null && _l !== void 0 ? _l : false;
        message.lensGroupId = (_m = object.lensGroupId) !== null && _m !== void 0 ? _m : "";
        return message;
    },
};
function main_createBaseCameraKitWebLensSwipe() {
    return {
        cameraKitEventBase: undefined,
        performanceCluster: 0,
        webglRendererInfo: "",
        lensId: "",
        lensFrameProcessingTimeMsAvg: 0,
        lensFrameProcessingTimeMsStd: 0,
        viewTimeSec: 0,
        recordingTimeSec: 0,
        applyDelaySec: 0,
        avgFps: 0,
        isLensFirstWithinDay: false,
        isLensFirstWithinMonth: false,
        lensGroupId: "",
    };
}
const main_CameraKitLensDownload = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseCameraKitLensDownload();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.automaticDownload = (_b = object.automaticDownload) !== null && _b !== void 0 ? _b : false;
        message.downloadTimeSec = (_c = object.downloadTimeSec) !== null && _c !== void 0 ? _c : 0;
        message.sizeByte = (_d = object.sizeByte) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function main_createBaseCameraKitLensDownload() {
    return { cameraKitEventBase: undefined, lensId: "", automaticDownload: false, downloadTimeSec: 0, sizeByte: 0 };
}
const main_CameraKitAssetDownload = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseCameraKitAssetDownload();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.automaticDownload = (_a = object.automaticDownload) !== null && _a !== void 0 ? _a : false;
        message.downloadTimeSec = (_b = object.downloadTimeSec) !== null && _b !== void 0 ? _b : 0;
        message.sizeByte = (_c = object.sizeByte) !== null && _c !== void 0 ? _c : 0;
        message.assetId = (_d = object.assetId) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function main_createBaseCameraKitAssetDownload() {
    return { cameraKitEventBase: undefined, automaticDownload: false, downloadTimeSec: 0, sizeByte: 0, assetId: "" };
}
const main_CameraKitException = {
    fromPartial(object) {
        var _a, _b, _c;
        const message = main_createBaseCameraKitException();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : "";
        message.reason = (_c = object.reason) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function main_createBaseCameraKitException() {
    return { cameraKitEventBase: undefined, lensId: "", type: "", reason: "" };
}
const main_cameraKitEvents_CameraKitSession = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = main_createBaseCameraKitSession();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.dailySessionBucket = (_a = object.dailySessionBucket) !== null && _a !== void 0 ? _a : 0;
        message.isFirstWithinMonth = (_b = object.isFirstWithinMonth) !== null && _b !== void 0 ? _b : false;
        message.day = (_c = object.day) !== null && _c !== void 0 ? _c : 0;
        message.month = (_d = object.month) !== null && _d !== void 0 ? _d : 0;
        message.year = (_e = object.year) !== null && _e !== void 0 ? _e : 0;
        return message;
    },
};
function main_createBaseCameraKitSession() {
    return { cameraKitEventBase: undefined, dailySessionBucket: 0, isFirstWithinMonth: false, day: 0, month: 0, year: 0 };
}
var main_DailySessionBucket;
(function (DailySessionBucket) {
    DailySessionBucket[DailySessionBucket["NO_SESSION_BUCKET"] = 0] = "NO_SESSION_BUCKET";
    DailySessionBucket[DailySessionBucket["ONE_SESSION"] = 1] = "ONE_SESSION";
    DailySessionBucket[DailySessionBucket["TWO_SESSION"] = 2] = "TWO_SESSION";
    DailySessionBucket[DailySessionBucket["THREE_SESSION"] = 3] = "THREE_SESSION";
    DailySessionBucket[DailySessionBucket["FOUR_SESSION"] = 4] = "FOUR_SESSION";
    DailySessionBucket[DailySessionBucket["FIVE_SESSION"] = 5] = "FIVE_SESSION";
    DailySessionBucket[DailySessionBucket["SIX_SESSION"] = 6] = "SIX_SESSION";
    DailySessionBucket[DailySessionBucket["SEVEN_SESSION"] = 7] = "SEVEN_SESSION";
    DailySessionBucket[DailySessionBucket["EIGHT_SESSION"] = 8] = "EIGHT_SESSION";
    DailySessionBucket[DailySessionBucket["NINE_SESSION"] = 9] = "NINE_SESSION";
    DailySessionBucket[DailySessionBucket["TEN_OR_MORE_SESSION"] = 10] = "TEN_OR_MORE_SESSION";
    DailySessionBucket[DailySessionBucket["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_DailySessionBucket || (main_DailySessionBucket = {}));
const main_CameraKitLensContentValidationFailed = {
    fromPartial(object) {
        var _a;
        const message = main_createBaseCameraKitLensContentValidationFailed();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.lensId = (_a = object.lensId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseCameraKitLensContentValidationFailed() {
    return { cameraKitEventBase: undefined, lensId: "" };
}
const main_CameraKitAssetValidationFailed = {
    fromPartial(object) {
        var _a;
        const message = main_createBaseCameraKitAssetValidationFailed();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.assetId = (_a = object.assetId) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function main_createBaseCameraKitAssetValidationFailed() {
    return { cameraKitEventBase: undefined, assetId: "" };
}
const main_CameraKitWebBenchmarkComplete = {
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = main_createBaseCameraKitWebBenchmarkComplete();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.benchmarkName = (_a = object.benchmarkName) !== null && _a !== void 0 ? _a : "";
        message.benchmarkValue = (_b = object.benchmarkValue) !== null && _b !== void 0 ? _b : 0;
        message.performanceCluster = (_c = object.performanceCluster) !== null && _c !== void 0 ? _c : 0;
        message.webglRendererInfo = (_d = object.webglRendererInfo) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function main_createBaseCameraKitWebBenchmarkComplete() {
    return {
        cameraKitEventBase: undefined,
        benchmarkName: "",
        benchmarkValue: 0,
        performanceCluster: 0,
        webglRendererInfo: "",
    };
}
const main_CameraKitLegalPrompt = {
    fromPartial(object) {
        var _a, _b;
        const message = main_createBaseCameraKitLegalPrompt();
        message.cameraKitEventBase =
            object.cameraKitEventBase !== undefined && object.cameraKitEventBase !== null
                ? main_CameraKitEventBase.fromPartial(object.cameraKitEventBase)
                : undefined;
        message.legalPromptId = (_a = object.legalPromptId) !== null && _a !== void 0 ? _a : "";
        message.legalPromptResult = (_b = object.legalPromptResult) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
const main_CameraKitEventBase = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = main_createBaseCameraKitEventBase();
        message.kitEventBase =
            object.kitEventBase !== undefined && object.kitEventBase !== null
                ? main_KitEventBase.fromPartial(object.kitEventBase)
                : undefined;
        message.deviceCluster = (_a = object.deviceCluster) !== null && _a !== void 0 ? _a : 0;
        message.cameraKitVersion = (_b = object.cameraKitVersion) !== null && _b !== void 0 ? _b : "";
        message.lensCoreVersion = (_c = object.lensCoreVersion) !== null && _c !== void 0 ? _c : "";
        message.deviceModel = (_d = object.deviceModel) !== null && _d !== void 0 ? _d : "";
        message.cameraKitVariant = (_e = object.cameraKitVariant) !== null && _e !== void 0 ? _e : 0;
        message.cameraKitFlavor = (_f = object.cameraKitFlavor) !== null && _f !== void 0 ? _f : 0;
        message.appId = (_g = object.appId) !== null && _g !== void 0 ? _g : "";
        message.deviceConnectivity = (_h = object.deviceConnectivity) !== null && _h !== void 0 ? _h : 0;
        message.sessionId = (_j = object.sessionId) !== null && _j !== void 0 ? _j : "";
        message.appVendorUuid = (_k = object.appVendorUuid) !== null && _k !== void 0 ? _k : "";
        message.rankingRequestId = (_l = object.rankingRequestId) !== null && _l !== void 0 ? _l : "";
        message.cameraKitEnvironment = (_m = object.cameraKitEnvironment) !== null && _m !== void 0 ? _m : 0;
        message.partnerUuid = (_o = object.partnerUuid) !== null && _o !== void 0 ? _o : "";
        return message;
    },
};
const main_KitEventBase = {
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        const message = main_createBaseKitEventBase();
        message.oauthClientId = (_a = object.oauthClientId) !== null && _a !== void 0 ? _a : "";
        message.locale = (_b = object.locale) !== null && _b !== void 0 ? _b : "";
        message.kitUserAgent = (_c = object.kitUserAgent) !== null && _c !== void 0 ? _c : "";
        message.ipAddress = (_d = object.ipAddress) !== null && _d !== void 0 ? _d : "";
        message.osMinorVersion = (_e = object.osMinorVersion) !== null && _e !== void 0 ? _e : "";
        message.kitVariant = (_f = object.kitVariant) !== null && _f !== void 0 ? _f : 0;
        message.kitVariantVersion = (_g = object.kitVariantVersion) !== null && _g !== void 0 ? _g : "";
        message.kitClientTimestampMillis = (_h = object.kitClientTimestampMillis) !== null && _h !== void 0 ? _h : 0;
        message.clientSequenceId = (_j = object.clientSequenceId) !== null && _j !== void 0 ? _j : 0;
        message.maxClientSequenceIdOnInstance = (_k = object.maxClientSequenceIdOnInstance) !== null && _k !== void 0 ? _k : 0;
        message.targetArchitecture = (_l = object.targetArchitecture) !== null && _l !== void 0 ? _l : "";
        message.runningWithDebuggerAttached = (_m = object.runningWithDebuggerAttached) !== null && _m !== void 0 ? _m : false;
        message.runningInTests = (_o = object.runningInTests) !== null && _o !== void 0 ? _o : false;
        message.runningInSimulator = (_p = object.runningInSimulator) !== null && _p !== void 0 ? _p : false;
        message.isAppPrerelease = (_q = object.isAppPrerelease) !== null && _q !== void 0 ? _q : false;
        message.kitAppId = (_r = object.kitAppId) !== null && _r !== void 0 ? _r : "";
        message.kitSessionId = (_s = object.kitSessionId) !== null && _s !== void 0 ? _s : "";
        message.kitPluginType = (_t = object.kitPluginType) !== null && _t !== void 0 ? _t : 0;
        message.isFromReactNativePlugin = (_u = object.isFromReactNativePlugin) !== null && _u !== void 0 ? _u : false;
        return message;
    },
};
function main_createBaseKitEventBase() {
    return {
        oauthClientId: "",
        locale: "",
        kitUserAgent: "",
        ipAddress: "",
        osMinorVersion: "",
        kitVariant: 0,
        kitVariantVersion: "",
        kitClientTimestampMillis: 0,
        clientSequenceId: 0,
        maxClientSequenceIdOnInstance: 0,
        targetArchitecture: "",
        runningWithDebuggerAttached: false,
        runningInTests: false,
        runningInSimulator: false,
        isAppPrerelease: false,
        kitAppId: "",
        kitSessionId: "",
        kitPluginType: 0,
        isFromReactNativePlugin: false,
    };
}
function main_createBaseCameraKitEventBase() {
    return {
        kitEventBase: undefined,
        deviceCluster: 0,
        cameraKitVersion: "",
        lensCoreVersion: "",
        deviceModel: "",
        cameraKitVariant: 0,
        cameraKitFlavor: 0,
        appId: "",
        deviceConnectivity: 0,
        sessionId: "",
        appVendorUuid: "",
        rankingRequestId: "",
        cameraKitEnvironment: 0,
        partnerUuid: "",
    };
}
function main_createBaseCameraKitLegalPrompt() {
    return { cameraKitEventBase: undefined, legalPromptId: "", legalPromptResult: 0 };
}
var main_CameraKitLegalPromptResult;
(function (CameraKitLegalPromptResult) {
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_MISSING"] = 0] = "CAMERA_KIT_LEGAL_PROMPT_MISSING";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_ACCEPTED"] = 1] = "CAMERA_KIT_LEGAL_PROMPT_ACCEPTED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["CAMERA_KIT_LEGAL_PROMPT_DISMISSED"] = 2] = "CAMERA_KIT_LEGAL_PROMPT_DISMISSED";
    CameraKitLegalPromptResult[CameraKitLegalPromptResult["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CameraKitLegalPromptResult || (main_CameraKitLegalPromptResult = {}));
var main_cameraKitEvents_CameraKitEnvironment;
(function (CameraKitEnvironment) {
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_UNKNOWN"] = 0] = "CAMERA_KIT_ENVIRONMENT_UNKNOWN";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_STAGING"] = 1] = "CAMERA_KIT_ENVIRONMENT_STAGING";
    CameraKitEnvironment[CameraKitEnvironment["CAMERA_KIT_ENVIRONMENT_PRODUCTION"] = 2] = "CAMERA_KIT_ENVIRONMENT_PRODUCTION";
    CameraKitEnvironment[CameraKitEnvironment["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_cameraKitEvents_CameraKitEnvironment || (main_cameraKitEvents_CameraKitEnvironment = {}));
var main_cameraKitEvents_CameraKitConnectivityType;
(function (CameraKitConnectivityType) {
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN"] = 0] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_WIFI"] = 1] = "CAMERA_KIT_CONNECTIVITY_TYPE_WIFI";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE"] = 2] = "CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE"] = 3] = "CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE";
    CameraKitConnectivityType[CameraKitConnectivityType["CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH"] = 4] = "CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH";
    CameraKitConnectivityType[CameraKitConnectivityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_cameraKitEvents_CameraKitConnectivityType || (main_cameraKitEvents_CameraKitConnectivityType = {}));
var main_cameraKitEvents_CameraKitFlavor;
(function (CameraKitFlavor) {
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_UNKNOWN"] = 0] = "CAMERA_KIT_FLAVOR_UNKNOWN";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_DEBUG"] = 1] = "CAMERA_KIT_FLAVOR_DEBUG";
    CameraKitFlavor[CameraKitFlavor["CAMERA_KIT_FLAVOR_RELEASE"] = 2] = "CAMERA_KIT_FLAVOR_RELEASE";
    CameraKitFlavor[CameraKitFlavor["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_cameraKitEvents_CameraKitFlavor || (main_cameraKitEvents_CameraKitFlavor = {}));
var main_CameraKitVariant;
(function (CameraKitVariant) {
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_UNKNOWN"] = 0] = "CAMERA_KIT_VARIANT_UNKNOWN";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PARTNER"] = 1] = "CAMERA_KIT_VARIANT_PARTNER";
    CameraKitVariant[CameraKitVariant["CAMERA_KIT_VARIANT_PUBLIC"] = 2] = "CAMERA_KIT_VARIANT_PUBLIC";
    CameraKitVariant[CameraKitVariant["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_CameraKitVariant || (main_CameraKitVariant = {}));
var main_KitPluginType;
(function (KitPluginType) {
    KitPluginType[KitPluginType["NO_PLUGIN"] = 0] = "NO_PLUGIN";
    KitPluginType[KitPluginType["UNITY"] = 1] = "UNITY";
    KitPluginType[KitPluginType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_KitPluginType || (main_KitPluginType = {}));
var main_KitType;
(function (KitType) {
    KitType[KitType["UNKNOWN_KIT_TYPE"] = 0] = "UNKNOWN_KIT_TYPE";
    KitType[KitType["BITMOJI_KIT"] = 1] = "BITMOJI_KIT";
    KitType[KitType["CREATIVE_KIT"] = 2] = "CREATIVE_KIT";
    KitType[KitType["LOGIN_KIT"] = 3] = "LOGIN_KIT";
    KitType[KitType["STORY_KIT"] = 4] = "STORY_KIT";
    KitType[KitType["CAMERA_KIT"] = 5] = "CAMERA_KIT";
    KitType[KitType["SHOP_KIT"] = 6] = "SHOP_KIT";
    KitType[KitType["EULA_KIT"] = 7] = "EULA_KIT";
    KitType[KitType["PAYMENTS_KIT"] = 8] = "PAYMENTS_KIT";
    KitType[KitType["INVITE_KIT"] = 9] = "INVITE_KIT";
    KitType[KitType["CAMERA_KIT_WEB"] = 10] = "CAMERA_KIT_WEB";
    KitType[KitType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(main_KitType || (main_KitType = {}));
//# sourceMappingURL=cameraKitEvents.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLegalState.js








/**
 * @internal
 */
const main_reportLegalState = main_Injectable("reportLegalState", [main_legalStateFactory.token, main_metricsEventTargetFactory.token, main_operationalMetricReporterFactory.token], (legalState, metricsEventTarget, operationalMetricsReporter) => {
    legalState.events
        .pipe(main_forActions("accept", "reject"), main_map(([{ data, name }]) => ({
        name: "legalPrompt",
        legalPromptId: data,
        legalPromptResult: name === "accept"
            ? main_CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED
            : main_CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_DISMISSED,
    })))
        .subscribe({
        next: (legalPromptEvent) => {
            metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("legalPrompt", legalPromptEvent));
            operationalMetricsReporter.count("legal_prompt_interaction", 1, new Map([
                [
                    "accepted",
                    (legalPromptEvent.legalPromptResult ===
                        main_CameraKitLegalPromptResult.CAMERA_KIT_LEGAL_PROMPT_ACCEPTED).toString(),
                ],
            ]));
        },
    });
});
//# sourceMappingURL=reportLegalState.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensValidationFailed.js






/**
 * @internal
 */
const main_reportLensValidationFailed = main_Injectable("reportLensValidationFailed", [main_lensStateFactory.token, main_metricsEventTargetFactory.token], (lensState, metricsEventTarget) => {
    lensState.events
        .pipe(main_forActions("applyLensFailed"), main_filter(([a]) => a.data.error.name === "LensContentValidationError"))
        .subscribe({
        next: ([{ data }]) => {
            const { lens } = data;
            const lensContentValidationFailed = {
                name: "lensContentValidationFailed",
                lensId: lens.id,
            };
            metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("lensContentValidationFailed", lensContentValidationFailed));
        },
    });
});
//# sourceMappingURL=reportLensValidationFailed.js.map
;// ./node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js









function main_combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var scheduler = popScheduler(args);
    var resultSelector = popResultSelector(args);
    var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
    if (observables.length === 0) {
        return from([], scheduler);
    }
    var result = new Observable(main_combineLatestInit(observables, scheduler, keys
        ?
            function (values) { return createObject(keys, values); }
        :
            identity));
    return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function main_combineLatestInit(observables, scheduler, valueTransform) {
    if (valueTransform === void 0) { valueTransform = main_identity_identity; }
    return function (subscriber) {
        main_maybeSchedule(scheduler, function () {
            var length = observables.length;
            var values = new Array(length);
            var active = length;
            var remainingFirstValues = length;
            var _loop_1 = function (i) {
                main_maybeSchedule(scheduler, function () {
                    var source = main_from_from(observables[i], scheduler);
                    var hasFirstValue = false;
                    source.subscribe(main_createOperatorSubscriber(subscriber, function (value) {
                        values[i] = value;
                        if (!hasFirstValue) {
                            hasFirstValue = true;
                            remainingFirstValues--;
                        }
                        if (!remainingFirstValues) {
                            subscriber.next(valueTransform(values.slice()));
                        }
                    }, function () {
                        if (!--active) {
                            subscriber.complete();
                        }
                    }));
                }, subscriber);
            };
            for (var i = 0; i < length; i++) {
                _loop_1(i);
            }
        }, subscriber);
    };
}
function main_maybeSchedule(scheduler, execute, subscription) {
    if (scheduler) {
        main_executeSchedule(subscription, scheduler, execute);
    }
    else {
        execute();
    }
}
//# sourceMappingURL=combineLatest.js.map
;// ./node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var main_argsOrArgArray_isArray = Array.isArray;
function main_argsOrArgArray_argsOrArgArray(args) {
    return args.length === 1 && main_argsOrArgArray_isArray(args[0]) ? args[0] : args;
}
//# sourceMappingURL=argsOrArgArray.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js







function main_combineLatest_combineLatest() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var resultSelector = main_args_popResultSelector(args);
    return resultSelector
        ? main_pipe(main_combineLatest_combineLatest.apply(void 0, main_spreadArray([], main_read(args))), main_mapOneOrManyArgs_mapOneOrManyArgs(resultSelector))
        : main_operate(function (source, subscriber) {
            main_combineLatestInit(main_spreadArray([source], main_read(main_argsOrArgArray_argsOrArgArray(args))))(subscriber);
        });
}
//# sourceMappingURL=combineLatest.js.map
;// ./node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js


function main_combineLatestWith() {
    var otherSources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        otherSources[_i] = arguments[_i];
    }
    return main_combineLatest_combineLatest.apply(void 0, main_spreadArray([], main_read(otherSources)));
}
//# sourceMappingURL=combineLatestWith.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/operational/Histogram.js

/** @internal */
class main_Histogram extends main_Metric {
    static level(name, level, dimsensions = {}) {
        const histogram = new main_Histogram(name, dimsensions);
        histogram.add(level);
        return histogram;
    }
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.levels = [];
    }
    add(level) {
        this.levels.push(level);
    }
    toOperationalMetric() {
        const timestamp = new Date();
        const name = `${this.name}${main_serializeMetricDimensions(this.dimensions)}`;
        return this.levels.map((level) => ({ name, timestamp, metric: { $case: "histogram", histogram: level } }));
    }
}
//# sourceMappingURL=Histogram.js.map
;// ./node_modules/@snap/camera-kit/lib/common/date.js
const main_DEFAULT_TIMEZONE = "America/Los_Angeles";
const main_dayFormatter = new Intl.DateTimeFormat("en-US", {
    timeZone: main_DEFAULT_TIMEZONE,
    year: "numeric",
    month: "numeric",
    day: "numeric",
});
const main_monthFormatter = new Intl.DateTimeFormat("en-US", {
    timeZone: main_DEFAULT_TIMEZONE,
    year: "numeric",
    month: "numeric",
});
//# sourceMappingURL=date.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensView.js
















// We ignore short-duration lens views.
//
// The value is documented here:
// https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.q5liip76r9lt
const main_viewTimeThresholdSec = 0.1;
function main_isFirstTimeWithinPeriods(lensId, persistence) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        let isLensFirstWithinDay = false;
        let isLensFirstWithinMonth = false;
        try {
            const lensLastViewDate = yield persistence.retrieve(lensId);
            const currentDate = new Date();
            if (!lensLastViewDate) {
                isLensFirstWithinDay = true;
                isLensFirstWithinMonth = true;
            }
            else {
                isLensFirstWithinDay = main_dayFormatter.format(lensLastViewDate) !== main_dayFormatter.format(currentDate);
                isLensFirstWithinMonth = main_monthFormatter.format(lensLastViewDate) !== main_monthFormatter.format(currentDate);
            }
            yield persistence.store(lensId, currentDate);
        }
        catch (error) {
            console.error(`Error handling persistence for lensId ${lensId}: ${error}`);
            isLensFirstWithinDay = false;
            isLensFirstWithinMonth = false;
        }
        return { isLensFirstWithinDay, isLensFirstWithinMonth };
    });
}
/**
 * @internal
 */
const main_reportLensView = main_Injectable("reportLensView", [
    main_cameraKitSessionFactory.token,
    main_lensStateFactory.token,
    main_sessionStateFactory.token,
    main_metricsEventTargetFactory.token,
    main_operationalMetricReporterFactory.token,
    main_configurationToken,
], (session, lensState, sessionState, metricsEventTarget, operationalMetricsReporter, configuration) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a;
    // We need to do this await up front so that it won't interrupt reporting the metric when the session is
    // suspended -- suspension could happen because the tab is closing, in which case we cannot perform await a
    // Promise, because in the case of a tab close the browser will not schedule any work for future turns of the
    // event loop.
    const { cluster: performanceCluster, webglRendererInfo } = (_a = (yield configuration.lensPerformance)) !== null && _a !== void 0 ? _a : {
        cluster: 0,
        webglRendererInfo: "unknown",
    };
    const lensViewPersistence = new main_ExpiringPersistence(
    // 60 days expiration
    () => 60 * 24 * 60 * 60, new main_IndexedDBPersistence({ databaseName: "recentLensViews" }));
    main_merge(
    // Begin measuring LensCore apply time once the lens has finished downloading and we actually add the lens
    // to LensCore (LensWait measures the full download + LensCore apply time i.e. perceived UX latency).
    lensState.events.pipe(main_forActions("downloadComplete"), main_map(([a]) => a.data)), 
    // If the session is resumed (e.g. user returns to this tab while a lens is on), we count this as a new
    // LensView (and applyDelaySec will be 0).
    lensState.events.pipe(main_inStates("lensApplied"), main_switchMap(([, s]) => sessionState.events.pipe(main_forActions("resume"), main_takeUntil(lensState.events.pipe(main_forActions("removeLens"))), main_map(() => s.data)))))
        .pipe(main_map((lens) => [main_getTimeMs(), lens.id, lens.groupId]), main_mergeMap(([applyLensStartTime, lensId, lensGroupId]) => {
        const alreadyOn = main_isState(lensState.getState(), "lensApplied");
        const applyDelay = alreadyOn
            ? main_of(0)
            : lensState.events.pipe(main_forActions("resourcesLoaded"), main_filter(([a]) => a.data.id === lensId), 
            // Applying a new lens may happen before removing the old one, so if we kept taking events
            // we would get the lensResourcesLoaded for the next lens, too.
            main_take(1), main_map(() => (main_getTimeMs() - applyLensStartTime) / 1000));
        const viewMetrics = (alreadyOn
            ? main_of([main_getTimeMs(), session.metrics.beginMeasurement()])
            : lensState.events.pipe(main_forActions("turnedOn"), main_filter(([a]) => a.data.id === lensId), main_map(() => [main_getTimeMs(), session.metrics.beginMeasurement()]))).pipe(main_take(1), main_mergeMap(([lensTurnedOnTime, metricsMeasurement]) => lensState.events.pipe(main_forActions("turnedOff"), 
        // Applying a new lens may happen before removing the old one, so we'll get a
        // lensTurnedOff for the prior lens (if one was applied), which we must filter out.
        main_filter(([a]) => a.data.id === lensId), 
        // If the session is suspended, we'll count that as the lens turning off.
        main_raceWith(sessionState.events.pipe(main_forActions("suspend"))), main_map(() => {
            metricsMeasurement.end();
            return Object.assign({ viewTimeSec: (main_getTimeMs() - lensTurnedOnTime) / 1000 }, metricsMeasurement.measure());
        }))));
        return applyDelay.pipe(main_combineLatestWith(viewMetrics, main_from_from(main_isFirstTimeWithinPeriods(lensId, lensViewPersistence))), 
        // This lens should always receive the lensTurnedOff action *before* the next lens is
        // turned on. But just in case that assumption is violated, we'll clean up
        // (and not report) if another lens turns on before our lens is turned off.
        main_takeUntil(lensState.events.pipe(main_forActions("turnedOn"), main_filter(([a]) => a.data.id !== lensId))), main_take(1), main_map(([applyDelaySec, viewMetrics, isFirstTimeResults]) => (Object.assign(Object.assign({ applyDelaySec,
            lensId,
            lensGroupId }, viewMetrics), isFirstTimeResults))));
    }))
        .subscribe({
        next: ({ applyDelaySec, lensId, lensGroupId, viewTimeSec, avgFps, lensFrameProcessingTimeMsAvg, lensFrameProcessingTimeMsStd, lensFrameProcessingTimeMsMedian, lensFrameProcessingN, isLensFirstWithinDay, isLensFirstWithinMonth, }) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
            if (viewTimeSec < main_viewTimeThresholdSec)
                return;
            const lensView = {
                name: "lensView",
                applyDelaySec,
                avgFps,
                lensId,
                lensGroupId,
                lensFrameProcessingTimeMsAvg,
                lensFrameProcessingTimeMsStd,
                // We don't support recording video, but applications may do this without our knowledge.
                recordingTimeSec: 0,
                viewTimeSec,
                isLensFirstWithinDay,
                isLensFirstWithinMonth,
                performanceCluster,
                webglRendererInfo,
            };
            metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("lensView", lensView));
            operationalMetricsReporter.report(main_Histogram.level("lens_view", viewTimeSec * 1000));
            // The first few frames will typically take much longer to process (as they might involve requesting
            // remote assets to be downloaded, or other high-latency initialization steps) -- so we'll skip
            // reporting views with a very small number of frames.
            if (lensFrameProcessingN >= 30) {
                operationalMetricsReporter.report(main_Histogram.level("lens_view_frame-processing-time", lensFrameProcessingTimeMsMedian, {
                    performance_cluster: performanceCluster.toString(),
                }));
            }
        }),
    });
}));
//# sourceMappingURL=reportLensView.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportLensWait.js








// We ignore short-duration lens waits.
//
// The value is documented here:
// https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/edit#heading=h.q5liip76r9lt
const main_reportLensWait_viewTimeThresholdSec = 0.1;
/**
 * Each time a lens is applied, we measure the duration until the lens is fully loaded by LensCore. This
 * includes any time spent downloading the lens content and required assets from the lens manifest.
 *
 * The intention of this event is to measure the experienced UX latency between a user requesting a lens and
 * the lens rendering. Of course, the application may call `applyLens` at any time, and may hide/show the
 * rendered result at any time – but this should give us a good baseline for how much UX latency could be seen.
 *
 * @internal
 */
const main_reportLensWait = main_Injectable("reportLensWait", [main_lensStateFactory.token, main_metricsEventTargetFactory.token, main_operationalMetricReporterFactory.token], (lensState, metricsEventTarget, reporter) => {
    lensState.events
        .pipe(main_forActions("applyLens"), main_mergeMap(([a]) => {
        const lensId = a.data.lens.id;
        const lensGroupId = a.data.lens.groupId;
        const applyLensStartTime = main_getTimeMs();
        return lensState.events.pipe(
        // We'll measure the time until either the requested lens was rendered, or a new applyLens
        // request was made (in both cases, we're done waiting for this lens).
        //
        // This does have the side-effect that if a user rapidly switches between lenses, we'll record
        // many low-duration lensWait events that are measuring user behavior instead of system latency.
        // But this is a good trade-off so that we can capture those long-duration lensWaits that are
        // terminated by the user trying a different lens.
        //
        // (This effect can be mitigated by increasing the viewtimeThresholdSec to ignore low-duration
        // waits that are likely caused by user behavior).
        main_forActions("firstFrameProcessed", "applyLens"), main_take(1), main_map(() => [
            (main_getTimeMs() - applyLensStartTime) / 1000,
            lensId,
            lensGroupId,
        ]));
    }))
        .subscribe({
        next: ([viewTimeSec, lensId, lensGroupId]) => {
            if (viewTimeSec < main_reportLensWait_viewTimeThresholdSec)
                return;
            const lensWait = {
                name: "lensWait",
                lensId,
                viewTimeSec,
                lensGroupId,
            };
            metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("lensWait", lensWait));
            reporter.timer("lens.apply_lens_latency", viewTimeSec * 1000);
        },
    });
});
//# sourceMappingURL=reportLensWait.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportUserSession.js







/**
 * @internal
 */
const main_reportUserSession = main_Injectable("reportUserSession", [main_metricsEventTargetFactory.token], (metricsEventTarget) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const userSessionKey = "userSessionInfo";
    const db = new main_IndexedDBPersistence({ databaseName: "SessionHistory" });
    // We standardize all user dates to PST as per our documentation:
    // https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/
    const date = new Date();
    const formattedDate = main_dayFormatter.format(date);
    const formattedDateParts = main_dayFormatter.formatToParts(date);
    const { day, month, year } = formattedDateParts.reduce((acc, { type, value }) => (Object.assign(Object.assign({}, acc), { [type]: parseInt(value) })), {});
    const userSessionInfo = yield db.retrieve(userSessionKey);
    const mostRecentSessionStartDate = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.mostRecentSessionStartDate;
    const formattedMostRecentSessionStartDate = mostRecentSessionStartDate
        ? main_dayFormatter.format(mostRecentSessionStartDate)
        : null;
    const dailySessionBucketMap = new Map([
        [1, main_DailySessionBucket.ONE_SESSION],
        [2, main_DailySessionBucket.TWO_SESSION],
        [3, main_DailySessionBucket.THREE_SESSION],
        [4, main_DailySessionBucket.FOUR_SESSION],
        [5, main_DailySessionBucket.FIVE_SESSION],
        [6, main_DailySessionBucket.SIX_SESSION],
        [7, main_DailySessionBucket.SEVEN_SESSION],
        [8, main_DailySessionBucket.EIGHT_SESSION],
        [9, main_DailySessionBucket.NINE_SESSION],
    ]);
    let dailySessionBucket = (_a = userSessionInfo === null || userSessionInfo === void 0 ? void 0 : userSessionInfo.dailySessionBucket) !== null && _a !== void 0 ? _a : main_DailySessionBucket.NO_SESSION_BUCKET;
    let isFirstWithinMonth = false;
    if (formattedMostRecentSessionStartDate === formattedDate) {
        dailySessionBucket =
            (_b = dailySessionBucketMap.get(dailySessionBucket + 1)) !== null && _b !== void 0 ? _b : main_DailySessionBucket.TEN_OR_MORE_SESSION;
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket,
        });
    }
    else {
        isFirstWithinMonth =
            !mostRecentSessionStartDate ||
                main_monthFormatter.format(mostRecentSessionStartDate) !== main_monthFormatter.format(date);
        yield db.store(userSessionKey, {
            mostRecentSessionStartDate: date,
            dailySessionBucket: (dailySessionBucket = main_DailySessionBucket.ONE_SESSION),
        });
    }
    const session = {
        name: "session",
        dailySessionBucket,
        isFirstWithinMonth,
        month,
        day,
        year,
    };
    metricsEventTarget.dispatchEvent(new main_TypedCustomEvent("session", session));
}));
//# sourceMappingURL=reportUserSession.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/operational/Count.js

/** @internal */
class main_Count extends main_Metric {
    static count(name, n, dimensions = {}) {
        const count = new main_Count(name, dimensions);
        count.increment(n);
        return count;
    }
    constructor(name, dimensions = {}) {
        super(name, dimensions);
        this.name = name;
        this.count = 0;
    }
    increment(count) {
        this.count += count;
        return this.count;
    }
    toOperationalMetric() {
        return [
            {
                name: `${this.name}${main_serializeMetricDimensions(this.dimensions)}`,
                timestamp: new Date(),
                metric: { $case: "count", count: this.count },
            },
        ];
    }
}
//# sourceMappingURL=Count.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reportPlatformCapabilities.js





/**
 * Report the number of total page loads that have support for various capabilities. By dividing by the total number of
 * data points recorded, we can calculate the percent of page loads with support.
 *
 * @internal
 */
const main_reportPlatformCapabilities = main_Injectable("reportPlatformCapabilities", [main_operationalMetricReporterFactory.token], (operationalMetricsReporter) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    const { webgl, wasm, webxr } = yield main_getPlatformCapabilities();
    operationalMetricsReporter.report(main_Count.count("platform_webgl", webgl.supported ? 1 : 0));
    operationalMetricsReporter.report(main_Count.count("platform_wasm", wasm.supported ? 1 : 0));
    operationalMetricsReporter.report(main_Count.count("platform_webxr", webxr.supported ? 1 : 0));
}));
//# sourceMappingURL=reportPlatformCapabilities.js.map
;// ./node_modules/@snap/camera-kit/lib/metrics/reporters/reporters.js











/**
 * These metrics reporters must be run once in the top-level DI container. They only depend on globally-available
 * services.
 *
 * The businessEventsReporter is special, it doesn't create any of its own metrics, it simply listens to the global
 * metricsEventTarget and reports metrics emitted there to our backend.
 */
const main_reportGloballyScopedMetrics = new main_PartialContainer_PartialContainer({})
    .provides(main_reportHttpMetrics)
    .provides(main_reportBenchmarks)
    .provides(main_reportLensAndAssetDownload)
    .provides(main_reportLegalState)
    .provides(main_reportPlatformCapabilities);
/**
 * These metrics reporters must be run once for each CameraKitSession DI container created. They may depend on services
 * which are only available at the session scope (e.g. the CameraKitSession itself).
 */
const main_reportSessionScopedMetrics = new main_PartialContainer_PartialContainer({})
    .provides(main_reportUserSession)
    .provides(main_reportLensView)
    .provides(main_reportLensWait)
    .provides(main_reportSessionException)
    .provides(main_reportLensValidationFailed);
//# sourceMappingURL=reporters.js.map
;// ./node_modules/browser-fs-access/dist/index.modern.js
const main_e=(()=>{if("undefined"==typeof self)return!1;if("top"in self&&self!==top)try{top}catch(e){return!1}else if("showOpenFilePicker"in self)return"showOpenFilePicker";return!1})(),main_t=main_e?Promise.resolve().then(function(){return main_l}):Promise.resolve().then(function(){return main_h});async function main_n(...e){return(await main_t).default(...e)}const main_r=main_e?Promise.resolve().then(function(){return main_y}):Promise.resolve().then(function(){return main_P});async function main_i(...e){return(await main_r).default(...e)}const main_a=main_e?Promise.resolve().then(function(){return main_m}):Promise.resolve().then(function(){return main_k});async function main_o(...e){return(await main_a).default(...e)}const main_s=async e=>{const t=await e.getFile();return t.handle=e,t};var main_c=async(e=[{}])=>{Array.isArray(e)||(e=[e]);const t=[];e.forEach((e,n)=>{t[n]={description:e.description||"Files",accept:{}},e.mimeTypes?e.mimeTypes.map(r=>{t[n].accept[r]=e.extensions||[]}):t[n].accept["*/*"]=e.extensions||[]});const n=await window.showOpenFilePicker({id:e[0].id,startIn:e[0].startIn,types:t,multiple:e[0].multiple||!1,excludeAcceptAllOption:e[0].excludeAcceptAllOption||!1}),r=await Promise.all(n.map(main_s));return e[0].multiple?r:r[0]},main_l={__proto__:null,default:main_c};function main_u(e){function t(e){if(Object(e)!==e)return Promise.reject(new TypeError(e+" is not an object."));var t=e.done;return Promise.resolve(e.value).then(function(e){return{value:e,done:t}})}return main_u=function(e){this.s=e,this.n=e.next},main_u.prototype={s:null,n:null,next:function(){return t(this.n.apply(this.s,arguments))},return:function(e){var n=this.s.return;return void 0===n?Promise.resolve({value:e,done:!0}):t(n.apply(this.s,arguments))},throw:function(e){var n=this.s.return;return void 0===n?Promise.reject(e):t(n.apply(this.s,arguments))}},new main_u(e)}const main_p=async(e,t,n=e.name,r)=>{const i=[],a=[];var o,s=!1,c=!1;try{for(var l,d=function(e){var t,n,r,i=2;for("undefined"!=typeof Symbol&&(n=Symbol.asyncIterator,r=Symbol.iterator);i--;){if(n&&null!=(t=e[n]))return t.call(e);if(r&&null!=(t=e[r]))return new main_u(t.call(e));n="@@asyncIterator",r="@@iterator"}throw new TypeError("Object is not async iterable")}(e.values());s=!(l=await d.next()).done;s=!1){const o=l.value,s=`${n}/${o.name}`;"file"===o.kind?a.push(o.getFile().then(t=>(t.directoryHandle=e,t.handle=o,Object.defineProperty(t,"webkitRelativePath",{configurable:!0,enumerable:!0,get:()=>s})))):"directory"!==o.kind||!t||r&&r(o)||i.push(main_p(o,t,s,r))}}catch(e){c=!0,o=e}finally{try{s&&null!=d.return&&await d.return()}finally{if(c)throw o}}return[...(await Promise.all(i)).flat(),...await Promise.all(a)]};var main_d=async(e={})=>{e.recursive=e.recursive||!1,e.mode=e.mode||"read";const t=await window.showDirectoryPicker({id:e.id,startIn:e.startIn,mode:e.mode});return main_p(t,e.recursive,void 0,e.skipDirectory)},main_y={__proto__:null,default:main_d},main_f=async(e,t=[{}],n=null,r=!1,i=null)=>{Array.isArray(t)||(t=[t]),t[0].fileName=t[0].fileName||"Untitled";const a=[];let o=null;if(e instanceof Blob&&e.type?o=e.type:e.headers&&e.headers.get("content-type")&&(o=e.headers.get("content-type")),t.forEach((e,t)=>{a[t]={description:e.description||"Files",accept:{}},e.mimeTypes?(0===t&&o&&e.mimeTypes.push(o),e.mimeTypes.map(n=>{a[t].accept[n]=e.extensions||[]})):o?a[t].accept[o]=e.extensions||[]:a[t].accept["*/*"]=e.extensions||[]}),n)try{await n.getFile()}catch(e){if(n=null,r)throw e}const s=n||await window.showSaveFilePicker({suggestedName:t[0].fileName,id:t[0].id,startIn:t[0].startIn,types:a,excludeAcceptAllOption:t[0].excludeAcceptAllOption||!1});!n&&i&&i(s);const c=await s.createWritable();if("stream"in e){const t=e.stream();return await t.pipeTo(c),s}return"body"in e?(await e.body.pipeTo(c),s):(await c.write(await e),await c.close(),s)},main_m={__proto__:null,default:main_f},main_w=async(e=[{}])=>(Array.isArray(e)||(e=[e]),new Promise((t,n)=>{const r=document.createElement("input");r.type="file";const i=[...e.map(e=>e.mimeTypes||[]),...e.map(e=>e.extensions||[])].join();r.multiple=e[0].multiple||!1,r.accept=i||"",r.style.display="none",document.body.append(r);const a=e=>{"function"==typeof o&&o(),t(e)},o=e[0].legacySetup&&e[0].legacySetup(a,()=>o(n),r),s=()=>{window.removeEventListener("focus",s),r.remove()};r.addEventListener("click",()=>{window.addEventListener("focus",s)}),r.addEventListener("change",()=>{window.removeEventListener("focus",s),r.remove(),a(r.multiple?Array.from(r.files):r.files[0])}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),main_h={__proto__:null,default:main_w},main_v=async(e=[{}])=>(Array.isArray(e)||(e=[e]),e[0].recursive=e[0].recursive||!1,new Promise((t,n)=>{const r=document.createElement("input");r.type="file",r.webkitdirectory=!0;const i=e=>{"function"==typeof a&&a(),t(e)},a=e[0].legacySetup&&e[0].legacySetup(i,()=>a(n),r);r.addEventListener("change",()=>{let t=Array.from(r.files);e[0].recursive?e[0].recursive&&e[0].skipDirectory&&(t=t.filter(t=>t.webkitRelativePath.split("/").every(t=>!e[0].skipDirectory({name:t,kind:"directory"})))):t=t.filter(e=>2===e.webkitRelativePath.split("/").length),i(t)}),"showPicker"in HTMLInputElement.prototype?r.showPicker():r.click()})),main_P={__proto__:null,default:main_v},main_b=async(e,t={})=>{Array.isArray(t)&&(t=t[0]);const n=document.createElement("a");let r=e;"body"in e&&(r=await async function(e,t){const n=e.getReader(),r=new ReadableStream({start:e=>async function t(){return n.read().then(({done:n,value:r})=>{if(!n)return e.enqueue(r),t();e.close()})}()}),i=new Response(r),a=await i.blob();return n.releaseLock(),new Blob([a],{type:t})}(e.body,e.headers.get("content-type"))),n.download=t.fileName||"Untitled",n.href=URL.createObjectURL(await r);const i=()=>{"function"==typeof a&&a()},a=t.legacySetup&&t.legacySetup(i,()=>a(),n);return n.addEventListener("click",()=>{setTimeout(()=>URL.revokeObjectURL(n.href),3e4),i()}),n.click(),null},main_k={__proto__:null,default:main_b};

;// ./node_modules/@snap/camera-kit/lib/lens-client-interface/exif.js
const main_JPEG_ID = 0xffd8;
const main_APP1_MARKER = 0xffe1;
const main_EXIF_ID = 0x45786966;
const main_LITTLE_ENDIAN = 0x4949;
const main_ORIENTATION_TAG_OFFSET = 0x0112;
// http://sylvana.net/jpegcrop/exif_orientation.html
var main_Orientation;
(function (Orientation) {
    Orientation[Orientation["TopLeft"] = 1] = "TopLeft";
    Orientation[Orientation["TopRight"] = 2] = "TopRight";
    Orientation[Orientation["BottomRight"] = 3] = "BottomRight";
    Orientation[Orientation["BottomLeft"] = 4] = "BottomLeft";
    Orientation[Orientation["LeftTop"] = 5] = "LeftTop";
    Orientation[Orientation["RightTop"] = 6] = "RightTop";
    Orientation[Orientation["RightBottom"] = 7] = "RightBottom";
    Orientation[Orientation["LeftBottom"] = 8] = "LeftBottom";
})(main_Orientation || (main_Orientation = {}));
/**
 * Parses JPEG EXIF metadata and returns Orientation tag of it, or undefined if not applicable.
 *
 * Adopted from https://stackoverflow.com/a/32490603
 *
 * @internal
 * @param data JPEG binary.
 * @returns Orientation tag value or undefined.
 */
function main_extractJpegOrientationTag(data) {
    const view = new DataView(data);
    if (view.getUint16(0, false) !== main_JPEG_ID)
        return undefined;
    const length = view.byteLength;
    let offset = 2;
    while (offset < length) {
        if (view.getUint16(offset + 2, false) <= 8)
            return undefined;
        let marker = view.getUint16(offset, false);
        offset += 2;
        if (marker === main_APP1_MARKER) {
            if (view.getUint32((offset += 2), false) !== main_EXIF_ID) {
                return undefined;
            }
            let little = view.getUint16((offset += 6), false) === main_LITTLE_ENDIAN;
            offset += view.getUint32(offset + 4, little);
            let tags = view.getUint16(offset, little);
            offset += 2;
            for (let i = 0; i < tags; i++) {
                if (view.getUint16(offset + i * 12, little) === main_ORIENTATION_TAG_OFFSET) {
                    return view.getUint16(offset + i * 12 + 8, little);
                }
            }
        }
        else if ((marker & 0xff00) !== 0xff00) {
            break;
        }
        else {
            offset += view.getUint16(offset, false);
        }
    }
    return undefined;
}
//# sourceMappingURL=exif.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-client-interface/imagePicker.js




const main_imagePicker_logger = main_getLogger("lensClientInterfaceImagePicker");
// Common MIME types supported by all browsers as per:
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
const main_imagePicker_mimeTypes = {
    image: [
        "image/avif",
        "image/bmp",
        "image/gif",
        "image/jpeg",
        "image/png",
        "image/svg+xml",
        "image/tiff",
        "image/webp",
    ],
    video: [
        "video/3gpp",
        "video/3gpp2",
        "video/mp2t",
        "video/mp4",
        "video/mpeg",
        "video/ogg",
        "video/quicktime",
        "video/webm",
        "video/x-msvideo",
    ],
};
function* main_enumerateSupportedVideoTypes(types) {
    // test video element to perform MIME types support check
    const testVideoElement = typeof document !== "undefined" ? document.createElement("video") : undefined;
    for (const type of types) {
        if ((testVideoElement === null || testVideoElement === void 0 ? void 0 : testVideoElement.canPlayType(type)) || false) {
            yield type;
        }
    }
}
function main_readFileAsArrayBuffer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("load", (event) => {
            // Safety: target.result is always an ArrayBuffer because we read file using readAsArrayBuffer()
            resolve(event.target.result);
        });
        reader.addEventListener("error", (event) => {
            reject(event.target.error);
        });
        reader.readAsArrayBuffer(file);
    });
}
function main_getMimeType({ ImageEnabled, VideoEnabled }) {
    const types = [];
    if (ImageEnabled === "1")
        types.push(...main_imagePicker_mimeTypes.image);
    if (VideoEnabled === "1")
        types.push(...main_enumerateSupportedVideoTypes(main_imagePicker_mimeTypes.video));
    if (types.length === 0) {
        throw new Error("Unknown media type requested.");
    }
    return types;
}
function main_getOrientation(data, lensCore) {
    var _a;
    const orientationMap = {
        [1 /* Orientation.TopLeft */]: lensCore.ExternalMediaOrientation.CW0,
        [2 /* Orientation.TopRight */]: lensCore.ExternalMediaOrientation.CW0,
        [3 /* Orientation.BottomRight */]: lensCore.ExternalMediaOrientation.CW180,
        [4 /* Orientation.BottomLeft */]: lensCore.ExternalMediaOrientation.CW180,
        [5 /* Orientation.LeftTop */]: lensCore.ExternalMediaOrientation.CW90,
        [6 /* Orientation.RightTop */]: lensCore.ExternalMediaOrientation.CW90,
        [7 /* Orientation.RightBottom */]: lensCore.ExternalMediaOrientation.CW270,
        [8 /* Orientation.LeftBottom */]: lensCore.ExternalMediaOrientation.CW270,
    };
    try {
        return orientationMap[(_a = main_extractJpegOrientationTag(data)) !== null && _a !== void 0 ? _a : 1 /* Orientation.TopLeft */];
    }
    catch (error) {
        main_imagePicker_logger.info("Error occured while reading EXIF orientation tag.", error);
        return lensCore.ExternalMediaOrientation.CW0;
    }
}
/**
 * Shows file open dialog to allow user to select image/video and provides the selection to LensCore.
 *
 * @internal
 */
function main_pickClientImage(clientInterfaceData, lensCore) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        const mimeTypes = main_getMimeType(clientInterfaceData);
        main_imagePicker_logger.debug(`Opening file dialog for MIME types: ${mimeTypes}`);
        const file = yield main_n({ mimeTypes });
        main_imagePicker_logger.debug(`Selected file MIME type: ${file.type}`);
        const data = yield main_readFileAsArrayBuffer(file);
        if (file.type.startsWith("image/")) {
            lensCore.provideExternalImage({
                data,
                orientation: main_getOrientation(data, lensCore),
                // As per Corvyn: both iOS and Android clients have the ability to pick out individual faces
                // from an image to apply the effect on, using each of their native face detectors (not using LensCore).
                // That's what the faceRects is for. For now, we can just apply the effect to the whole image (so face rect
                // [[0,0][1,1]]). In future, in order to be able to pick out individual faces in the media picker, we could:
                // - hook up some external web face tracking library
                // - make LensCore to expose face tracker to external clients
                faceRects: [
                    {
                        origin: {
                            x: 0,
                            y: 0,
                        },
                        size: {
                            width: 1,
                            height: 1,
                        },
                    },
                ],
            });
        }
        else {
            lensCore.provideExternalVideo({
                data,
                orientation: lensCore.ExternalMediaOrientation.CW0,
            });
        }
    });
}
//# sourceMappingURL=imagePicker.js.map
;// ./node_modules/@snap/camera-kit/lib/lens-client-interface/lensClientInterface.js






const main_lensClientInterface_logger = main_getLogger("lensClientInterface");
/**
 * Registers client interface handler in LensCore.
 *
 * @internal
 * @param lensCore LensCore instance to register in.
 * @param sessionErrors EventTarget to dispatch errors in.
 */
const main_registerLensClientInterfaceHandler = main_Injectable("registerLensClientInterfaceHandler", [main_lensCoreFactory.token], (lensCore) => {
    // Make sure we are compatible with previous LensCore versions
    if (!lensCore.setClientInterfaceRequestHandler) {
        main_lensClientInterface_logger.warn("Current LensCore version doesn't support lens client interface requests");
        return;
    }
    lensCore.setClientInterfaceRequestHandler(({ data, interfaceControl, interfaceAction }) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        if (interfaceControl === lensCore.InterfaceControl.ImagePicker &&
            interfaceAction === lensCore.InterfaceAction.Show) {
            yield main_pickClientImage(data, lensCore).catch((error) => {
                main_lensClientInterface_logger.error(main_lensImagePickerError("Error occurred while attempting to select an image file for the lens request.", error));
            });
        }
    }));
});
//# sourceMappingURL=lensClientInterface.js.map
;// ./node_modules/@snap/camera-kit/lib/remote-configuration/preloadConfiguration.js





const main_setPreloadedConfiguration = main_Injectable("setPreloadedConfiguration", [main_lensCoreFactory.token, main_remoteConfigurationFactory.token], (lensCore, remoteConfiguration) => {
    remoteConfiguration
        .getNamespace(main_Namespace.LENS_CORE_CONFIG)
        .pipe(main_take(1))
        .subscribe((configs) => {
        const inputs = configs.map(({ configId, value }) => ({ configId, value }));
        lensCore.setPreloadedConfiguration(inputs);
    });
});
//# sourceMappingURL=preloadConfiguration.js.map
;// ./node_modules/@snap/camera-kit/lib/CameraKit.js





















const main_CameraKit_logger = main_getLogger("CameraKit");
const main_CameraKit_log = main_errorLoggingDecorator(main_CameraKit_logger);
/**
 * Metrics event names that are exposed to apps.
 */
const main_publicMetricsEventNames = ["lensView", "lensWait"];
/**
 * The entry point to the CameraKit SDK's API. Most of CameraKit's features are accessed via this class.
 *
 * Applications obtain an instance of CameraKit by calling {@link bootstrapCameraKit}.
 *
 * @example
 * ```ts
 * const cameraKit = await bootstrapCameraKit(config)
 * ```
 *
 * Then this class can be used to:
 * - Create a {@link CameraKitSession} instance, which provides the API for setting up media inputs, applying Lenses,
 * and obtaining rendered `<canvas>` outputs.
 * - Query for lenses using {@link LensRepository}.
 * - Listen for lens usage metrics events using {@link MetricsEventTarget}.
 *
 * @category Rendering
 * @category Lenses
 */
class main_CameraKit {
    /** @internal */
    constructor(
    /**
     * Used to query for lenses and lens groups.
     */
    lensRepository, lensCore, pageVisibility, container, allMetrics) {
        this.lensRepository = lensRepository;
        this.lensCore = lensCore;
        this.pageVisibility = pageVisibility;
        this.container = container;
        /**
         * Business metrics (e.g. each time a lens is viewed) are emitted here.
         */
        this.metrics = new main_TypedEventTarget();
        this.sessions = [];
        this.lenses = { repository: this.lensRepository };
        // Proxy only a subset of all metrics events to the public-facing emitter -- applications don't need to
        // know about most events.
        main_publicMetricsEventNames.forEach((eventName) => {
            allMetrics.addEventListener(eventName, (e) => this.metrics.dispatchEvent(e));
        });
    }
    /**
     * Create a CameraKitSession.
     *
     * This initializes the rendering engine and returns a {@link CameraKitSession} instance, which provides access
     * to Lens rendering.
     *
     * @example
     * ```ts
     * const cameraKit = await bootstrapCameraKit(config)
     * const session = await cameraKit.createSession()
     *
     * const lens = await cameraKit.lensRepository.loadLens(lensId, groupId)
     * session.applyLens(lens)
     * ```
     *
     * @param options
     */
    createSession({ liveRenderTarget, renderWhileTabHidden, } = {}) {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            // Any error happened during lens rendering can be processed by subscribing to sessionErrors
            const exceptionHandler = (error) => {
                if (error.name === "LensCoreAbortError") {
                    main_CameraKit_logger.error(main_lensAbortError("Unrecoverable error occurred during lens execution. " +
                        "The CameraKitSession will be destroyed.", error));
                }
                else {
                    main_CameraKit_logger.error(main_lensExecutionError("Error occurred during lens execution. " +
                        "The lens cannot be rendered and will be removed from the CameraKitSession.", error));
                }
            };
            /**
             * If/when we add support for multiple concurrent sessions, we'll need to create a copy of the LensCore WASM
             * module. If we move managing web workers into JS, spawing a new worker thread with its own copy of LensCore
             * probably becomes a lot more straightforward.
             *
             * Currently chromium has a bug preventing rendering while tab is hidden when LensCore is in worker mode.
             * In order to process tab while it is hidden, the current stopgap is to pass in renderWhileTabHidden as true,
             * which will initiate session in non worker mode, and set the RenderLoopMode to `SetTimeout`.
             */
            yield this.lensCore.initialize({
                canvas: liveRenderTarget,
                shouldUseWorker: !renderWhileTabHidden && this.container.get(main_configurationToken).shouldUseWorker,
                exceptionHandler,
            });
            yield this.lensCore.setRenderLoopMode({
                mode: renderWhileTabHidden
                    ? this.lensCore.RenderLoopMode.SetTimeout
                    : this.lensCore.RenderLoopMode.RequestAnimationFrame,
            });
            // Each session gets its own DI Container – some Services provided by this Container may be shared with the
            // root CameraKit Container, but others may be scoped to the session by passing their token to `copy()`.
            const sessionContainer = this.container
                // Right now this is a no-op. If/when we add support for multiple concurrent sessions, we may end up
                // scoping LensCore to the session.
                .copy()
                .provides(main_sessionStateFactory)
                .provides(main_lensStateFactory)
                .provides(main_lensKeyboardFactory)
                .provides(main_cameraKitSessionFactory)
                .run(main_registerLensAssetsProvider)
                .run(main_registerLensClientInterfaceHandler)
                .run(main_setPreloadedConfiguration)
                // We'll run a PartialContainer containing reporters for session-scoped metrics. Running this container
                // allows each metric reporter to initialize itself (e.g. by adding event listeners to detect when certain
                // actions occur).
                .run(main_reportSessionScopedMetrics)
                // UriHandlers may have dependencies on session-scoped services (e.g. LensState, LensKeyboard), so they'll
                // be registered with LensCore here.
                .run(main_registerUriHandlers);
            const session = sessionContainer.get(main_cameraKitSessionFactory.token);
            this.sessions.push(session);
            return session;
        });
    }
    /**
     * Destroys all sessions and frees all resources.
     */
    destroy() {
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            main_resetLogger();
            this.pageVisibility.destroy();
            yield Promise.all(this.sessions.map((session) => session.destroy()));
            this.sessions = [];
        });
    }
}
main_decorate([
    main_CameraKit_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", [Object]),
    main_metadata("design:returntype", Promise)
], main_CameraKit.prototype, "createSession", null);
main_decorate([
    main_CameraKit_log,
    main_metadata("design:type", Function),
    main_metadata("design:paramtypes", []),
    main_metadata("design:returntype", Promise)
], main_CameraKit.prototype, "destroy", null);
/** @internal */
const main_cameraKitFactory = main_Injectable("CameraKit", [
    main_lensRepositoryFactory.token,
    main_metricsEventTargetFactory.token,
    main_lensCoreFactory.token,
    main_pageVisibilityFactory.token,
    main_CONTAINER,
], (lensRepository, metrics, lensCore, pageVisibility, container) => new main_CameraKit(lensRepository, lensCore, pageVisibility, container, metrics));
//# sourceMappingURL=CameraKit.js.map
;// ./node_modules/@snap/camera-kit/lib/platform/assertPlatformSupported.js


/**
 * Throw if the current platform is not capable of running Camera Kit.
 */
function main_assertPlatformSupported() {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        const { wasm, webgl } = yield main_getPlatformCapabilities();
        if (!wasm.supported)
            throw wasm.error;
        if (!webgl.supported)
            throw webgl.error;
    });
}
//# sourceMappingURL=assertPlatformSupported.js.map
;// ./node_modules/uuid/dist/esm-browser/native.js
const main_randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
/* harmony default export */ const main_esm_browser_native = ({
  randomUUID: main_randomUUID
});
;// ./node_modules/uuid/dist/esm-browser/rng.js
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
let main_getRandomValues;
const main_rnds8 = new Uint8Array(16);
function main_rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!main_getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
    main_getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

    if (!main_getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return main_getRandomValues(main_rnds8);
}
;// ./node_modules/uuid/dist/esm-browser/stringify.js

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

const main_byteToHex = [];

for (let i = 0; i < 256; ++i) {
  main_byteToHex.push((i + 0x100).toString(16).slice(1));
}

function main_unsafeStringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  return main_byteToHex[arr[offset + 0]] + main_byteToHex[arr[offset + 1]] + main_byteToHex[arr[offset + 2]] + main_byteToHex[arr[offset + 3]] + '-' + main_byteToHex[arr[offset + 4]] + main_byteToHex[arr[offset + 5]] + '-' + main_byteToHex[arr[offset + 6]] + main_byteToHex[arr[offset + 7]] + '-' + main_byteToHex[arr[offset + 8]] + main_byteToHex[arr[offset + 9]] + '-' + main_byteToHex[arr[offset + 10]] + main_byteToHex[arr[offset + 11]] + main_byteToHex[arr[offset + 12]] + main_byteToHex[arr[offset + 13]] + main_byteToHex[arr[offset + 14]] + main_byteToHex[arr[offset + 15]];
}

function main_stringify(arr, offset = 0) {
  const uuid = main_unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!validate(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

/* harmony default export */ const main_esm_browser_stringify = ((/* unused pure expression or super */ null && (main_stringify)));
;// ./node_modules/uuid/dist/esm-browser/v4.js




function main_v4(options, buf, offset) {
  if (main_esm_browser_native.randomUUID && !buf && !options) {
    return main_esm_browser_native.randomUUID();
  }

  options = options || {};
  const rnds = options.random || (options.rng || main_rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return main_unsafeStringify(rnds);
}

/* harmony default export */ const main_esm_browser_v4 = (main_v4);
;// ./node_modules/@snap/camera-kit/lib/metrics/businessEventsReporter.js



















const main_businessEventsReporter_logger = main_getLogger("BusinessEventsReporter");
// CameraKit's prod metrics endpoint.
// See: https://github.sc-corp.net/Snapchat/pb_schema/blob/2a966db/proto/camera_kit/v3/service.proto#L133
const main_relativePath = "/com.snap.camerakit.v3.Metrics/metrics/business_events";
// It is rather cumbersome to check the actual final size of a batch, but we can easily limit the number of events we
// include in each batch -- looking at historical data, typical events average ~1.3kb per event. But there are some
// events (like CAMERA_KIT_EXCEPTION, which includes a stack trace) that can be much larger.
//
// To prevent us running over the 64kibibyte limit imposed by browsers on `keep-alive` requests, we'll set quite a low
// limit to ensure we don't lose events which are larger in size than we expect.
const main_BUSINESS_EVENT_BATCH_MAX_SIZE = 10;
const main_BUSINESS_EVENT_BATCH_MAX_AGE_MS = 5000;
const main_connectivityTypeMapping = {
    cellular: main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_MOBILE,
    bluetooth: main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_BLUETOOTH,
    wifi: main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_WIFI,
    unknown: main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN,
    none: main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNREACHABLE,
};
const main_vendorUuidKey = "vendorUuid";
const main_vendorUuidExpiry = main_convertDaysToSeconds(60);
/**
 * Retrieves or generates a vendor UUID (Universally Unique Identifier).
 *
 * @param persistence - The persistence storage interface where UUID is stored.
 * @returns {Promise<string | undefined>} - A Promise that resolves to the vendor UUID or undefined,
 * if any failure occurs or opt-in is not enabled.
 */
const main_getOrGenerateVendorUuid = (persistence) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
    try {
        const storedUuid = yield persistence.retrieve(main_vendorUuidKey);
        if (storedUuid) {
            return storedUuid;
        }
        const newUuid = main_esm_browser_v4();
        yield persistence.store(main_vendorUuidKey, newUuid);
        return newUuid;
    }
    catch (error) {
        throw new Error("Failed to generate vendor UUID");
    }
});
function main_listenAndReport(metricsEventTarget, metricsHandler, pageVisibility, eventHandlers, apiHostname, appVendorAndPartnerUuid) {
    const sessionId = main_esm_browser_v4();
    main_businessEventsReporter_logger.log(`Session ID: ${sessionId}`);
    // Blizzard convention is to start the sequenceId at 1.
    let sequenceId = 1;
    const handler = new main_HandlerChainBuilder(metricsHandler)
        .map(main_createMappingHandler((events) => {
        const body = {
            batchEvents: {
                "@type": "com.snapchat.analytics.blizzard.ServerEventBatch",
                serverEvents: events,
            },
        };
        return new Request(`https://${apiHostname}${main_relativePath}`, {
            method: "POST",
            body: JSON.stringify(body),
            credentials: "include",
            // When this is true it makes fetch behave like `Navigator.sendBeacon` – that is, the request
            // will still be made even if the page terminates.
            // https://developer.mozilla.org/en-US/docs/Web/API/fetch
            keepalive: pageVisibility.isDuringVisibilityTransition("hidden"),
        });
    }, pageVisibility))
        .map(main_createBatchingHandler({
        batchReduce: (previousBundle, businessEvent) => {
            const bundle = previousBundle !== null && previousBundle !== void 0 ? previousBundle : [];
            bundle.push(businessEvent);
            return bundle;
        },
        isBatchComplete: (bundle) => bundle.length >= main_BUSINESS_EVENT_BATCH_MAX_SIZE,
        maxBatchAge: main_BUSINESS_EVENT_BATCH_MAX_AGE_MS,
        pageVisibility,
    })).handler;
    const makeBlizzardEvent = (event, appVendorUuid, partnerUuid) => {
        var _a;
        const { sdkShortVersion, sdkLongVersion, lensCore, locale, origin, deviceModel, connectionType } = main_getPlatformInfo();
        const deviceConnectivity = (_a = main_connectivityTypeMapping[connectionType]) !== null && _a !== void 0 ? _a : main_cameraKitEvents_CameraKitConnectivityType.CAMERA_KIT_CONNECTIVITY_TYPE_UNKNOWN;
        return Object.assign(Object.assign({}, event), { cameraKitEventBase: main_CameraKitEventBase.fromPartial({
                kitEventBase: main_KitEventBase.fromPartial({
                    locale,
                    kitVariant: main_KitType.CAMERA_KIT_WEB,
                    kitVariantVersion: sdkShortVersion,
                    kitClientTimestampMillis: Date.now(),
                }),
                deviceCluster: 0,
                cameraKitVersion: sdkLongVersion,
                lensCoreVersion: lensCore.version,
                deviceModel,
                cameraKitVariant: main_CameraKitVariant.CAMERA_KIT_VARIANT_PARTNER,
                cameraKitFlavor: main_cameraKitEvents_CameraKitFlavor.CAMERA_KIT_FLAVOR_DEBUG,
                // We overload appId, using the origin instead because it's nice and human-readable (our backed adds
                // the true appId as oauth_client_id before forwarding events to Blizzard).
                appId: origin,
                deviceConnectivity,
                sessionId,
                appVendorUuid,
                partnerUuid,
            }) });
    };
    const sendServerEvent = (eventName, eventData) => {
        const { osName: osType, osVersion } = main_getPlatformInfo();
        return handler(main_ServerEvent.fromPartial({
            eventName,
            osType,
            osVersion,
            maxSequenceIdOnInstance: 0,
            sequenceId: sequenceId++,
            eventData,
        }));
    };
    // Add event listeners for each event type and turn those listeners into Observables
    const metricsEvents = main_entries(eventHandlers).map(([eventType, createEventData]) => main_fromEvent(metricsEventTarget, eventType).pipe(main_map((event) => ({ event, createEventData }))));
    // Subscribe to all the metrics events and combine them with the app/partner IDs obtained
    // from remote configuration -- this means we'll queue up any metrics events that occur
    // before remote config is downloaded, and send them once that config is available.
    main_merge(...metricsEvents)
        .pipe(main_combineLatestWith(appVendorAndPartnerUuid))
        .subscribe(([{ event, createEventData }, { appVendorUuid, partnerUuid }]) => {
        // Safety: When iterating over object keys in a mapped type, we lose the association between the key type
        // and the value type – at each iteration, the key type is a union of all possible keys and the value type
        // is a union of all possible values. When the value is a function with an argument, and that argument
        // depends on the key type (which is a union), the contravariance of the argument type means that the union
        // becomes an intersection. In our case here, this means the compiler expects each argument to contain all
        // properties from all event types. The cast is safe because the mapped `EventHandlers` type ensures that
        // `createEventData` takes an argument of the type corresponding its key's `eventType`'s event detail.
        const [eventName, eventData] = createEventData(makeBlizzardEvent(event.detail, appVendorUuid, partnerUuid));
        sendServerEvent(eventName, eventData);
    });
}
function main_getAppVendorAndPartnerUuid(configuration, remoteConfiguration) {
    const vendorAnalyticsPersistence = new main_ExpiringPersistence(() => main_vendorUuidExpiry, new main_IndexedDBPersistence({ databaseName: "VendorAnalytics" }));
    return remoteConfiguration.getInitializationConfig().pipe(main_take(1), main_switchMap(({ appVendorUuidOptIn }) => {
        const partnerUuid = configuration.analyticsId;
        if (appVendorUuidOptIn) {
            return main_from_from(main_getOrGenerateVendorUuid(vendorAnalyticsPersistence)).pipe(main_map((appVendorUuid) => ({ appVendorUuid, partnerUuid })));
        }
        return main_of({ appVendorUuid: undefined, partnerUuid });
    }), main_catchError((error) => {
        main_businessEventsReporter_logger.warn(`Failed to retrieve or generate vendor UUID.`, error);
        return main_of({ appVendorUuid: undefined, partnerUuid: configuration.analyticsId });
    }));
}
const main_businessEventsReporterFactory = main_Injectable("businessEventsReporter", [
    main_metricsEventTargetFactory.token,
    main_metricsHandlerFactory.token,
    main_pageVisibilityFactory.token,
    main_configurationToken,
    main_remoteConfigurationFactory.token,
], (metricsEventTarget, metricsHandler, pageVisibility, configuration, remoteConfiguration) => {
    const appVendorAndPartnerUuid = main_getAppVendorAndPartnerUuid(configuration, remoteConfiguration);
    /**
     * This defines a mapping from a business event's external name (the name we document in public
     * API docs), to its internal representation as a Blizzard ServerEvent.
     *
     * It is important that we do this, since the naming of these internal business events are
     * unintuitive and will not make sense to SDK users.
     *
     * To specify the internal event, we must give the ServerEvent's eventName, the specific property
     *  name which contains the event data (this is a "oneof" property on ServerEvent), and use the
     * correct event type's `fromPartial` method (this is generated from the ServerEvent protobuf).
     *
     * These events are documented here:
     * https://docs.google.com/document/d/1-kSzFWCWw9Qo3D08FR1_cqeHTsUtk9p3p3uOptzWDTY/
     *
     * They are defined in code here:
     * https://github.sc-corp.net/Snapchat/snapchat/tree/master/blizzard/schema/blizzard-schema/
     *  codeGen/src/main/java/com/snapchat/analytics/schema/events/cameraKit
     */
    main_listenAndReport(metricsEventTarget, metricsHandler, pageVisibility, {
        assetDownload: (event) => [
            "CAMERA_KIT_ASSET_DOWNLOAD",
            { cameraKitAssetDownload: main_CameraKitAssetDownload.fromPartial(event) },
        ],
        assetValidationFailed: (event) => [
            "CAMERA_KIT_ASSET_VALIDATION_FAILED",
            {
                cameraKitAssetValidationFailed: main_CameraKitAssetValidationFailed.fromPartial(event),
            },
        ],
        benchmarkComplete: (event) => [
            "CAMERA_KIT_WEB_BENCHMARK_COMPLETE",
            {
                cameraKitWebBenchmarkComplete: main_CameraKitWebBenchmarkComplete.fromPartial(event),
            },
        ],
        exception: (event) => [
            "CAMERA_KIT_EXCEPTION",
            { cameraKitException: main_CameraKitException.fromPartial(event) },
        ],
        legalPrompt: (event) => [
            "CAMERA_KIT_LEGAL_PROMPT",
            { cameraKitLegalPrompt: main_CameraKitLegalPrompt.fromPartial(event) },
        ],
        lensDownload: (event) => [
            "CAMERA_KIT_LENS_DOWNLOAD",
            { cameraKitLensDownload: main_CameraKitLensDownload.fromPartial(event) },
        ],
        lensView: (event) => [
            "CAMERA_KIT_WEB_LENS_SWIPE",
            { cameraKitWebLensSwipe: main_CameraKitWebLensSwipe.fromPartial(event) },
        ],
        lensWait: (event) => [
            "CAMERA_KIT_LENS_SPIN",
            { cameraKitLensSpin: main_CameraKitLensSpin.fromPartial(event) },
        ],
        lensContentValidationFailed: (event) => [
            "CAMERA_KIT_LENS_CONTENT_VALIDATION_FAILED",
            {
                cameraKitLensContentValidationFailed: main_CameraKitLensContentValidationFailed.fromPartial(event),
            },
        ],
        session: (event) => [
            "CAMERA_KIT_SESSION",
            { cameraKitSession: main_cameraKitEvents_CameraKitSession.fromPartial(event) },
        ],
    }, configuration.apiHostname, appVendorAndPartnerUuid);
});
//# sourceMappingURL=businessEventsReporter.js.map
;// ./node_modules/@snap/camera-kit/lib/logger/registerLogEntriesSubscriber.js







/**
 * The factory subscribes to log entry events and, based on the configured log level,
 * forwards matching log entries to the logger specified in the CameraKit configuration object.
 *
 * @internal
 */
const main_registerLogEntriesSubscriber = main_Injectable("registerLogEntriesSubscriber", [main_configurationToken, main_logEntriesFactory.token], (configuration, logEntries) => {
    logEntries
        .pipe(main_filter((entry) => main_logLevelMap[entry.level] >= main_logLevelMap[configuration.logLevel]))
        .subscribe((logEntry) => {
        switch (configuration.logger) {
            case "console":
                // Chrome doesn't print the `cause` Error property, so we need to manually construct a complete
                // stack trace using our `stringifyError` helper.
                const messages = main_getPlatformInfo().browser.brand === "Chrome"
                    ? logEntry.messages.map((message) => {
                        if (!(message instanceof Error))
                            return message;
                        message.stack = main_stringifyError(message);
                        return message;
                    })
                    : logEntry.messages;
                console[logEntry.level](`[CameraKit.${logEntry.module}]`, ...messages);
                break;
        }
    });
});
//# sourceMappingURL=registerLogEntriesSubscriber.js.map
;// ./node_modules/@snap/camera-kit/lib/clients/createTsProtoClient.js


function main_messageClass(message, data) {
    return class Message {
        constructor() {
            Object.assign(this, message.fromPartial(data));
        }
        static deserializeBinary(data) {
            const protobufMessage = new Message();
            return Object.assign(Object.assign({}, protobufMessage), message.decode(data));
        }
        serializeBinary() {
            return message.encode(this).finish();
        }
        toObject() {
            return this;
        }
    };
}
/**
 * Convert a service definition generated by ts-proto (using the `outputServices=generic-definitions` CLI option) into
 * a working client.
 *
 * @param serviceDefinition
 * @param handler
 * @returns A client that can make requests to a remote service by sending Protobuf-encoded messages over HTTP using the
 * grpc-web package.
 *
 * @internal
 */
function main_createTsProtoClient(serviceDefinition, handler) {
    return main_fromEntries(main_entries(serviceDefinition.methods).map(([methodName, methodDefinition]) => {
        return [
            methodName,
            (request) => main_tslib_es6_awaiter(this, void 0, void 0, function* () {
                const requestType = main_messageClass(methodDefinition.requestType, request);
                const responseType = main_messageClass(methodDefinition.responseType, {});
                return handler({
                    serviceName: serviceDefinition.fullName,
                    methodName: methodDefinition.name,
                    requestType,
                    responseType,
                });
            }),
        ];
        // Safety: We're mapping from the method definitions object into the GrpcServiceClient object in a manner
        // that preserves each key in the method definitions object, pairing it with the corresponding
        // serialization/deserialization logic for that particular method. But in doing this, we lose type
        // specificity by converting the method definition object to a list of entries, mapping them, and then
        // converting back into the client object -- so we're forced into this type cast.
    }));
}
//# sourceMappingURL=createTsProtoClient.js.map
;// ./node_modules/@snap/camera-kit/lib/common/result.js
/* eslint-disable max-classes-per-file */
class main_OkResult {
    constructor(value) {
        this.value = value;
        this.ok = true;
    }
    unwrap() {
        return this.value;
    }
    unwrapErr() {
        throw new Error("Ok Result cannot unwrapErr.");
    }
    map(m) {
        return new main_OkResult(m(this.value));
    }
    flatMap(m) {
        return m(this.value);
    }
}
const main_Ok = (value) => new main_OkResult(value);
class main_ErrResult {
    constructor(value) {
        this.value = value;
        this.ok = false;
    }
    unwrap() {
        throw this.value;
    }
    unwrapErr() {
        return this.value;
    }
    map() {
        return this;
    }
    flatMap() {
        return this;
    }
}
const main_Err = (value) => new main_ErrResult(value);
//# sourceMappingURL=result.js.map
;// ./node_modules/@snap/camera-kit/lib/clients/grpcHandler.js






/**
 * An Injectable handler that can make requests to the CameraKit backend service via grpc-web. This handler can be
 * passed to {@link createTsProtoClient} to produce a well-typed service client.
 *
 * @internal
 */
const main_gprcHandlerFactory = main_Injectable("grpcHandler", [main_configurationToken, main_cameraKitServiceFetchHandlerFactory.token], (configuration, fetchHandler) => {
    const host = `https://${configuration.apiHostname}`;
    // We define our own Transport so that we can use our custom `fetch` implementation. This is important for two
    // reasons:
    //   1. Our custom fetch includes features like retries that we want to use for these requests.
    //   2. Applications may override this fetch implementation (via our DI system) to support more advanced
    //      use-cases.
    const transport = (options) => {
        let metadata = undefined;
        const controller = AbortController ? new AbortController() : undefined;
        let cancelled = false;
        return {
            sendMessage(msgBytes) {
                var _a;
                fetchHandler(options.url, {
                    headers: (_a = metadata === null || metadata === void 0 ? void 0 : metadata.toHeaders()) !== null && _a !== void 0 ? _a : {},
                    method: "POST",
                    body: msgBytes,
                    signal: controller === null || controller === void 0 ? void 0 : controller.signal,
                })
                    .then((response) => {
                    options.onHeaders(new main_grpc_web_client_umd.grpc.Metadata(response.headers), response.status);
                    return response.arrayBuffer();
                })
                    .then((body) => {
                    if (cancelled)
                        return;
                    options.onChunk(new Uint8Array(body));
                    options.onEnd();
                })
                    .catch((error) => {
                    if (cancelled)
                        return;
                    cancelled = true;
                    options.onEnd(error);
                });
            },
            start(m) {
                metadata = m;
            },
            finishSend() { },
            cancel() {
                if (cancelled)
                    return;
                cancelled = true;
                controller === null || controller === void 0 ? void 0 : controller.abort();
            },
        };
    };
    return (request) => main_tslib_es6_awaiter(void 0, void 0, void 0, function* () {
        return new Promise((resolve) => {
            main_grpc_web_client_umd.grpc.unary({
                methodName: request.methodName,
                service: { serviceName: request.serviceName },
                requestStream: false,
                responseStream: false,
                requestType: request.requestType,
                responseType: request.responseType,
            }, {
                request: new request.requestType(),
                host,
                onEnd: (response) => {
                    if (response.status === main_grpc_web_client_umd.grpc.Code.OK) {
                        resolve(main_Ok(response));
                    }
                    else {
                        resolve(main_Err(response));
                    }
                },
                transport,
            });
        });
    });
});
//# sourceMappingURL=grpcHandler.js.map
;// ./node_modules/@snap/camera-kit/lib/clients/lensesClient.js




const main_lensesClientFactory = main_Injectable("lensesClient", [main_gprcHandlerFactory.token], (grpcHandler) => main_createTsProtoClient(main_LensesDefinition, grpcHandler));
//# sourceMappingURL=lensesClient.js.map
// EXTERNAL MODULE: ./node_modules/protobufjs/index.js
var main_protobufjs = __webpack_require__(2549);
;// ./node_modules/@snap/camera-kit/lib/lens/cameraKitLensSource.js






/**
 * This LensSource loads lenses from the CameraKit backend service. It is meant to be used as the last LensSource in the
 * LensSource[] array used by LensRepository to load lenses.
 *
 * We ensure this is the case by providing cameraKitLensSourceFactory *after* the DI container has been modified by the
 * application during bootstrap -- this way we're guaranteed to place this LensSource after all other LensSources.
 *
 * @internal
 */
const main_cameraKitLensSourceFactory = main_ConcatInjectable(main_lensSourcesFactory.token, [main_lensesClientFactory.token], (lensesClient) => ({
    // This LensSource will claim ownership of all lens groups -- it should be used as the last element in a
    // list of LensSources, as a catch-all to load any lens groups not claimed by other LensSources.
    isGroupOwner() {
        return true;
    },
    loadLens(lensId, groupId) {
        var _a;
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const result = yield lensesClient.getGroupLens({ lensId, groupId });
            if (!result.ok) {
                const error = result.unwrapErr();
                throw new Error(`Cannot load lens lens ${lensId} from group ${groupId}. An error occured in the ` +
                    `gRPC client:\n\t[${error.status}] ${error.statusMessage}`);
            }
            const response = result.unwrap();
            if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lens)) {
                throw new Error(`Cannot load lens ${lensId} from group ${groupId}. The response did not contain ` +
                    `a lens.\n\t${JSON.stringify(result)} for requestId ${response.headers.get("x-request-id")}`);
            }
            return main_Lens.encode(response.message.lens, main_protobufjs.Writer.create().uint32(10).fork()).ldelim().finish();
        });
    },
    loadLensGroup(groupId) {
        var _a;
        return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
            const result = yield lensesClient.getGroup({ id: groupId });
            if (!result.ok) {
                const error = result.unwrapErr();
                throw new Error(`Cannot load lens group ${groupId}. An error occured in the gRPC client:\n` +
                    `\t[${error.status}] ${error.statusMessage}`);
            }
            const response = result.unwrap();
            if (!((_a = response.message) === null || _a === void 0 ? void 0 : _a.lenses)) {
                throw new Error(`Cannot load lens group ${groupId}. The response contained no lenses ` +
                    `\n\t${JSON.stringify(response)} for requestId ${response.headers.get("x-request-id")}`);
            }
            const writer = main_protobufjs.Writer.create();
            response.message.lenses.forEach((lens) => main_Lens.encode(lens, writer.uint32(10).fork()).ldelim());
            return writer.finish();
        });
    },
}));
//# sourceMappingURL=cameraKitLensSource.js.map
;// ./node_modules/@snap/camera-kit/lib/bootstrapCameraKit.js










































const main_bootstrapCameraKit_logger = main_getLogger("bootstrapCameraKit");
// The following errors are not wrapped with BootstrapError and bubble up as is.
const main_nonWrappableErrors = [
    "ConfigurationError",
    "PlatformNotSupportedError",
];
/**
 * Returns true if given error has to be wrapped with BootstrapError.
 */
function main_shouldWrapError(error) {
    if (error instanceof Error) {
        return !main_nonWrappableErrors.some((name) => error.name === name);
    }
    return true;
}
/**
 * Bootstrap CameraKit. This will download the WebAssembly code which powers CameraKit's rendering engine, and return
 * an instance of {@link CameraKit}.
 *
 * CameraKit must be provided with some configuration (the application's API token), and there are some additional
 * configurations which are optional.
 *
 * Descriptions of the available configurations can be found in the documentation for
 * {@link CameraKitBootstrapConfiguration}
 *
 * ---
 *
 * There is also a second, more advanced way to modify CameraKit to provide greater flexibility to support less common
 * use cases.
 *
 * This requires some knowledge of CameraKit's dependency injection system, and allows applications to provide their
 * own custom implementations of certain CameraKit components. This functionality will only be needed by applications
 * with very specific, more advanced requirements.
 *
 * @example
 * ```ts
 * // The most common way to bootstrap:
 * const cameraKit = await bootstrapCameraKit({ apiToken: myApiToken })
 *
 * // For special advanced use-cases, it is possible to provide custom implementations for certain CameraKit components.
 * const cameraKit = await bootstrapCameraKit(config, (container) => {
 *   return container.provides(myCustomRemoteMediaAssetLoaderFactory)
 * })
 * ```
 *
 * @param configuration Configure CameraKit with e.g. credentials, global resource endpoints, etc.
 * @param provide Optional function that can make modifications to CameraKit's root DI container.
 * @returns A {@link CameraKit} instance, which is the entry point to CameraKit's API.
 *
 * @throws
 *  - {@link ConfigurationError} when provided configuration object is invalid
 *  - {@link PlatformNotSupportedError} when current platform is not supported by CameraKit
 *  - {@link BootstrapError} when a failure occurs while initializing CameraKit and downloading the render engine
 * WebAssembly binary.
 *
 * @category Bootstrapping and Configuration
 */
function main_bootstrapCameraKit(configuration, provide) {
    return main_tslib_es6_awaiter(this, void 0, void 0, function* () {
        console.info(`Camera Kit SDK: ${main_environment_namespaceObject.i} (${main_lensCoreWasmVersions_namespaceObject.version}/${main_lensCoreWasmVersions_namespaceObject.buildNumber})`);
        try {
            const startTimeMs = performance.now();
            main_assert(main_isSafeString(configuration.apiToken), main_configurationError("Invalid or unsafe apiToken provided."));
            const configurationFactory = main_createCameraKitConfigurationFactory(configuration);
            // Public container holds services which applications can overwrite with their own implementations.
            const defaultPublicContainer = main_Container.provides(configurationFactory)
                .provides(main_pageVisibilityFactory)
                .provides(main_defaultFetchHandlerFactory)
                .provides(main_remoteMediaAssetLoaderFactory)
                .provides(main_lensSourcesFactory)
                .provides(main_remoteApiServicesFactory)
                .provides(main_uriHandlersFactory);
            const publicContainer = provide ? provide(defaultPublicContainer) : defaultPublicContainer;
            // Now that the client's provide() function has completed and the configuration override is ready,
            // we create another container to initialize the logger. This ensures that logging is available
            // as we continue bootstrapping. We don't initialize the logger as part of the defaultPublicContainer
            // because we don't want applications to provide their own logger implementations,
            // and we're not interested in errors thrown by their provide() function.
            // Below is the minimum required container to report errors to Blizzard.
            const telemetryContainer = main_Container.provides(publicContainer)
                .provides(main_cameraKitServiceFetchHandlerFactory)
                .provides(main_gprcHandlerFactory)
                .provides(main_logEntriesFactory)
                .run(main_registerLogEntriesSubscriber)
                .provides(main_lensesClientFactory)
                .provides(main_requestStateEventTargetFactory)
                .provides(main_metricsEventTargetFactory)
                .provides(main_metricsHandlerFactory)
                .provides(main_operationalMetricReporterFactory)
                .provides(main_reportGlobalException)
                .provides(main_cofHandlerFactory)
                .provides(main_remoteConfigurationFactory)
                .provides(main_legalPromptFactory)
                .provides(main_legalStateFactory)
                // We'll run a PartialContainer containing reporters for globally-scoped metrics. Running this container
                // allows each metric reporter to initialize itself (e.g. by adding event listeners to detect when certain
                // actions occur). This PartialContainer also includes the service which listens to locally-reported metrics
                // and sends them to our backend.
                .run(main_reportGloballyScopedMetrics)
                .run(main_businessEventsReporterFactory);
            // Run the exception logger so that it can subscribe to log events -- we can't use `Container.run()` because
            // reportGlobalException is also used as a dependency by other Services (and run does not provide Services,
            // it just runs them once).
            telemetryContainer.get(main_reportGlobalException.token);
            // At this point, logger is configured to report to console and Blizzard.
            yield main_assertPlatformSupported();
            // LensCore is a foundational component which must be created asynchronously.
            // But it's annoying for every consumer of LensCore to have to wait on Promise<LensCore>
            // (which means they become async themselves). So we'll create a DI container which provides Promise<LensCore>,
            // wait for that promise once here, then create a new DI container that just contains LensCore.
            const lensCore = yield telemetryContainer.provides(main_lensCoreFactory).get(main_lensCoreFactory.token);
            const container = telemetryContainer
                .provides(main_Injectable(main_lensCoreFactory.token, () => lensCore))
                .provides(main_cameraKitLensSourceFactory)
                .provides(main_lensPersistenceStoreFactory)
                .provides(main_deviceDependentAssetLoaderFactory)
                .provides(main_staticAssetLoaderFactory)
                .provides(main_lensAssetRepositoryFactory)
                .provides(main_lensRepositoryFactory)
                .provides(main_cameraKitFactory);
            const cameraKit = container.get(main_cameraKitFactory.token);
            const bootstrapTimeMs = performance.now() - startTimeMs;
            const reporter = container.get(main_operationalMetricReporterFactory.token);
            reporter.timer("bootstrap_time", bootstrapTimeMs);
            return cameraKit;
        }
        catch (error) {
            if (main_shouldWrapError(error)) {
                error = main_bootstrapError("Error occurred during Camera Kit bootstrapping.", error);
            }
            main_bootstrapCameraKit_logger.error(error);
            throw error;
        }
    });
}
/**
 * Extensions offer a way to provide custom implementations of certain parts of the CameraKit SDK.
 *
 * This enables more advanced use-cases, in which the default behavior of the SDK is substantially altered. For example,
 * replacing the default implementation that loads remote lens assets with a custom implementation that returns
 * different assets based on some business logic within the application.
 *
 * An extension is implemented as a [PartialContainer] – a collection of factory functions, each with its own
 * dependencies, which each provide some "Service." A Service can be of any type, and the CameraKit SDK defines its
 * own Services, some of which can be overridden by providing a custom implementation of the type via an extension.
 *
 * Here's an example of how extensions might be used:
 * ```ts
 * import { bootstrapCameraKit, createExtension, remoteMediaAssetLoaderFactory } from '@snap/camera-kit'
 *
 * const myCustomRemoteAssetLoader = Injectable(
 *   remoteMediaAssetLoaderFactory.token,
 *   [remoteMediaAssetLoaderFactory.token] as const,
 *   (defaultLoader: AssetLoader): AssetLoader => {
 *     return async (asset, lens) => {
 *       if (lens?.id === MY_SPECIAL_LENS) {
 *         return (await fetch('my/asset.glb')).arrayBuffer()
 *       }
 *       return defaultLoader(asset, lens)
 *     }
 *   },
 * )
 *
 * const myExtension = createExtension().provides(myCustomeRemoteAssetLoader)
 * const cameraKit = bootstrapCameraKit(config, container => container.provides(myExtension))
 * ```
 *
 * This also enables greater modularity – the person/team creating the extension can do so in their own package, which
 * could be shared by many applications that all require the same functionality.
 *
 * @returns A {@link PartialContainer} which can be used to create a collection of Services, and can later be provided
 * to CameraKit's DI container during {@link bootstrapCameraKit}.
 *
 * @category Bootstrapping and Configuration
 */
function main_createExtension() {
    return new PartialContainer({});
}
//# sourceMappingURL=bootstrapCameraKit.js.map
;// ./node_modules/@snap/camera-kit/lib/extensions/extensionRequestContext.js



function main_getExtensionRequestContext() {
    return main_ExtensionRequestContext.encode({
        userAgent: main_getCameraKitUserAgent(),
        locale: main_getPlatformInfo().fullLocale,
    }).finish();
}
/**
 * Extension request context.
 */
const main_extensionRequestContext = main_getExtensionRequestContext();
//# sourceMappingURL=extensionRequestContext.js.map
;// ./node_modules/@snap/camera-kit/lib/media-sources/FunctionSource.js


const main_getYUVImageData = (canvas, lensCore) => __awaiter(void 0, void 0, void 0, function* () {
    const { width, height } = canvas;
    // A YUV buffer has lower-res UV channels, so the total number of bytes works out like so:
    const outputBuffer = new ArrayBuffer((width * height * 3) / 2);
    yield lensCore.imageToYuvBuffer({ image: canvas, width, height, outputBuffer });
    const pixels = new Uint8ClampedArray(outputBuffer);
    return new ImageData(pixels, width, height);
});
const main_getRGBImageData = (output, imageReader2D) => {
    if (imageReader2D === null)
        return new ImageData(0, 0);
    imageReader2D.drawImage(output, 0, 0);
    return imageReader2D.getImageData(0, 0, output.width, output.height);
};
const main_getImageBitmap = (imageData, format) => __awaiter(void 0, void 0, void 0, function* () {
    switch (format) {
        case "nv12":
        case "yuv":
            if (!window.VideoFrame)
                return Promise.reject(new Error(`Cannot process frame. ImageData in ${format} is not supported by this browser.`));
            const frame = new VideoFrame(imageData.data.buffer, {
                format: "NV12",
                codedWidth: imageData.width,
                codedHeight: imageData.height,
                timestamp: 0,
            });
            return createImageBitmap(frame);
        case "rgb":
            return createImageBitmap(imageData);
    }
});
/**
 * Creates a {@link CameraKitSource} from a function which provides per-frame pixel data to CameraKit.
 *
 * @param sourceFunction This function will be called in a requestAnimationFrame loop. Each time it is called, it is
 * passed a `render` function. It may call `render` and CameraKit will process the pixel data passed to `render` and
 * return a Promise of the processed pixels (along with rendering them to the normal output canvases).
 * @param options
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 *
 * @internal
 */
const main_createFunctionSource = (sourceFunction, options = {}) => {
    let width = 0;
    let height = 0;
    let shouldProcessFrame = true;
    // We require an auxiliary canvas that we can use to read back pixel data (unless we're in YUV mode, in which case
    // we use LensCore to convert between formats and we don't need this canvas).
    const imageReaderCanvas = document.createElement("canvas");
    const imageReader2D = imageReaderCanvas.getContext("2d");
    const subscriber = {
        onAttach: (source, lensCore, reportError) => {
            const outputs = lensCore.getOutputCanvases();
            const output = {
                live: outputs[lensCore.CanvasType.Preview.value],
                capture: outputs[lensCore.CanvasType.Capture.value],
            };
            const processFrame = (source, lensCore, reportError) => requestAnimationFrame(() => __awaiter(void 0, void 0, void 0, function* () {
                var _a;
                if (!shouldProcessFrame)
                    return;
                try {
                    yield sourceFunction(({ format, imageData, timestampMillis }) => {
                        // TODO: with processFrame promisified, we don't really need to create a wrapper promise
                        const frameOutput = new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
                            const inputFrame = yield main_getImageBitmap(imageData, format !== null && format !== void 0 ? format : "rgb");
                            if (inputFrame.width !== width || inputFrame.height !== height) {
                                width = imageReaderCanvas.width = inputFrame.width;
                                height = imageReaderCanvas.height = inputFrame.height;
                                // We don't await this promise, because we want to continue to process frames and
                                // let LensCore manage the concurrency between setting resolution and processing a
                                // frame.
                                source.setRenderSize(width, height);
                            }
                            lensCore
                                .processFrame({ inputFrame, timestampMillis })
                                .then(() => __awaiter(void 0, void 0, void 0, function* () {
                                // Closing releases graphics resources associated with the frame, now that is
                                // has been processed.
                                inputFrame.close();
                                switch (format !== null && format !== void 0 ? format : "rgb") {
                                    case "nv12":
                                    case "yuv":
                                        const [live, capture] = yield Promise.all([
                                            main_getYUVImageData(output.live, lensCore),
                                            main_getYUVImageData(output.capture, lensCore),
                                        ]).catch((error) => {
                                            reject(error);
                                            return [undefined, undefined];
                                        });
                                        // if either of these is undefined, we'll have already rejected
                                        // the promise, so we can return.
                                        if (!live || !capture)
                                            return;
                                        return resolve({ live, capture });
                                    case "rgb":
                                        return resolve({
                                            live: main_getRGBImageData(output.live, imageReader2D),
                                            capture: main_getRGBImageData(output.capture, imageReader2D),
                                        });
                                }
                            }))
                                .catch((error) => {
                                inputFrame.close();
                                reject(error);
                            });
                        }));
                        // Even if there's an error processing the frame, we do want to attempt to process the next
                        // frame. We expect `sourceFunction` to handle a rejected `frameOutput` Promise.
                        frameOutput.finally(() => processFrame(source, lensCore, reportError));
                        return frameOutput;
                    });
                }
                catch (error) {
                    reportError(new Error("Failure to process frame, which was not handled by the provided " +
                        `MediaSourceFunction ${(_a = sourceFunction.name) !== null && _a !== void 0 ? _a : "anonymous"}.`, { cause: error }));
                }
            }));
            processFrame(source, lensCore, reportError);
        },
        onDetach: () => {
            shouldProcessFrame = false;
        },
    };
    return new CameraKitSource({ useManualFrameProcessing: true }, subscriber, options);
};
//# sourceMappingURL=FunctionSource.js.map
;// ./node_modules/@snap/camera-kit/lib/media-sources/ImageSource.js

/**
 * Create a {@link CameraKitSource} from an
 * [HTMLImageElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement).
 *
 * @param image Image element.
 * @param options
 * @param options.cameraType By default we set this to 'user', which is the camera type most Lenses expect.
 * @param options.fpsLimit By default we set no limit on FPS.
 *
 * @category Rendering
 */
function main_createImageSource(image, options = {}) {
    return new CameraKitSource({
        media: image,
    }, {}, options);
}
//# sourceMappingURL=ImageSource.js.map
;// ./node_modules/@snap/camera-kit/lib/index.js






























//# sourceMappingURL=index.js.map
;// ./node_modules/@ffmpeg/ffmpeg/dist/esm/const.js
const main_MIME_TYPE_JAVASCRIPT = "text/javascript";
const main_MIME_TYPE_WASM = "application/wasm";
const main_CORE_VERSION = "0.12.6";
const main_CORE_URL = (/* unused pure expression or super */ null && (`https://unpkg.com/@ffmpeg/core@${main_CORE_VERSION}/dist/umd/ffmpeg-core.js`));
var main_FFMessageType;
(function (FFMessageType) {
    FFMessageType["LOAD"] = "LOAD";
    FFMessageType["EXEC"] = "EXEC";
    FFMessageType["WRITE_FILE"] = "WRITE_FILE";
    FFMessageType["READ_FILE"] = "READ_FILE";
    FFMessageType["DELETE_FILE"] = "DELETE_FILE";
    FFMessageType["RENAME"] = "RENAME";
    FFMessageType["CREATE_DIR"] = "CREATE_DIR";
    FFMessageType["LIST_DIR"] = "LIST_DIR";
    FFMessageType["DELETE_DIR"] = "DELETE_DIR";
    FFMessageType["ERROR"] = "ERROR";
    FFMessageType["DOWNLOAD"] = "DOWNLOAD";
    FFMessageType["PROGRESS"] = "PROGRESS";
    FFMessageType["LOG"] = "LOG";
    FFMessageType["MOUNT"] = "MOUNT";
    FFMessageType["UNMOUNT"] = "UNMOUNT";
})(main_FFMessageType || (main_FFMessageType = {}));

;// ./node_modules/@ffmpeg/ffmpeg/dist/esm/utils.js
/**
 * Generate an unique message ID.
 */
const main_getMessageID = (() => {
    let messageID = 0;
    return () => messageID++;
})();

;// ./node_modules/@ffmpeg/ffmpeg/dist/esm/errors.js
const main_ERROR_UNKNOWN_MESSAGE_TYPE = new Error("unknown message type");
const main_ERROR_NOT_LOADED = new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first");
const main_ERROR_TERMINATED = new Error("called FFmpeg.terminate()");
const main_ERROR_IMPORT_FAILURE = new Error("failed to import ffmpeg-core.js");

;// ./node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js



/**
 * Provides APIs to interact with ffmpeg web worker.
 *
 * @example
 * ```ts
 * const ffmpeg = new FFmpeg();
 * ```
 */
class main_FFmpeg {
    #worker = null;
    /**
     * #resolves and #rejects tracks Promise resolves and rejects to
     * be called when we receive message from web worker.
     */
    #resolves = {};
    #rejects = {};
    #logEventCallbacks = [];
    #progressEventCallbacks = [];
    loaded = false;
    /**
     * register worker message event handlers.
     */
    #registerHandlers = () => {
        if (this.#worker) {
            this.#worker.onmessage = ({ data: { id, type, data }, }) => {
                switch (type) {
                    case main_FFMessageType.LOAD:
                        this.loaded = true;
                        this.#resolves[id](data);
                        break;
                    case main_FFMessageType.MOUNT:
                    case main_FFMessageType.UNMOUNT:
                    case main_FFMessageType.EXEC:
                    case main_FFMessageType.WRITE_FILE:
                    case main_FFMessageType.READ_FILE:
                    case main_FFMessageType.DELETE_FILE:
                    case main_FFMessageType.RENAME:
                    case main_FFMessageType.CREATE_DIR:
                    case main_FFMessageType.LIST_DIR:
                    case main_FFMessageType.DELETE_DIR:
                        this.#resolves[id](data);
                        break;
                    case main_FFMessageType.LOG:
                        this.#logEventCallbacks.forEach((f) => f(data));
                        break;
                    case main_FFMessageType.PROGRESS:
                        this.#progressEventCallbacks.forEach((f) => f(data));
                        break;
                    case main_FFMessageType.ERROR:
                        this.#rejects[id](data);
                        break;
                }
                delete this.#resolves[id];
                delete this.#rejects[id];
            };
        }
    };
    /**
     * Generic function to send messages to web worker.
     */
    #send = ({ type, data }, trans = [], signal) => {
        if (!this.#worker) {
            return Promise.reject(main_ERROR_NOT_LOADED);
        }
        return new Promise((resolve, reject) => {
            const id = main_getMessageID();
            this.#worker && this.#worker.postMessage({ id, type, data }, trans);
            this.#resolves[id] = resolve;
            this.#rejects[id] = reject;
            signal?.addEventListener("abort", () => {
                reject(new DOMException(`Message # ${id} was aborted`, "AbortError"));
            }, { once: true });
        });
    };
    on(event, callback) {
        if (event === "log") {
            this.#logEventCallbacks.push(callback);
        }
        else if (event === "progress") {
            this.#progressEventCallbacks.push(callback);
        }
    }
    off(event, callback) {
        if (event === "log") {
            this.#logEventCallbacks = this.#logEventCallbacks.filter((f) => f !== callback);
        }
        else if (event === "progress") {
            this.#progressEventCallbacks = this.#progressEventCallbacks.filter((f) => f !== callback);
        }
    }
    /**
     * Loads ffmpeg-core inside web worker. It is required to call this method first
     * as it initializes WebAssembly and other essential variables.
     *
     * @category FFmpeg
     * @returns `true` if ffmpeg core is loaded for the first time.
     */
    load = ({ classWorkerURL, ...config } = {}, { signal } = {}) => {
        if (!this.#worker) {
            this.#worker = classWorkerURL ?
                new Worker(new URL(classWorkerURL, "file:///Users/adityaagarwal/Documents/GitHub/recording/node_modules/@ffmpeg/ffmpeg/dist/esm/classes.js"), {
                    type: "module",
                }) :
                // We need to duplicated the code here to enable webpack
                // to bundle worekr.js here.
                new Worker(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(138), __webpack_require__.b), {
                    type: undefined,
                });
            this.#registerHandlers();
        }
        return this.#send({
            type: main_FFMessageType.LOAD,
            data: config,
        }, undefined, signal);
    };
    /**
     * Execute ffmpeg command.
     *
     * @remarks
     * To avoid common I/O issues, ["-nostdin", "-y"] are prepended to the args
     * by default.
     *
     * @example
     * ```ts
     * const ffmpeg = new FFmpeg();
     * await ffmpeg.load();
     * await ffmpeg.writeFile("video.avi", ...);
     * // ffmpeg -i video.avi video.mp4
     * await ffmpeg.exec(["-i", "video.avi", "video.mp4"]);
     * const data = ffmpeg.readFile("video.mp4");
     * ```
     *
     * @returns `0` if no error, `!= 0` if timeout (1) or error.
     * @category FFmpeg
     */
    exec = (
    /** ffmpeg command line args */
    args, 
    /**
     * milliseconds to wait before stopping the command execution.
     *
     * @defaultValue -1
     */
    timeout = -1, { signal } = {}) => this.#send({
        type: main_FFMessageType.EXEC,
        data: { args, timeout },
    }, undefined, signal);
    /**
     * Terminate all ongoing API calls and terminate web worker.
     * `FFmpeg.load()` must be called again before calling any other APIs.
     *
     * @category FFmpeg
     */
    terminate = () => {
        const ids = Object.keys(this.#rejects);
        // rejects all incomplete Promises.
        for (const id of ids) {
            this.#rejects[id](main_ERROR_TERMINATED);
            delete this.#rejects[id];
            delete this.#resolves[id];
        }
        if (this.#worker) {
            this.#worker.terminate();
            this.#worker = null;
            this.loaded = false;
        }
    };
    /**
     * Write data to ffmpeg.wasm.
     *
     * @example
     * ```ts
     * const ffmpeg = new FFmpeg();
     * await ffmpeg.load();
     * await ffmpeg.writeFile("video.avi", await fetchFile("../video.avi"));
     * await ffmpeg.writeFile("text.txt", "hello world");
     * ```
     *
     * @category File System
     */
    writeFile = (path, data, { signal } = {}) => {
        const trans = [];
        if (data instanceof Uint8Array) {
            trans.push(data.buffer);
        }
        return this.#send({
            type: main_FFMessageType.WRITE_FILE,
            data: { path, data },
        }, trans, signal);
    };
    mount = (fsType, options, mountPoint) => {
        const trans = [];
        return this.#send({
            type: main_FFMessageType.MOUNT,
            data: { fsType, options, mountPoint },
        }, trans);
    };
    unmount = (mountPoint) => {
        const trans = [];
        return this.#send({
            type: main_FFMessageType.UNMOUNT,
            data: { mountPoint },
        }, trans);
    };
    /**
     * Read data from ffmpeg.wasm.
     *
     * @example
     * ```ts
     * const ffmpeg = new FFmpeg();
     * await ffmpeg.load();
     * const data = await ffmpeg.readFile("video.mp4");
     * ```
     *
     * @category File System
     */
    readFile = (path, 
    /**
     * File content encoding, supports two encodings:
     * - utf8: read file as text file, return data in string type.
     * - binary: read file as binary file, return data in Uint8Array type.
     *
     * @defaultValue binary
     */
    encoding = "binary", { signal } = {}) => this.#send({
        type: main_FFMessageType.READ_FILE,
        data: { path, encoding },
    }, undefined, signal);
    /**
     * Delete a file.
     *
     * @category File System
     */
    deleteFile = (path, { signal } = {}) => this.#send({
        type: main_FFMessageType.DELETE_FILE,
        data: { path },
    }, undefined, signal);
    /**
     * Rename a file or directory.
     *
     * @category File System
     */
    rename = (oldPath, newPath, { signal } = {}) => this.#send({
        type: main_FFMessageType.RENAME,
        data: { oldPath, newPath },
    }, undefined, signal);
    /**
     * Create a directory.
     *
     * @category File System
     */
    createDir = (path, { signal } = {}) => this.#send({
        type: main_FFMessageType.CREATE_DIR,
        data: { path },
    }, undefined, signal);
    /**
     * List directory contents.
     *
     * @category File System
     */
    listDir = (path, { signal } = {}) => this.#send({
        type: main_FFMessageType.LIST_DIR,
        data: { path },
    }, undefined, signal);
    /**
     * Delete an empty directory.
     *
     * @category File System
     */
    deleteDir = (path, { signal } = {}) => this.#send({
        type: main_FFMessageType.DELETE_DIR,
        data: { path },
    }, undefined, signal);
}

;// ./node_modules/@ffmpeg/ffmpeg/dist/esm/index.js


;// ./node_modules/@ffmpeg/util/dist/esm/errors.js
const main_ERROR_RESPONSE_BODY_READER = new Error("failed to get response body reader");
const main_ERROR_INCOMPLETED_DOWNLOAD = new Error("failed to complete download");

;// ./node_modules/@ffmpeg/util/dist/esm/const.js
const main_HeaderContentLength = "Content-Length";

;// ./node_modules/@ffmpeg/util/dist/esm/index.js


const main_readFromBlobOrFile = (blob) => new Promise((resolve, reject) => {
    const fileReader = new FileReader();
    fileReader.onload = () => {
        const { result } = fileReader;
        if (result instanceof ArrayBuffer) {
            resolve(new Uint8Array(result));
        }
        else {
            resolve(new Uint8Array());
        }
    };
    fileReader.onerror = (event) => {
        reject(Error(`File could not be read! Code=${event?.target?.error?.code || -1}`));
    };
    fileReader.readAsArrayBuffer(blob);
});
/**
 * An util function to fetch data from url string, base64, URL, File or Blob format.
 *
 * Examples:
 * ```ts
 * // URL
 * await fetchFile("http://localhost:3000/video.mp4");
 * // base64
 * await fetchFile("data:<type>;base64,wL2dvYWwgbW9yZ...");
 * // URL
 * await fetchFile(new URL("video.mp4", import.meta.url));
 * // File
 * fileInput.addEventListener('change', (e) => {
 *   await fetchFile(e.target.files[0]);
 * });
 * // Blob
 * const blob = new Blob(...);
 * await fetchFile(blob);
 * ```
 */
const main_fetchFile = async (file) => {
    let data;
    if (typeof file === "string") {
        /* From base64 format */
        if (/data:_data\/([a-zA-Z]*);base64,([^"]*)/.test(file)) {
            data = atob(file.split(",")[1])
                .split("")
                .map((c) => c.charCodeAt(0));
            /* From remote server/URL */
        }
        else {
            data = await (await fetch(file)).arrayBuffer();
        }
    }
    else if (file instanceof URL) {
        data = await (await fetch(file)).arrayBuffer();
    }
    else if (file instanceof File || file instanceof Blob) {
        data = await main_readFromBlobOrFile(file);
    }
    else {
        return new Uint8Array();
    }
    return new Uint8Array(data);
};
/**
 * importScript dynamically import a script, useful when you
 * want to use different versions of ffmpeg.wasm based on environment.
 *
 * Example:
 *
 * ```ts
 * await importScript("http://localhost:3000/ffmpeg.js");
 * ```
 */
const main_importScript = async (url) => new Promise((resolve) => {
    const script = document.createElement("script");
    const eventHandler = () => {
        script.removeEventListener("load", eventHandler);
        resolve();
    };
    script.src = url;
    script.type = "text/javascript";
    script.addEventListener("load", eventHandler);
    document.getElementsByTagName("head")[0].appendChild(script);
});
/**
 * Download content of a URL with progress.
 *
 * Progress only works when Content-Length is provided by the server.
 *
 */
const main_downloadWithProgress = async (url, cb) => {
    const resp = await fetch(url);
    let buf;
    try {
        // Set total to -1 to indicate that there is not Content-Type Header.
        const total = parseInt(resp.headers.get(main_HeaderContentLength) || "-1");
        const reader = resp.body?.getReader();
        if (!reader)
            throw main_ERROR_RESPONSE_BODY_READER;
        const chunks = [];
        let received = 0;
        for (;;) {
            const { done, value } = await reader.read();
            const delta = value ? value.length : 0;
            if (done) {
                if (total != -1 && total !== received)
                    throw main_ERROR_INCOMPLETED_DOWNLOAD;
                cb && cb({ url, total, received, delta, done });
                break;
            }
            chunks.push(value);
            received += delta;
            cb && cb({ url, total, received, delta, done });
        }
        const data = new Uint8Array(received);
        let position = 0;
        for (const chunk of chunks) {
            data.set(chunk, position);
            position += chunk.length;
        }
        buf = data.buffer;
    }
    catch (e) {
        console.log(`failed to send download progress event: `, e);
        // Fetch arrayBuffer directly when it is not possible to get progress.
        buf = await resp.arrayBuffer();
        cb &&
            cb({
                url,
                total: buf.byteLength,
                received: buf.byteLength,
                delta: 0,
                done: true,
            });
    }
    return buf;
};
/**
 * toBlobURL fetches data from an URL and return a blob URL.
 *
 * Example:
 *
 * ```ts
 * await toBlobURL("http://localhost:3000/ffmpeg.js", "text/javascript");
 * ```
 */
const main_toBlobURL = async (url, mimeType, progress = false, cb) => {
    const buf = progress
        ? await main_downloadWithProgress(url, cb)
        : await (await fetch(url)).arrayBuffer();
    const blob = new Blob([buf], { type: mimeType });
    return URL.createObjectURL(blob);
};

;// ./src/config.js
const main_CONFIG = {
  LENS_ID: "7b4a3004-9fc9-4769-a1fa-36fde3f96836",
  GROUP_ID: "fdd0879f-c570-490e-9dfc-cba0f122699f",
  API_TOKEN: "eyJhbGciOiJIUzI1NiIsImtpZCI6IkNhbnZhc1MyU0hNQUNQcm9kIiwidHlwIjoiSldUIn0.eyJhdWQiOiJjYW52YXMtY2FudmFzYXBpIiwiaXNzIjoiY2FudmFzLXMyc3Rva2VuIiwibmJmIjoxNzA2NzExNzk4LCJzdWIiOiJhNWQ0ZjU2NC0yZTM0LTQyN2EtODI1Ni03OGE2NTFhODc0ZTR-U1RBR0lOR35mMzBjN2JmNy1lNjhjLTRhNzUtOWFlNC05NmJjOTNkOGIyOGYifQ.xLriKo1jpzUBAc1wfGpLVeQ44Ewqncblby-wYE1vRu0",
}

;// ./src/main.js





if (main_CONFIG.API_TOKEN === "__API_TOKEN__") {
  throw new Error("Please configure your Camera Kit credentials in config.js")
}

;(async function () {
  let mediaRecorder
  let recordedChunks = []
  let isBackFacing = false
  let recordPressedCount = 0

  const ffmpeg = new main_FFmpeg()
  //Replace with your own api token, lens id, and group id
  const apiToken = main_CONFIG.API_TOKEN
  const lensID = main_CONFIG.LENS_ID
  const groupID = main_CONFIG.GROUP_ID

  const cameraKit = await main_bootstrapCameraKit({
    apiToken: apiToken,
  })

  //Set which camera will be used
  //'user' = front camera
  //'environment' = back camera
  const constraints = {
    video: {
      facingMode: "user",
      width: { ideal: 3840, min: 1280 },  // 4K width
      height: { ideal: 2160, min: 720 },  // 4K height (16:9 aspect ratio)
      aspectRatio: { ideal: 16/9 }  // Add aspect ratio constraint
    },
    audio: false // Optional: Disable microphone
  }

  //Get canvas element for live render target
  const liveRenderTarget = document.getElementById("canvas")

  // Set canvas size to maintain aspect ratio
  const aspectRatio = 16/9;
  const width = window.innerWidth;
  const height = width / aspectRatio;
  liveRenderTarget.style.width = '100%';
  liveRenderTarget.style.height = 'auto';

  //Create camera kit session and assign liveRenderTarget canvas to render out live render target from camera kit
  const session = await cameraKit.createSession({ liveRenderTarget })

  //Check if getUserMedia is supported
  if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
    console.error('getUserMedia is not supported');
    alert('Your browser does not support accessing the camera. Please use a modern browser like Chrome or Firefox.');
    return;
  }

  try {
    // First explicitly request permissions on desktop
    await navigator.permissions.query({ name: 'camera' })
      .then(async (permissionStatus) => {
        if (permissionStatus.state === 'denied') {
          throw new Error('Camera permission was denied');
        }
      })
      .catch(error => {
        console.log('Permissions API not supported, falling back to getUserMedia');
      });

    // Then check available devices
    const permissions = await navigator.mediaDevices.enumerateDevices();
    const videoDevices = permissions.filter(device => device.kind === 'videoinput');
    
    if (videoDevices.length === 0) {
      throw new Error('No video devices found');
    }

    // For desktop browsers, try with 4K constraints first
    let mediaStream;
    try {
      mediaStream = await navigator.mediaDevices.getUserMedia(constraints);
    } catch (initialError) {
      console.warn('Failed with 4K constraints, trying HD:', initialError);
      // Fallback to HD if 4K fails
      mediaStream = await navigator.mediaDevices.getUserMedia({
        video: {
          facingMode: "user",
          width: { ideal: 1920, min: 1280 },
          height: { ideal: 1080, min: 720 },  // Fix height for HD (1080p)
          aspectRatio: { ideal: 16/9 }
        },
        audio: false
      });
    }

    const source = main_createMediaStreamSource(mediaStream, { cameraType: "user" });

    //Set up source settings so that it renders out correctly on browser
    await session.setSource(source);
    //only for front camera use
    source.setTransform(main_Transform2D_Transform2D.MirrorX);
    await source.setRenderSize(window.innerWidth, window.innerHeight);
    await session.setFPSLimit(60);
    await session.play(); //plays live target by default
  } catch (error) {
    console.error('Error accessing camera:', error.name, error.message);
    if (error.name === 'NotAllowedError' || error.message === 'Camera permission was denied') {
      alert('Camera access was denied. Please grant camera permissions in your browser settings and reload the page.\n\nIn Chrome: Click the camera icon in the address bar and select "Allow".');
    } else if (error.name === 'NotFoundError') {
      alert('No camera found on your device.');
    } else if (error.name === 'NotReadableError') {
      alert('Camera is already in use by another application.');
    } else if (error.name === 'OverconstrainedError') {
      // If we get an OverconstrainedError, try again with no constraints
      try {
        let mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
        const source = main_createMediaStreamSource(mediaStream, { cameraType: "user" });
        await session.setSource(source);
        source.setTransform(main_Transform2D_Transform2D.MirrorX);
        await source.setRenderSize(window.innerWidth, window.innerHeight);
        await session.setFPSLimit(60);
        await session.play();
      } catch (retryError) {
        console.error('Error on retry:', retryError);
        alert('Could not access camera. Please check your camera settings and reload the page.');
      }
    } else {
      alert('Error accessing camera. Please make sure you have granted camera permissions and are using a supported browser.');
    }
    return;
  }

  //Assign Lens ID (left) and Group ID(Right) to camera kit
  const lens = await cameraKit.lensRepository.loadLens(lensID, groupID)

  await session.applyLens(lens)

  //Get all elements require to perform logics
  const recordButton = document.getElementById("record-button")
  const recordOutline = document.getElementById("outline")
  const actionbutton = document.getElementById("action-buttons")
  const switchButton = document.getElementById("switch-button")
  const loadingIcon = document.getElementById("loading")
  const backButtonContainer = document.getElementById("back-button-container")

  recordButton.addEventListener("click", async () => {
    //first check if it should start record or stop record
    // even number = start, odd number = stop
    if (recordPressedCount % 2 == 0) {
      //Manage media recorder and start recording
      manageMediaRecorder(session)

      //Show stop record button
      recordButton.style.backgroundImage = "url('./assets/RecordStop.png')"
    } else {
      //hide stop record button
      RecordButtonToggle(false)
      //switch back to record button when recording stopped
      recordButton.style.backgroundImage = "url('./assets/RecordButton.png')"
      //Stop media recording
      mediaRecorder.stop()
    }
    recordPressedCount += 1
  })

  switchButton.addEventListener("click", () => {
    //update & switch between front and back camera
    updateCamera(session)
  })

  /*
  ========================================
  Functions
  ========================================
  */

  //To convert recorded video to proper mp4 format that can be shared to social media
  async function fixVideoDuration(blob) {
    console.log(blob)
    // Load FFmpeg.js
    const baseURL = "https://unpkg.com/@ffmpeg/core@0.12.6/dist/umd"
    await ffmpeg.load({
      coreURL: await main_toBlobURL(`${baseURL}/ffmpeg-core.js`, "text/javascript"),
      wasmURL: await main_toBlobURL(`${baseURL}/ffmpeg-core.wasm`, "application/wasm"),
    })

    // Write the input video blob to FFmpeg's virtual filesystem
    await ffmpeg.writeFile("input.mp4", await main_fetchFile(blob))

    // Reprocess the video to ensure metadata is added correctly
    await ffmpeg.exec(["-i", "input.mp4", "-movflags", "faststart", "-c", "copy", "output.mp4"])

    // Read the fixed video file from the virtual filesystem
    const fixedData = await ffmpeg.readFile("output.mp4")

    // Create a new Blob for the fixed video
    const fixedBlob = new Blob([fixedData.buffer], { type: "video/mp4" })

    // Return the fixed Blob
    return fixedBlob
  }

  //Function to toggle record button visibility
  function RecordButtonToggle(isVisible) {
    if (isVisible) {
      recordOutline.style.display = "block"
      recordButton.style.display = "block"
    } else {
      recordOutline.style.display = "none"
      recordButton.style.display = "none"
    }
  }

  //Fucntion to switch camera between front & back
  async function updateCamera(session) {
    isBackFacing = !isBackFacing

    try {
      if (mediaStream) {
        session.pause()
        mediaStream.getVideoTracks()[0].stop()
      }

      try {
        mediaStream = await navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: isBackFacing ? "environment" : "user",
            width: { ideal: 3840, min: 1280 },  // 4K width
            height: { ideal: 2160, min: 720 },  // 4K height (16:9)
            aspectRatio: { ideal: 16/9 }
          }
        })
      } catch (error) {
        if (error.name === 'OverconstrainedError') {
          // If 4K fails, try HD
          mediaStream = await navigator.mediaDevices.getUserMedia({
            video: {
              facingMode: isBackFacing ? "environment" : "user",
              width: { ideal: 1920, min: 1280 },
              height: { ideal: 1080, min: 720 },  // Fix height for HD (1080p)
              aspectRatio: { ideal: 16/9 }
            }
          })
        } else {
          throw error;
        }
      }

      const source = main_createMediaStreamSource(mediaStream, {
        cameraType: isBackFacing ? "environment" : "user",
      })

      await session.setSource(source)
      if (!isBackFacing) {
        source.setTransform(main_Transform2D_Transform2D.MirrorX)
      }
      await source.setRenderSize(window.innerWidth, window.innerHeight)

      await session.play()
    } catch (error) {
      console.error('Error switching camera:', error.name, error.message)
      if (error.name === 'NotAllowedError') {
        alert('Camera access was denied. Please grant camera permissions and reload the page.')
      } else if (error.name === 'NotFoundError') {
        alert('Could not find the ' + (isBackFacing ? 'back' : 'front') + ' camera.')
      } else {
        alert('Failed to switch camera. Please check your device permissions.')
      }
      // Revert the isBackFacing flag since we failed to switch
      isBackFacing = !isBackFacing
    }
  }

  //Function to setup media recorder and start recording
  function manageMediaRecorder(session) {
    console.log("session output cature")
    const ms = liveRenderTarget.captureStream(60)
    mediaRecorder = new MediaRecorder(ms, { mimeType: "video/mp4" })
    console.log("create media recorder")
    recordedChunks = []
    // Handle recorded data once it is available
    mediaRecorder.ondataavailable = (event) => {
      console.log("start record")

      if (event.data && event.data.size > 0) {
        recordedChunks.push(event.data)
      }
    }
    // Handle recording data when recording stopped
    mediaRecorder.onstop = async () => {
      console.log("stop record")
      //display loading icon while video is being processed
      loadingIcon.style.display = "block"
      const blob = new Blob(recordedChunks, { type: "video/mp4" })
      const fixedBlob = await fixVideoDuration(blob)
      // Generate a URL for the fixed video
      const url = URL.createObjectURL(fixedBlob)
      //hide loading icon once video is done processing
      loadingIcon.style.display = "none"
      displayPostRecordButtons(url)
    }
    //Start recording
    mediaRecorder.start()
  }

  function displayPostRecordButtons(url, fixedBlob) {
    actionbutton.style.display = "block"
    backButtonContainer.style.display = "block"
    switchButton.style.display = "none"

    //Logic for when download button is selected
    document.getElementById("download-button").onclick = () => {
      const a = document.createElement("a")
      a.href = url
      a.download = "recording.mp4" //Change downloaded file name here
      a.click()
      a.remove()
    }

    //Logic for when share button is selected
    document.getElementById("share-button").onclick = async () => {
      try {
        const file = new File([fixedBlob], "recording.mp4", { type: "video/mp4" }) // Convert blob to file

        // Check if sharing files is supported
        if (navigator.canShare && navigator.canShare({ files: [file] })) {
          await navigator.share({
            files: [file],
            title: "Recorded Video",
            text: "Check out this recording!",
          })
          console.log("File shared successfully")
        } else {
          console.error("Sharing files is not supported on this device.")
        }
      } catch (error) {
        console.error("Error while sharing:", error)
      }
    }

    document.getElementById("back-button").addEventListener("click", () => {
      //TODO: Add logic to go back to recording
      actionbutton.style.display = "none"
      backButtonContainer.style.display = "none"
      RecordButtonToggle(true)
    })
  }
})()

})();

/******/ })()
;